{
  "version": 3,
  "sources": ["../../../../../node_modules/reflect-metadata/Reflect.js", "../../../../../node_modules/tsyringe/node_modules/tslib/tslib.es6.js", "../../../../../node_modules/tsyringe/dist/cjs/types/lifecycle.js", "../../../../../node_modules/tsyringe/dist/cjs/types/index.js", "../../../../../node_modules/tsyringe/dist/cjs/reflection-helpers.js", "../../../../../node_modules/tsyringe/dist/cjs/providers/class-provider.js", "../../../../../node_modules/tsyringe/dist/cjs/providers/factory-provider.js", "../../../../../node_modules/tsyringe/dist/cjs/lazy-helpers.js", "../../../../../node_modules/tsyringe/dist/cjs/providers/injection-token.js", "../../../../../node_modules/tsyringe/dist/cjs/providers/token-provider.js", "../../../../../node_modules/tsyringe/dist/cjs/providers/value-provider.js", "../../../../../node_modules/tsyringe/dist/cjs/providers/index.js", "../../../../../node_modules/tsyringe/dist/cjs/providers/provider.js", "../../../../../node_modules/tsyringe/dist/cjs/registry-base.js", "../../../../../node_modules/tsyringe/dist/cjs/registry.js", "../../../../../node_modules/tsyringe/dist/cjs/resolution-context.js", "../../../../../node_modules/tsyringe/dist/cjs/error-helpers.js", "../../../../../node_modules/tsyringe/dist/cjs/types/disposable.js", "../../../../../node_modules/tsyringe/dist/cjs/interceptors.js", "../../../../../node_modules/tsyringe/dist/cjs/dependency-container.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/auto-injectable.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/inject.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/injectable.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/registry.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/singleton.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/inject-all.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/inject-all-with-transform.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/inject-with-transform.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/scoped.js", "../../../../../node_modules/tsyringe/dist/cjs/decorators/index.js", "../../../../../node_modules/tsyringe/dist/cjs/factories/instance-caching-factory.js", "../../../../../node_modules/tsyringe/dist/cjs/factories/instance-per-container-caching-factory.js", "../../../../../node_modules/tsyringe/dist/cjs/factories/predicate-aware-class-factory.js", "../../../../../node_modules/tsyringe/dist/cjs/factories/index.js", "../../../../../node_modules/tsyringe/dist/cjs/index.js", "../../../../../node_modules/src/metadata/ValidationMetadata.ts", "../../../../../node_modules/src/validation-schema/ValidationSchemaToMetadataTransformer.ts", "../../../../../node_modules/src/utils/convert-to-array.util.ts", "../../../../../node_modules/src/utils/get-global.util.ts", "../../../../../node_modules/src/utils/is-promise.util.ts", "../../../../../node_modules/src/utils/index.ts", "../../../../../node_modules/src/metadata/MetadataStorage.ts", "../../../../../node_modules/src/validation/ValidationError.ts", "../../../../../node_modules/src/validation/ValidationTypes.ts", "../../../../../node_modules/src/validation/ValidationUtils.ts", "../../../../../node_modules/src/validation/ValidationExecutor.ts", "../../../../../node_modules/src/validation/Validator.ts", "../../../../../node_modules/src/container.ts", "../../../../../node_modules/src/decorator/common/Allow.ts", "../../../../../node_modules/src/metadata/ConstraintMetadata.ts", "../../../../../node_modules/src/register-decorator.ts", "../../../../../node_modules/src/decorator/common/ValidateBy.ts", "../../../../../node_modules/src/decorator/common/IsDefined.ts", "../../../../../node_modules/src/decorator/common/IsOptional.ts", "../../../../../node_modules/src/decorator/common/Validate.ts", "../../../../../node_modules/src/decorator/common/ValidateIf.ts", "../../../../../node_modules/src/decorator/common/ValidateNested.ts", "../../../../../node_modules/src/decorator/common/ValidatePromise.ts", "../../../../../node_modules/validator/lib/util/assertString.js", "../../../../../node_modules/validator/lib/util/merge.js", "../../../../../node_modules/validator/lib/util/includesString.js", "../../../../../node_modules/validator/lib/isLatLong.js", "../../../../../node_modules/src/decorator/common/IsLatLong.ts", "../../../../../node_modules/src/decorator/common/IsLatitude.ts", "../../../../../node_modules/src/decorator/common/IsLongitude.ts", "../../../../../node_modules/src/decorator/common/Equals.ts", "../../../../../node_modules/src/decorator/common/NotEquals.ts", "../../../../../node_modules/src/decorator/common/IsEmpty.ts", "../../../../../node_modules/src/decorator/common/IsNotEmpty.ts", "../../../../../node_modules/src/decorator/common/IsIn.ts", "../../../../../node_modules/src/decorator/common/IsNotIn.ts", "../../../../../node_modules/validator/lib/util/nullUndefinedCheck.js", "../../../../../node_modules/validator/lib/alpha.js", "../../../../../node_modules/validator/lib/isFloat.js", "../../../../../node_modules/validator/lib/toFloat.js", "../../../../../node_modules/validator/lib/isDivisibleBy.js", "../../../../../node_modules/src/decorator/number/IsDivisibleBy.ts", "../../../../../node_modules/src/decorator/number/IsPositive.ts", "../../../../../node_modules/src/decorator/number/IsNegative.ts", "../../../../../node_modules/src/decorator/number/Max.ts", "../../../../../node_modules/src/decorator/number/Min.ts", "../../../../../node_modules/src/decorator/date/MinDate.ts", "../../../../../node_modules/src/decorator/date/MaxDate.ts", "../../../../../node_modules/validator/lib/util/toString.js", "../../../../../node_modules/validator/lib/contains.js", "../../../../../node_modules/src/decorator/string/Contains.ts", "../../../../../node_modules/src/decorator/string/NotContains.ts", "../../../../../node_modules/validator/lib/isAlpha.js", "../../../../../node_modules/src/decorator/string/IsAlpha.ts", "../../../../../node_modules/validator/lib/isAlphanumeric.js", "../../../../../node_modules/src/decorator/string/IsAlphanumeric.ts", "../../../../../node_modules/validator/lib/util/includesArray.js", "../../../../../node_modules/validator/lib/isDecimal.js", "../../../../../node_modules/src/decorator/string/IsDecimal.ts", "../../../../../node_modules/validator/lib/isAscii.js", "../../../../../node_modules/src/decorator/string/IsAscii.ts", "../../../../../node_modules/validator/lib/isBase64.js", "../../../../../node_modules/src/decorator/string/IsBase64.ts", "../../../../../node_modules/validator/lib/isByteLength.js", "../../../../../node_modules/src/decorator/string/IsByteLength.ts", "../../../../../node_modules/validator/lib/isLuhnNumber.js", "../../../../../node_modules/validator/lib/isCreditCard.js", "../../../../../node_modules/src/decorator/string/IsCreditCard.ts", "../../../../../node_modules/validator/lib/isCurrency.js", "../../../../../node_modules/src/decorator/string/IsCurrency.ts", "../../../../../node_modules/validator/lib/util/checkHost.js", "../../../../../node_modules/validator/lib/isFQDN.js", "../../../../../node_modules/validator/lib/isIP.js", "../../../../../node_modules/validator/lib/isEmail.js", "../../../../../node_modules/src/decorator/string/IsEmail.ts", "../../../../../node_modules/src/decorator/string/IsFQDN.ts", "../../../../../node_modules/validator/lib/isFullWidth.js", "../../../../../node_modules/src/decorator/string/IsFullWidth.ts", "../../../../../node_modules/validator/lib/isHalfWidth.js", "../../../../../node_modules/src/decorator/string/IsHalfWidth.ts", "../../../../../node_modules/validator/lib/isVariableWidth.js", "../../../../../node_modules/src/decorator/string/IsVariableWidth.ts", "../../../../../node_modules/validator/lib/isHexColor.js", "../../../../../node_modules/src/decorator/string/IsHexColor.ts", "../../../../../node_modules/validator/lib/isHexadecimal.js", "../../../../../node_modules/src/decorator/string/IsHexadecimal.ts", "../../../../../node_modules/src/decorator/ValidationOptions.ts", "../../../../../node_modules/validator/lib/isMACAddress.js", "../../../../../node_modules/src/decorator/string/IsMacAddress.ts", "../../../../../node_modules/src/decorator/string/IsIP.ts", "../../../../../node_modules/validator/lib/isInt.js", "../../../../../node_modules/validator/lib/isPort.js", "../../../../../node_modules/src/decorator/string/IsPort.ts", "../../../../../node_modules/validator/lib/isISBN.js", "../../../../../node_modules/src/decorator/string/IsISBN.ts", "../../../../../node_modules/validator/lib/isISIN.js", "../../../../../node_modules/src/decorator/string/IsISIN.ts", "../../../../../node_modules/validator/lib/isISO8601.js", "../../../../../node_modules/src/decorator/string/IsISO8601.ts", "../../../../../node_modules/validator/lib/isJSON.js", "../../../../../node_modules/src/decorator/string/IsJSON.ts", "../../../../../node_modules/validator/lib/isJWT.js", "../../../../../node_modules/src/decorator/string/IsJWT.ts", "../../../../../node_modules/validator/lib/isLowercase.js", "../../../../../node_modules/src/decorator/string/IsLowercase.ts", "../../../../../node_modules/validator/lib/isMobilePhone.js", "../../../../../node_modules/src/decorator/string/IsMobilePhone.ts", "../../../../../node_modules/validator/lib/isISO31661Alpha2.js", "../../../../../node_modules/src/decorator/string/IsISO31661Alpha2.ts", "../../../../../node_modules/validator/lib/isISO31661Alpha3.js", "../../../../../node_modules/src/decorator/string/IsISO31661Alpha3.ts", "../../../../../node_modules/validator/lib/isMongoId.js", "../../../../../node_modules/src/decorator/string/IsMongoId.ts", "../../../../../node_modules/validator/lib/isMultibyte.js", "../../../../../node_modules/src/decorator/string/IsMultibyte.ts", "../../../../../node_modules/validator/lib/isSurrogatePair.js", "../../../../../node_modules/src/decorator/string/IsSurrogatePair.ts", "../../../../../node_modules/validator/lib/isURL.js", "../../../../../node_modules/src/decorator/string/IsUrl.ts", "../../../../../node_modules/validator/lib/isUUID.js", "../../../../../node_modules/src/decorator/string/IsUUID.ts", "../../../../../node_modules/src/decorator/string/IsFirebasePushId.ts", "../../../../../node_modules/validator/lib/isUppercase.js", "../../../../../node_modules/src/decorator/string/IsUppercase.ts", "../../../../../node_modules/validator/lib/isLength.js", "../../../../../node_modules/src/decorator/string/Length.ts", "../../../../../node_modules/src/decorator/string/MaxLength.ts", "../../../../../node_modules/src/decorator/string/MinLength.ts", "../../../../../node_modules/validator/lib/matches.js", "../../../../../node_modules/src/decorator/string/Matches.ts", "../../../../../node_modules/libphonenumber-js/metadata.max.json", "../../../../../node_modules/libphonenumber-js/source/helpers/isObject.js", "../../../../../node_modules/libphonenumber-js/source/normalizeArguments.js", "../../../../../node_modules/libphonenumber-js/source/constants.js", "../../../../../node_modules/libphonenumber-js/source/ParseError.js", "../../../../../node_modules/libphonenumber-js/source/tools/semver-compare.js", "../../../../../node_modules/libphonenumber-js/source/metadata.js", "../../../../../node_modules/libphonenumber-js/source/helpers/extension/createExtensionPattern.js", "../../../../../node_modules/libphonenumber-js/source/helpers/isViablePhoneNumber.js", "../../../../../node_modules/libphonenumber-js/source/helpers/extension/extractExtension.js", "../../../../../node_modules/libphonenumber-js/source/helpers/parseDigits.js", "../../../../../node_modules/libphonenumber-js/source/parseIncompletePhoneNumber.js", "../../../../../node_modules/libphonenumber-js/source/getCountryCallingCode.js", "../../../../../node_modules/libphonenumber-js/source/helpers/mergeArrays.js", "../../../../../node_modules/libphonenumber-js/source/helpers/checkNumberLength.js", "../../../../../node_modules/libphonenumber-js/source/isPossible.js", "../../../../../node_modules/libphonenumber-js/source/helpers/matchesEntirely.js", "../../../../../node_modules/libphonenumber-js/source/helpers/getNumberType.js", "../../../../../node_modules/libphonenumber-js/source/isValid.js", "../../../../../node_modules/libphonenumber-js/source/helpers/getPossibleCountriesForNumber.js", "../../../../../node_modules/libphonenumber-js/source/helpers/stripIddPrefix.js", "../../../../../node_modules/libphonenumber-js/source/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js", "../../../../../node_modules/libphonenumber-js/source/helpers/extractNationalNumber.js", "../../../../../node_modules/libphonenumber-js/source/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js", "../../../../../node_modules/libphonenumber-js/source/helpers/extractCountryCallingCode.js", "../../../../../node_modules/libphonenumber-js/source/helpers/applyInternationalSeparatorStyle.js", "../../../../../node_modules/libphonenumber-js/source/helpers/formatNationalNumberUsingFormat.js", "../../../../../node_modules/libphonenumber-js/source/helpers/getIddPrefix.js", "../../../../../node_modules/libphonenumber-js/source/helpers/RFC3966.js", "../../../../../node_modules/libphonenumber-js/source/format.js", "../../../../../node_modules/libphonenumber-js/source/PhoneNumber.js", "../../../../../node_modules/libphonenumber-js/source/helpers/getCountryByNationalNumber.js", "../../../../../node_modules/libphonenumber-js/source/helpers/getCountryByCallingCode.js", "../../../../../node_modules/libphonenumber-js/source/helpers/extractPhoneContext.js", "../../../../../node_modules/libphonenumber-js/source/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js", "../../../../../node_modules/libphonenumber-js/source/parse.js", "../../../../../node_modules/libphonenumber-js/source/parsePhoneNumberWithError_.js", "../../../../../node_modules/libphonenumber-js/source/parsePhoneNumber_.js", "../../../../../node_modules/libphonenumber-js/source/parsePhoneNumber.js", "../../../../../node_modules/libphonenumber-js/source/parsePhoneNumberWithError.js", "../../../../../node_modules/libphonenumber-js/source/isValidPhoneNumber.js", "../../../../../node_modules/libphonenumber-js/source/isPossiblePhoneNumber.js", "../../../../../node_modules/libphonenumber-js/source/validatePhoneNumberLength.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/LRUCache.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/RegExpCache.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/util.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/utf-8.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/matchPhoneNumberStringAgainstPhoneNumber.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/Leniency.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/parsePreCandidate.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/isValidPreCandidate.js", "../../../../../node_modules/libphonenumber-js/source/findNumbers/isValidCandidate.js", "../../../../../node_modules/libphonenumber-js/source/PhoneNumberMatcher.js", "../../../../../node_modules/libphonenumber-js/source/legacy/findNumbers.js", "../../../../../node_modules/libphonenumber-js/source/legacy/searchNumbers.js", "../../../../../node_modules/libphonenumber-js/source/findPhoneNumbersInText.js", "../../../../../node_modules/libphonenumber-js/source/searchPhoneNumbersInText.js", "../../../../../node_modules/libphonenumber-js/source/AsYouTypeState.js", "../../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.util.js", "../../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.complete.js", "../../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.PatternParser.js", "../../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.PatternMatcher.js", "../../../../../node_modules/libphonenumber-js/source/AsYouTypeFormatter.js", "../../../../../node_modules/libphonenumber-js/source/AsYouTypeParser.js", "../../../../../node_modules/libphonenumber-js/source/AsYouType.js", "../../../../../node_modules/libphonenumber-js/source/getCountries.js", "../../../../../node_modules/libphonenumber-js/source/getExampleNumber.js", "../../../../../node_modules/libphonenumber-js/source/formatIncompletePhoneNumber.js", "../../../../../node_modules/libphonenumber-js/core/index.cjs", "../../../../../node_modules/libphonenumber-js/max/index.cjs", "../../../../../node_modules/src/decorator/string/IsPhoneNumber.ts", "../../../../../node_modules/src/decorator/string/IsMilitaryTime.ts", "../../../../../node_modules/validator/lib/isHash.js", "../../../../../node_modules/src/decorator/string/IsHash.ts", "../../../../../node_modules/validator/lib/isISSN.js", "../../../../../node_modules/src/decorator/string/IsISSN.ts", "../../../../../node_modules/src/decorator/string/IsDateString.ts", "../../../../../node_modules/validator/lib/isBoolean.js", "../../../../../node_modules/src/decorator/string/IsBooleanString.ts", "../../../../../node_modules/validator/lib/isNumeric.js", "../../../../../node_modules/src/decorator/string/IsNumberString.ts", "../../../../../node_modules/validator/lib/isBase32.js", "../../../../../node_modules/src/decorator/string/IsBase32.ts", "../../../../../node_modules/validator/lib/isBIC.js", "../../../../../node_modules/src/decorator/string/IsBIC.ts", "../../../../../node_modules/validator/lib/isBtcAddress.js", "../../../../../node_modules/src/decorator/string/IsBtcAddress.ts", "../../../../../node_modules/validator/lib/isDataURI.js", "../../../../../node_modules/src/decorator/string/IsDataURI.ts", "../../../../../node_modules/validator/lib/isEAN.js", "../../../../../node_modules/src/decorator/string/IsEAN.ts", "../../../../../node_modules/validator/lib/isEthereumAddress.js", "../../../../../node_modules/src/decorator/string/IsEthereumAddress.ts", "../../../../../node_modules/validator/lib/isHSL.js", "../../../../../node_modules/src/decorator/string/IsHSL.ts", "../../../../../node_modules/validator/lib/isIBAN.js", "../../../../../node_modules/src/decorator/string/IsIBAN.ts", "../../../../../node_modules/validator/lib/isIdentityCard.js", "../../../../../node_modules/src/decorator/string/IsIdentityCard.ts", "../../../../../node_modules/validator/lib/isISRC.js", "../../../../../node_modules/src/decorator/string/IsISRC.ts", "../../../../../node_modules/validator/lib/isLocale.js", "../../../../../node_modules/src/decorator/string/IsLocale.ts", "../../../../../node_modules/validator/lib/isMagnetURI.js", "../../../../../node_modules/src/decorator/string/IsMagnetURI.ts", "../../../../../node_modules/validator/lib/isMimeType.js", "../../../../../node_modules/src/decorator/string/IsMimeType.ts", "../../../../../node_modules/validator/lib/isOctal.js", "../../../../../node_modules/src/decorator/string/IsOctal.ts", "../../../../../node_modules/validator/lib/isPassportNumber.js", "../../../../../node_modules/src/decorator/string/IsPassportNumber.ts", "../../../../../node_modules/validator/lib/isPostalCode.js", "../../../../../node_modules/src/decorator/string/IsPostalCode.ts", "../../../../../node_modules/validator/lib/isRFC3339.js", "../../../../../node_modules/src/decorator/string/IsRFC3339.ts", "../../../../../node_modules/validator/lib/isRgbColor.js", "../../../../../node_modules/src/decorator/string/IsRgbColor.ts", "../../../../../node_modules/validator/lib/util/multilineRegex.js", "../../../../../node_modules/validator/lib/isSemVer.js", "../../../../../node_modules/src/decorator/string/IsSemVer.ts", "../../../../../node_modules/validator/lib/toDate.js", "../../../../../node_modules/validator/lib/toInt.js", "../../../../../node_modules/validator/lib/toBoolean.js", "../../../../../node_modules/validator/lib/equals.js", "../../../../../node_modules/validator/lib/isIPRange.js", "../../../../../node_modules/validator/lib/isDate.js", "../../../../../node_modules/validator/lib/isTime.js", "../../../../../node_modules/validator/lib/isAbaRouting.js", "../../../../../node_modules/validator/lib/isIMEI.js", "../../../../../node_modules/validator/lib/isMD5.js", "../../../../../node_modules/validator/lib/isEmpty.js", "../../../../../node_modules/validator/lib/isULID.js", "../../../../../node_modules/validator/lib/isAfter.js", "../../../../../node_modules/validator/lib/isBefore.js", "../../../../../node_modules/validator/lib/isIn.js", "../../../../../node_modules/validator/lib/util/algorithms.js", "../../../../../node_modules/validator/lib/isTaxID.js", "../../../../../node_modules/validator/lib/isISO6346.js", "../../../../../node_modules/validator/lib/isISO6391.js", "../../../../../node_modules/validator/lib/isISO15924.js", "../../../../../node_modules/validator/lib/isISO31661Numeric.js", "../../../../../node_modules/validator/lib/isISO4217.js", "../../../../../node_modules/validator/lib/isBase58.js", "../../../../../node_modules/validator/lib/rtrim.js", "../../../../../node_modules/validator/lib/ltrim.js", "../../../../../node_modules/validator/lib/trim.js", "../../../../../node_modules/validator/lib/isMailtoURI.js", "../../../../../node_modules/validator/lib/escape.js", "../../../../../node_modules/validator/lib/unescape.js", "../../../../../node_modules/validator/lib/blacklist.js", "../../../../../node_modules/validator/lib/stripLow.js", "../../../../../node_modules/validator/lib/whitelist.js", "../../../../../node_modules/validator/lib/isWhitelisted.js", "../../../../../node_modules/validator/lib/normalizeEmail.js", "../../../../../node_modules/validator/lib/isSlug.js", "../../../../../node_modules/validator/lib/isLicensePlate.js", "../../../../../node_modules/validator/lib/isStrongPassword.js", "../../../../../node_modules/validator/lib/isVAT.js", "../../../../../node_modules/validator/index.js", "../../../../../node_modules/src/decorator/string/IsStrongPassword.ts", "../../../../../node_modules/src/decorator/string/IsTimeZone.ts", "../../../../../node_modules/src/decorator/string/IsBase58.ts", "../../../../../node_modules/src/decorator/string/is-tax-id.ts", "../../../../../node_modules/src/decorator/string/is-iso4217-currency-code.ts", "../../../../../node_modules/src/decorator/typechecker/IsBoolean.ts", "../../../../../node_modules/src/decorator/typechecker/IsDate.ts", "../../../../../node_modules/src/decorator/typechecker/IsNumber.ts", "../../../../../node_modules/src/decorator/typechecker/IsEnum.ts", "../../../../../node_modules/src/decorator/typechecker/IsInt.ts", "../../../../../node_modules/src/decorator/typechecker/IsString.ts", "../../../../../node_modules/src/decorator/typechecker/IsArray.ts", "../../../../../node_modules/src/decorator/typechecker/IsObject.ts", "../../../../../node_modules/src/decorator/array/ArrayContains.ts", "../../../../../node_modules/src/decorator/array/ArrayNotContains.ts", "../../../../../node_modules/src/decorator/array/ArrayNotEmpty.ts", "../../../../../node_modules/src/decorator/array/ArrayMinSize.ts", "../../../../../node_modules/src/decorator/array/ArrayMaxSize.ts", "../../../../../node_modules/src/decorator/array/ArrayUnique.ts", "../../../../../node_modules/src/decorator/object/IsNotEmptyObject.ts", "../../../../../node_modules/src/decorator/object/IsInstance.ts", "../../../../../node_modules/src/decorator/decorators.ts", "../../../../../node_modules/class-validator/cjs/validation/ValidatorConstraintInterface.js", "../../../../../node_modules/class-validator/cjs/validation/ValidatorOptions.js", "../../../../../node_modules/class-validator/cjs/validation/ValidationArguments.js", "../../../../../node_modules/class-validator/cjs/validation-schema/ValidationSchema.js", "../../../../../node_modules/src/index.ts", "../../../../../src/agendamento/controller/createAppointment.ts", "../../../../../src/core/container.ts", "../../../../../src/core/types.ts", "../../../../../src/agendamento/service/AppointmentService.ts", "../../../../../src/agenda/service/ScheduleService.ts", "../../../../../src/agenda/mocks/doctors.mock.ts", "../../../../../src/utils/httpResponse.ts", "../../../../../src/utils/validation.ts", "../../../../../src/agendamento/dto/CreateAppointmentDto.ts"],
  "sourcesContent": ["/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof globalThis === \"object\" ? globalThis :\n            typeof global === \"object\" ? global :\n                typeof self === \"object\" ? self :\n                    typeof this === \"object\" ? this :\n                        sloppyModeThis();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect !== \"undefined\") {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter, root);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                if (previous)\n                    previous(key, value);\n            };\n        }\n        function functionThis() {\n            try {\n                return Function(\"return this;\")();\n            }\n            catch (_) { }\n        }\n        function indirectEvalThis() {\n            try {\n                return (void 0, eval)(\"(function() { return this; })()\");\n            }\n            catch (_) { }\n        }\n        function sloppyModeThis() {\n            return functionThis() || indirectEvalThis();\n        }\n    })(function (exporter, root) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var _Map = typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        var registrySymbol = supportsSymbol ? Symbol.for(\"@reflect-metadata:registry\") : undefined;\n        var metadataRegistry = GetOrCreateMetadataRegistry();\n        var metadataProvider = CreateMetadataProvider(metadataRegistry);\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var provider = GetMetadataProvider(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return provider.OrdinaryDeleteMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return false;\n            return ToBoolean(provider.OrdinaryHasOwnMetadata(MetadataKey, O, P));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ false);\n            if (IsUndefined(provider))\n                return;\n            return provider.OrdinaryGetOwnMetadata(MetadataKey, O, P);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var provider = GetMetadataProvider(O, P, /*Create*/ true);\n            provider.OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var provider = GetMetadataProvider(O, P, /*create*/ false);\n            if (!provider) {\n                return [];\n            }\n            return provider.OrdinaryOwnMetadataKeys(O, P);\n        }\n        // 6 ECMAScript Data Types and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        function SameValueZero(x, y) {\n            return x === y || x !== x && y !== y;\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // Global metadata registry\n        // - Allows `import \"reflect-metadata\"` and `import \"reflect-metadata/no-conflict\"` to interoperate.\n        // - Uses isolated metadata if `Reflect` is frozen before the registry can be installed.\n        /**\n         * Creates a registry used to allow multiple `reflect-metadata` providers.\n         */\n        function CreateMetadataRegistry() {\n            var fallback;\n            if (!IsUndefined(registrySymbol) &&\n                typeof root.Reflect !== \"undefined\" &&\n                !(registrySymbol in root.Reflect) &&\n                typeof root.Reflect.defineMetadata === \"function\") {\n                // interoperate with older version of `reflect-metadata` that did not support a registry.\n                fallback = CreateFallbackProvider(root.Reflect);\n            }\n            var first;\n            var second;\n            var rest;\n            var targetProviderMap = new _WeakMap();\n            var registry = {\n                registerProvider: registerProvider,\n                getProvider: getProvider,\n                setProvider: setProvider,\n            };\n            return registry;\n            function registerProvider(provider) {\n                if (!Object.isExtensible(registry)) {\n                    throw new Error(\"Cannot add provider to a frozen registry.\");\n                }\n                switch (true) {\n                    case fallback === provider: break;\n                    case IsUndefined(first):\n                        first = provider;\n                        break;\n                    case first === provider: break;\n                    case IsUndefined(second):\n                        second = provider;\n                        break;\n                    case second === provider: break;\n                    default:\n                        if (rest === undefined)\n                            rest = new _Set();\n                        rest.add(provider);\n                        break;\n                }\n            }\n            function getProviderNoCache(O, P) {\n                if (!IsUndefined(first)) {\n                    if (first.isProviderFor(O, P))\n                        return first;\n                    if (!IsUndefined(second)) {\n                        if (second.isProviderFor(O, P))\n                            return first;\n                        if (!IsUndefined(rest)) {\n                            var iterator = GetIterator(rest);\n                            while (true) {\n                                var next = IteratorStep(iterator);\n                                if (!next) {\n                                    return undefined;\n                                }\n                                var provider = IteratorValue(next);\n                                if (provider.isProviderFor(O, P)) {\n                                    IteratorClose(iterator);\n                                    return provider;\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!IsUndefined(fallback) && fallback.isProviderFor(O, P)) {\n                    return fallback;\n                }\n                return undefined;\n            }\n            function getProvider(O, P) {\n                var providerMap = targetProviderMap.get(O);\n                var provider;\n                if (!IsUndefined(providerMap)) {\n                    provider = providerMap.get(P);\n                }\n                if (!IsUndefined(provider)) {\n                    return provider;\n                }\n                provider = getProviderNoCache(O, P);\n                if (!IsUndefined(provider)) {\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return provider;\n            }\n            function hasProvider(provider) {\n                if (IsUndefined(provider))\n                    throw new TypeError();\n                return first === provider || second === provider || !IsUndefined(rest) && rest.has(provider);\n            }\n            function setProvider(O, P, provider) {\n                if (!hasProvider(provider)) {\n                    throw new Error(\"Metadata provider not registered.\");\n                }\n                var existingProvider = getProvider(O, P);\n                if (existingProvider !== provider) {\n                    if (!IsUndefined(existingProvider)) {\n                        return false;\n                    }\n                    var providerMap = targetProviderMap.get(O);\n                    if (IsUndefined(providerMap)) {\n                        providerMap = new _Map();\n                        targetProviderMap.set(O, providerMap);\n                    }\n                    providerMap.set(P, provider);\n                }\n                return true;\n            }\n        }\n        /**\n         * Gets or creates the shared registry of metadata providers.\n         */\n        function GetOrCreateMetadataRegistry() {\n            var metadataRegistry;\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                metadataRegistry = root.Reflect[registrySymbol];\n            }\n            if (IsUndefined(metadataRegistry)) {\n                metadataRegistry = CreateMetadataRegistry();\n            }\n            if (!IsUndefined(registrySymbol) && IsObject(root.Reflect) && Object.isExtensible(root.Reflect)) {\n                Object.defineProperty(root.Reflect, registrySymbol, {\n                    enumerable: false,\n                    configurable: false,\n                    writable: false,\n                    value: metadataRegistry\n                });\n            }\n            return metadataRegistry;\n        }\n        function CreateMetadataProvider(registry) {\n            // [[Metadata]] internal slot\n            // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n            var metadata = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var targetMetadata = metadata.get(O);\n                    if (IsUndefined(targetMetadata))\n                        return false;\n                    return targetMetadata.has(P);\n                },\n                OrdinaryDefineOwnMetadata: OrdinaryDefineOwnMetadata,\n                OrdinaryHasOwnMetadata: OrdinaryHasOwnMetadata,\n                OrdinaryGetOwnMetadata: OrdinaryGetOwnMetadata,\n                OrdinaryOwnMetadataKeys: OrdinaryOwnMetadataKeys,\n                OrdinaryDeleteMetadata: OrdinaryDeleteMetadata,\n            };\n            metadataRegistry.registerProvider(provider);\n            return provider;\n            function GetOrCreateMetadataMap(O, P, Create) {\n                var targetMetadata = metadata.get(O);\n                var createdTargetMetadata = false;\n                if (IsUndefined(targetMetadata)) {\n                    if (!Create)\n                        return undefined;\n                    targetMetadata = new _Map();\n                    metadata.set(O, targetMetadata);\n                    createdTargetMetadata = true;\n                }\n                var metadataMap = targetMetadata.get(P);\n                if (IsUndefined(metadataMap)) {\n                    if (!Create)\n                        return undefined;\n                    metadataMap = new _Map();\n                    targetMetadata.set(P, metadataMap);\n                    if (!registry.setProvider(O, P, provider)) {\n                        targetMetadata.delete(P);\n                        if (createdTargetMetadata) {\n                            metadata.delete(O);\n                        }\n                        throw new Error(\"Wrong provider for target.\");\n                    }\n                }\n                return metadataMap;\n            }\n            // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n            function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                return ToBoolean(metadataMap.has(MetadataKey));\n            }\n            // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n            function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return undefined;\n                return metadataMap.get(MetadataKey);\n            }\n            // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n            function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n                metadataMap.set(MetadataKey, MetadataValue);\n            }\n            // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n            // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n            function OrdinaryOwnMetadataKeys(O, P) {\n                var keys = [];\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return keys;\n                var keysObj = metadataMap.keys();\n                var iterator = GetIterator(keysObj);\n                var k = 0;\n                while (true) {\n                    var next = IteratorStep(iterator);\n                    if (!next) {\n                        keys.length = k;\n                        return keys;\n                    }\n                    var nextValue = IteratorValue(next);\n                    try {\n                        keys[k] = nextValue;\n                    }\n                    catch (e) {\n                        try {\n                            IteratorClose(iterator);\n                        }\n                        finally {\n                            throw e;\n                        }\n                    }\n                    k++;\n                }\n            }\n            function OrdinaryDeleteMetadata(MetadataKey, O, P) {\n                var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n                if (IsUndefined(metadataMap))\n                    return false;\n                if (!metadataMap.delete(MetadataKey))\n                    return false;\n                if (metadataMap.size === 0) {\n                    var targetMetadata = metadata.get(O);\n                    if (!IsUndefined(targetMetadata)) {\n                        targetMetadata.delete(P);\n                        if (targetMetadata.size === 0) {\n                            metadata.delete(targetMetadata);\n                        }\n                    }\n                }\n                return true;\n            }\n        }\n        function CreateFallbackProvider(reflect) {\n            var defineMetadata = reflect.defineMetadata, hasOwnMetadata = reflect.hasOwnMetadata, getOwnMetadata = reflect.getOwnMetadata, getOwnMetadataKeys = reflect.getOwnMetadataKeys, deleteMetadata = reflect.deleteMetadata;\n            var metadataOwner = new _WeakMap();\n            var provider = {\n                isProviderFor: function (O, P) {\n                    var metadataPropertySet = metadataOwner.get(O);\n                    if (!IsUndefined(metadataPropertySet) && metadataPropertySet.has(P)) {\n                        return true;\n                    }\n                    if (getOwnMetadataKeys(O, P).length) {\n                        if (IsUndefined(metadataPropertySet)) {\n                            metadataPropertySet = new _Set();\n                            metadataOwner.set(O, metadataPropertySet);\n                        }\n                        metadataPropertySet.add(P);\n                        return true;\n                    }\n                    return false;\n                },\n                OrdinaryDefineOwnMetadata: defineMetadata,\n                OrdinaryHasOwnMetadata: hasOwnMetadata,\n                OrdinaryGetOwnMetadata: getOwnMetadata,\n                OrdinaryOwnMetadataKeys: getOwnMetadataKeys,\n                OrdinaryDeleteMetadata: deleteMetadata,\n            };\n            return provider;\n        }\n        /**\n         * Gets the metadata provider for an object. If the object has no metadata provider and this is for a create operation,\n         * then this module's metadata provider is assigned to the object.\n         */\n        function GetMetadataProvider(O, P, Create) {\n            var registeredProvider = metadataRegistry.getProvider(O, P);\n            if (!IsUndefined(registeredProvider)) {\n                return registeredProvider;\n            }\n            if (Create) {\n                if (metadataRegistry.setProvider(O, P, metadataProvider)) {\n                    return metadataProvider;\n                }\n                throw new Error(\"Illegal state.\");\n            }\n            return undefined;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            var Map = /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (SameValueZero(key, this._cacheKey)) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (!SameValueZero(this._cacheKey, key)) {\n                        this._cacheIndex = -1;\n                        for (var i = 0; i < this._keys.length; i++) {\n                            if (SameValueZero(this._keys[i], key)) {\n                                this._cacheIndex = i;\n                                break;\n                            }\n                        }\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            return Map;\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            var Set = /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.keys(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n            return Set;\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    var array = new Uint8Array(size);\n                    if (typeof crypto !== \"undefined\") {\n                        crypto.getRandomValues(array);\n                    }\n                    else if (typeof msCrypto !== \"undefined\") {\n                        msCrypto.getRandomValues(array);\n                    }\n                    else {\n                        FillRandomBytes(array, size);\n                    }\n                    return array;\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 \u00A7 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Lifecycle;\n(function (Lifecycle) {\n    Lifecycle[Lifecycle[\"Transient\"] = 0] = \"Transient\";\n    Lifecycle[Lifecycle[\"Singleton\"] = 1] = \"Singleton\";\n    Lifecycle[Lifecycle[\"ResolutionScoped\"] = 2] = \"ResolutionScoped\";\n    Lifecycle[Lifecycle[\"ContainerScoped\"] = 3] = \"ContainerScoped\";\n})(Lifecycle || (Lifecycle = {}));\nexports.default = Lifecycle;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lifecycle_1 = require(\"./lifecycle\");\nObject.defineProperty(exports, \"Lifecycle\", { enumerable: true, get: function () { return lifecycle_1.default; } });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineInjectionTokenMetadata = exports.getParamInfo = exports.INJECTION_TOKEN_METADATA_KEY = void 0;\nexports.INJECTION_TOKEN_METADATA_KEY = \"injectionTokens\";\nfunction getParamInfo(target) {\n    const params = Reflect.getMetadata(\"design:paramtypes\", target) || [];\n    const injectionTokens = Reflect.getOwnMetadata(exports.INJECTION_TOKEN_METADATA_KEY, target) || {};\n    Object.keys(injectionTokens).forEach(key => {\n        params[+key] = injectionTokens[key];\n    });\n    return params;\n}\nexports.getParamInfo = getParamInfo;\nfunction defineInjectionTokenMetadata(data, transform) {\n    return function (target, _propertyKey, parameterIndex) {\n        const descriptors = Reflect.getOwnMetadata(exports.INJECTION_TOKEN_METADATA_KEY, target) || {};\n        descriptors[parameterIndex] = transform\n            ? {\n                token: data,\n                transform: transform.transformToken,\n                transformArgs: transform.args || []\n            }\n            : data;\n        Reflect.defineMetadata(exports.INJECTION_TOKEN_METADATA_KEY, descriptors, target);\n    };\n}\nexports.defineInjectionTokenMetadata = defineInjectionTokenMetadata;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isClassProvider = void 0;\nfunction isClassProvider(provider) {\n    return !!provider.useClass;\n}\nexports.isClassProvider = isClassProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isFactoryProvider = void 0;\nfunction isFactoryProvider(provider) {\n    return !!provider.useFactory;\n}\nexports.isFactoryProvider = isFactoryProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.delay = exports.DelayedConstructor = void 0;\nclass DelayedConstructor {\n    constructor(wrap) {\n        this.wrap = wrap;\n        this.reflectMethods = [\n            \"get\",\n            \"getPrototypeOf\",\n            \"setPrototypeOf\",\n            \"getOwnPropertyDescriptor\",\n            \"defineProperty\",\n            \"has\",\n            \"set\",\n            \"deleteProperty\",\n            \"apply\",\n            \"construct\",\n            \"ownKeys\"\n        ];\n    }\n    createProxy(createObject) {\n        const target = {};\n        let init = false;\n        let value;\n        const delayedObject = () => {\n            if (!init) {\n                value = createObject(this.wrap());\n                init = true;\n            }\n            return value;\n        };\n        return new Proxy(target, this.createHandler(delayedObject));\n    }\n    createHandler(delayedObject) {\n        const handler = {};\n        const install = (name) => {\n            handler[name] = (...args) => {\n                args[0] = delayedObject();\n                const method = Reflect[name];\n                return method(...args);\n            };\n        };\n        this.reflectMethods.forEach(install);\n        return handler;\n    }\n}\nexports.DelayedConstructor = DelayedConstructor;\nfunction delay(wrappedConstructor) {\n    if (typeof wrappedConstructor === \"undefined\") {\n        throw new Error(\"Attempt to `delay` undefined. Constructor must be wrapped in a callback\");\n    }\n    return new DelayedConstructor(wrappedConstructor);\n}\nexports.delay = delay;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isConstructorToken = exports.isTransformDescriptor = exports.isTokenDescriptor = exports.isNormalToken = void 0;\nconst lazy_helpers_1 = require(\"../lazy-helpers\");\nfunction isNormalToken(token) {\n    return typeof token === \"string\" || typeof token === \"symbol\";\n}\nexports.isNormalToken = isNormalToken;\nfunction isTokenDescriptor(descriptor) {\n    return (typeof descriptor === \"object\" &&\n        \"token\" in descriptor &&\n        \"multiple\" in descriptor);\n}\nexports.isTokenDescriptor = isTokenDescriptor;\nfunction isTransformDescriptor(descriptor) {\n    return (typeof descriptor === \"object\" &&\n        \"token\" in descriptor &&\n        \"transform\" in descriptor);\n}\nexports.isTransformDescriptor = isTransformDescriptor;\nfunction isConstructorToken(token) {\n    return typeof token === \"function\" || token instanceof lazy_helpers_1.DelayedConstructor;\n}\nexports.isConstructorToken = isConstructorToken;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isTokenProvider = void 0;\nfunction isTokenProvider(provider) {\n    return !!provider.useToken;\n}\nexports.isTokenProvider = isTokenProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValueProvider = void 0;\nfunction isValueProvider(provider) {\n    return provider.useValue != undefined;\n}\nexports.isValueProvider = isValueProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar class_provider_1 = require(\"./class-provider\");\nObject.defineProperty(exports, \"isClassProvider\", { enumerable: true, get: function () { return class_provider_1.isClassProvider; } });\nvar factory_provider_1 = require(\"./factory-provider\");\nObject.defineProperty(exports, \"isFactoryProvider\", { enumerable: true, get: function () { return factory_provider_1.isFactoryProvider; } });\nvar injection_token_1 = require(\"./injection-token\");\nObject.defineProperty(exports, \"isNormalToken\", { enumerable: true, get: function () { return injection_token_1.isNormalToken; } });\nvar token_provider_1 = require(\"./token-provider\");\nObject.defineProperty(exports, \"isTokenProvider\", { enumerable: true, get: function () { return token_provider_1.isTokenProvider; } });\nvar value_provider_1 = require(\"./value-provider\");\nObject.defineProperty(exports, \"isValueProvider\", { enumerable: true, get: function () { return value_provider_1.isValueProvider; } });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isProvider = void 0;\nconst class_provider_1 = require(\"./class-provider\");\nconst value_provider_1 = require(\"./value-provider\");\nconst token_provider_1 = require(\"./token-provider\");\nconst factory_provider_1 = require(\"./factory-provider\");\nfunction isProvider(provider) {\n    return (class_provider_1.isClassProvider(provider) ||\n        value_provider_1.isValueProvider(provider) ||\n        token_provider_1.isTokenProvider(provider) ||\n        factory_provider_1.isFactoryProvider(provider));\n}\nexports.isProvider = isProvider;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass RegistryBase {\n    constructor() {\n        this._registryMap = new Map();\n    }\n    entries() {\n        return this._registryMap.entries();\n    }\n    getAll(key) {\n        this.ensure(key);\n        return this._registryMap.get(key);\n    }\n    get(key) {\n        this.ensure(key);\n        const value = this._registryMap.get(key);\n        return value[value.length - 1] || null;\n    }\n    set(key, value) {\n        this.ensure(key);\n        this._registryMap.get(key).push(value);\n    }\n    setAll(key, value) {\n        this._registryMap.set(key, value);\n    }\n    has(key) {\n        this.ensure(key);\n        return this._registryMap.get(key).length > 0;\n    }\n    clear() {\n        this._registryMap.clear();\n    }\n    ensure(key) {\n        if (!this._registryMap.has(key)) {\n            this._registryMap.set(key, []);\n        }\n    }\n}\nexports.default = RegistryBase;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst registry_base_1 = require(\"./registry-base\");\nclass Registry extends registry_base_1.default {\n}\nexports.default = Registry;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass ResolutionContext {\n    constructor() {\n        this.scopedResolutions = new Map();\n    }\n}\nexports.default = ResolutionContext;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatErrorCtor = void 0;\nfunction formatDependency(params, idx) {\n    if (params === null) {\n        return `at position #${idx}`;\n    }\n    const argName = params.split(\",\")[idx].trim();\n    return `\"${argName}\" at position #${idx}`;\n}\nfunction composeErrorMessage(msg, e, indent = \"    \") {\n    return [msg, ...e.message.split(\"\\n\").map(l => indent + l)].join(\"\\n\");\n}\nfunction formatErrorCtor(ctor, paramIdx, error) {\n    const [, params = null] = ctor.toString().match(/constructor\\(([\\w, ]+)\\)/) || [];\n    const dep = formatDependency(params, paramIdx);\n    return composeErrorMessage(`Cannot inject the dependency ${dep} of \"${ctor.name}\" constructor. Reason:`, error);\n}\nexports.formatErrorCtor = formatErrorCtor;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDisposable = void 0;\nfunction isDisposable(value) {\n    if (typeof value.dispose !== \"function\")\n        return false;\n    const disposeFun = value.dispose;\n    if (disposeFun.length > 0) {\n        return false;\n    }\n    return true;\n}\nexports.isDisposable = isDisposable;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PostResolutionInterceptors = exports.PreResolutionInterceptors = void 0;\nconst registry_base_1 = require(\"./registry-base\");\nclass PreResolutionInterceptors extends registry_base_1.default {\n}\nexports.PreResolutionInterceptors = PreResolutionInterceptors;\nclass PostResolutionInterceptors extends registry_base_1.default {\n}\nexports.PostResolutionInterceptors = PostResolutionInterceptors;\nclass Interceptors {\n    constructor() {\n        this.preResolution = new PreResolutionInterceptors();\n        this.postResolution = new PostResolutionInterceptors();\n    }\n}\nexports.default = Interceptors;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.instance = exports.typeInfo = void 0;\nconst tslib_1 = require(\"tslib\");\nconst providers_1 = require(\"./providers\");\nconst provider_1 = require(\"./providers/provider\");\nconst injection_token_1 = require(\"./providers/injection-token\");\nconst registry_1 = require(\"./registry\");\nconst lifecycle_1 = require(\"./types/lifecycle\");\nconst resolution_context_1 = require(\"./resolution-context\");\nconst error_helpers_1 = require(\"./error-helpers\");\nconst lazy_helpers_1 = require(\"./lazy-helpers\");\nconst disposable_1 = require(\"./types/disposable\");\nconst interceptors_1 = require(\"./interceptors\");\nexports.typeInfo = new Map();\nclass InternalDependencyContainer {\n    constructor(parent) {\n        this.parent = parent;\n        this._registry = new registry_1.default();\n        this.interceptors = new interceptors_1.default();\n        this.disposed = false;\n        this.disposables = new Set();\n    }\n    register(token, providerOrConstructor, options = { lifecycle: lifecycle_1.default.Transient }) {\n        this.ensureNotDisposed();\n        let provider;\n        if (!provider_1.isProvider(providerOrConstructor)) {\n            provider = { useClass: providerOrConstructor };\n        }\n        else {\n            provider = providerOrConstructor;\n        }\n        if (providers_1.isTokenProvider(provider)) {\n            const path = [token];\n            let tokenProvider = provider;\n            while (tokenProvider != null) {\n                const currentToken = tokenProvider.useToken;\n                if (path.includes(currentToken)) {\n                    throw new Error(`Token registration cycle detected! ${[...path, currentToken].join(\" -> \")}`);\n                }\n                path.push(currentToken);\n                const registration = this._registry.get(currentToken);\n                if (registration && providers_1.isTokenProvider(registration.provider)) {\n                    tokenProvider = registration.provider;\n                }\n                else {\n                    tokenProvider = null;\n                }\n            }\n        }\n        if (options.lifecycle === lifecycle_1.default.Singleton ||\n            options.lifecycle == lifecycle_1.default.ContainerScoped ||\n            options.lifecycle == lifecycle_1.default.ResolutionScoped) {\n            if (providers_1.isValueProvider(provider) || providers_1.isFactoryProvider(provider)) {\n                throw new Error(`Cannot use lifecycle \"${lifecycle_1.default[options.lifecycle]}\" with ValueProviders or FactoryProviders`);\n            }\n        }\n        this._registry.set(token, { provider, options });\n        return this;\n    }\n    registerType(from, to) {\n        this.ensureNotDisposed();\n        if (providers_1.isNormalToken(to)) {\n            return this.register(from, {\n                useToken: to\n            });\n        }\n        return this.register(from, {\n            useClass: to\n        });\n    }\n    registerInstance(token, instance) {\n        this.ensureNotDisposed();\n        return this.register(token, {\n            useValue: instance\n        });\n    }\n    registerSingleton(from, to) {\n        this.ensureNotDisposed();\n        if (providers_1.isNormalToken(from)) {\n            if (providers_1.isNormalToken(to)) {\n                return this.register(from, {\n                    useToken: to\n                }, { lifecycle: lifecycle_1.default.Singleton });\n            }\n            else if (to) {\n                return this.register(from, {\n                    useClass: to\n                }, { lifecycle: lifecycle_1.default.Singleton });\n            }\n            throw new Error('Cannot register a type name as a singleton without a \"to\" token');\n        }\n        let useClass = from;\n        if (to && !providers_1.isNormalToken(to)) {\n            useClass = to;\n        }\n        return this.register(from, {\n            useClass\n        }, { lifecycle: lifecycle_1.default.Singleton });\n    }\n    resolve(token, context = new resolution_context_1.default(), isOptional = false) {\n        this.ensureNotDisposed();\n        const registration = this.getRegistration(token);\n        if (!registration && providers_1.isNormalToken(token)) {\n            if (isOptional) {\n                return undefined;\n            }\n            throw new Error(`Attempted to resolve unregistered dependency token: \"${token.toString()}\"`);\n        }\n        this.executePreResolutionInterceptor(token, \"Single\");\n        if (registration) {\n            const result = this.resolveRegistration(registration, context);\n            this.executePostResolutionInterceptor(token, result, \"Single\");\n            return result;\n        }\n        if (injection_token_1.isConstructorToken(token)) {\n            const result = this.construct(token, context);\n            this.executePostResolutionInterceptor(token, result, \"Single\");\n            return result;\n        }\n        throw new Error(\"Attempted to construct an undefined constructor. Could mean a circular dependency problem. Try using `delay` function.\");\n    }\n    executePreResolutionInterceptor(token, resolutionType) {\n        if (this.interceptors.preResolution.has(token)) {\n            const remainingInterceptors = [];\n            for (const interceptor of this.interceptors.preResolution.getAll(token)) {\n                if (interceptor.options.frequency != \"Once\") {\n                    remainingInterceptors.push(interceptor);\n                }\n                interceptor.callback(token, resolutionType);\n            }\n            this.interceptors.preResolution.setAll(token, remainingInterceptors);\n        }\n    }\n    executePostResolutionInterceptor(token, result, resolutionType) {\n        if (this.interceptors.postResolution.has(token)) {\n            const remainingInterceptors = [];\n            for (const interceptor of this.interceptors.postResolution.getAll(token)) {\n                if (interceptor.options.frequency != \"Once\") {\n                    remainingInterceptors.push(interceptor);\n                }\n                interceptor.callback(token, result, resolutionType);\n            }\n            this.interceptors.postResolution.setAll(token, remainingInterceptors);\n        }\n    }\n    resolveRegistration(registration, context) {\n        this.ensureNotDisposed();\n        if (registration.options.lifecycle === lifecycle_1.default.ResolutionScoped &&\n            context.scopedResolutions.has(registration)) {\n            return context.scopedResolutions.get(registration);\n        }\n        const isSingleton = registration.options.lifecycle === lifecycle_1.default.Singleton;\n        const isContainerScoped = registration.options.lifecycle === lifecycle_1.default.ContainerScoped;\n        const returnInstance = isSingleton || isContainerScoped;\n        let resolved;\n        if (providers_1.isValueProvider(registration.provider)) {\n            resolved = registration.provider.useValue;\n        }\n        else if (providers_1.isTokenProvider(registration.provider)) {\n            resolved = returnInstance\n                ? registration.instance ||\n                    (registration.instance = this.resolve(registration.provider.useToken, context))\n                : this.resolve(registration.provider.useToken, context);\n        }\n        else if (providers_1.isClassProvider(registration.provider)) {\n            resolved = returnInstance\n                ? registration.instance ||\n                    (registration.instance = this.construct(registration.provider.useClass, context))\n                : this.construct(registration.provider.useClass, context);\n        }\n        else if (providers_1.isFactoryProvider(registration.provider)) {\n            resolved = registration.provider.useFactory(this);\n        }\n        else {\n            resolved = this.construct(registration.provider, context);\n        }\n        if (registration.options.lifecycle === lifecycle_1.default.ResolutionScoped) {\n            context.scopedResolutions.set(registration, resolved);\n        }\n        return resolved;\n    }\n    resolveAll(token, context = new resolution_context_1.default(), isOptional = false) {\n        this.ensureNotDisposed();\n        const registrations = this.getAllRegistrations(token);\n        if (!registrations && providers_1.isNormalToken(token)) {\n            if (isOptional) {\n                return [];\n            }\n            throw new Error(`Attempted to resolve unregistered dependency token: \"${token.toString()}\"`);\n        }\n        this.executePreResolutionInterceptor(token, \"All\");\n        if (registrations) {\n            const result = registrations.map(item => this.resolveRegistration(item, context));\n            this.executePostResolutionInterceptor(token, result, \"All\");\n            return result;\n        }\n        const result = [this.construct(token, context)];\n        this.executePostResolutionInterceptor(token, result, \"All\");\n        return result;\n    }\n    isRegistered(token, recursive = false) {\n        this.ensureNotDisposed();\n        return (this._registry.has(token) ||\n            (recursive &&\n                (this.parent || false) &&\n                this.parent.isRegistered(token, true)));\n    }\n    reset() {\n        this.ensureNotDisposed();\n        this._registry.clear();\n        this.interceptors.preResolution.clear();\n        this.interceptors.postResolution.clear();\n    }\n    clearInstances() {\n        this.ensureNotDisposed();\n        for (const [token, registrations] of this._registry.entries()) {\n            this._registry.setAll(token, registrations\n                .filter(registration => !providers_1.isValueProvider(registration.provider))\n                .map(registration => {\n                registration.instance = undefined;\n                return registration;\n            }));\n        }\n    }\n    createChildContainer() {\n        this.ensureNotDisposed();\n        const childContainer = new InternalDependencyContainer(this);\n        for (const [token, registrations] of this._registry.entries()) {\n            if (registrations.some(({ options }) => options.lifecycle === lifecycle_1.default.ContainerScoped)) {\n                childContainer._registry.setAll(token, registrations.map(registration => {\n                    if (registration.options.lifecycle === lifecycle_1.default.ContainerScoped) {\n                        return {\n                            provider: registration.provider,\n                            options: registration.options\n                        };\n                    }\n                    return registration;\n                }));\n            }\n        }\n        return childContainer;\n    }\n    beforeResolution(token, callback, options = { frequency: \"Always\" }) {\n        this.interceptors.preResolution.set(token, {\n            callback: callback,\n            options: options\n        });\n    }\n    afterResolution(token, callback, options = { frequency: \"Always\" }) {\n        this.interceptors.postResolution.set(token, {\n            callback: callback,\n            options: options\n        });\n    }\n    dispose() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.disposed = true;\n            const promises = [];\n            this.disposables.forEach(disposable => {\n                const maybePromise = disposable.dispose();\n                if (maybePromise) {\n                    promises.push(maybePromise);\n                }\n            });\n            yield Promise.all(promises);\n        });\n    }\n    getRegistration(token) {\n        if (this.isRegistered(token)) {\n            return this._registry.get(token);\n        }\n        if (this.parent) {\n            return this.parent.getRegistration(token);\n        }\n        return null;\n    }\n    getAllRegistrations(token) {\n        if (this.isRegistered(token)) {\n            return this._registry.getAll(token);\n        }\n        if (this.parent) {\n            return this.parent.getAllRegistrations(token);\n        }\n        return null;\n    }\n    construct(ctor, context) {\n        if (ctor instanceof lazy_helpers_1.DelayedConstructor) {\n            return ctor.createProxy((target) => this.resolve(target, context));\n        }\n        const instance = (() => {\n            const paramInfo = exports.typeInfo.get(ctor);\n            if (!paramInfo || paramInfo.length === 0) {\n                if (ctor.length === 0) {\n                    return new ctor();\n                }\n                else {\n                    throw new Error(`TypeInfo not known for \"${ctor.name}\"`);\n                }\n            }\n            const params = paramInfo.map(this.resolveParams(context, ctor));\n            return new ctor(...params);\n        })();\n        if (disposable_1.isDisposable(instance)) {\n            this.disposables.add(instance);\n        }\n        return instance;\n    }\n    resolveParams(context, ctor) {\n        return (param, idx) => {\n            try {\n                if (injection_token_1.isTokenDescriptor(param)) {\n                    if (injection_token_1.isTransformDescriptor(param)) {\n                        return param.multiple\n                            ? this.resolve(param.transform).transform(this.resolveAll(param.token, new resolution_context_1.default(), param.isOptional), ...param.transformArgs)\n                            : this.resolve(param.transform).transform(this.resolve(param.token, context, param.isOptional), ...param.transformArgs);\n                    }\n                    else {\n                        return param.multiple\n                            ? this.resolveAll(param.token, new resolution_context_1.default(), param.isOptional)\n                            : this.resolve(param.token, context, param.isOptional);\n                    }\n                }\n                else if (injection_token_1.isTransformDescriptor(param)) {\n                    return this.resolve(param.transform, context).transform(this.resolve(param.token, context), ...param.transformArgs);\n                }\n                return this.resolve(param, context);\n            }\n            catch (e) {\n                throw new Error(error_helpers_1.formatErrorCtor(ctor, idx, e));\n            }\n        };\n    }\n    ensureNotDisposed() {\n        if (this.disposed) {\n            throw new Error(\"This container has been disposed, you cannot interact with a disposed container\");\n        }\n    }\n}\nexports.instance = new InternalDependencyContainer();\nexports.default = exports.instance;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reflection_helpers_1 = require(\"../reflection-helpers\");\nconst dependency_container_1 = require(\"../dependency-container\");\nconst injection_token_1 = require(\"../providers/injection-token\");\nconst error_helpers_1 = require(\"../error-helpers\");\nfunction autoInjectable() {\n    return function (target) {\n        const paramInfo = reflection_helpers_1.getParamInfo(target);\n        return class extends target {\n            constructor(...args) {\n                super(...args.concat(paramInfo.slice(args.length).map((type, index) => {\n                    try {\n                        if (injection_token_1.isTokenDescriptor(type)) {\n                            if (injection_token_1.isTransformDescriptor(type)) {\n                                return type.multiple\n                                    ? dependency_container_1.instance\n                                        .resolve(type.transform)\n                                        .transform(dependency_container_1.instance.resolveAll(type.token), ...type.transformArgs)\n                                    : dependency_container_1.instance\n                                        .resolve(type.transform)\n                                        .transform(dependency_container_1.instance.resolve(type.token), ...type.transformArgs);\n                            }\n                            else {\n                                return type.multiple\n                                    ? dependency_container_1.instance.resolveAll(type.token)\n                                    : dependency_container_1.instance.resolve(type.token);\n                            }\n                        }\n                        else if (injection_token_1.isTransformDescriptor(type)) {\n                            return dependency_container_1.instance\n                                .resolve(type.transform)\n                                .transform(dependency_container_1.instance.resolve(type.token), ...type.transformArgs);\n                        }\n                        return dependency_container_1.instance.resolve(type);\n                    }\n                    catch (e) {\n                        const argIndex = index + args.length;\n                        throw new Error(error_helpers_1.formatErrorCtor(target, argIndex, e));\n                    }\n                })));\n            }\n        };\n    };\n}\nexports.default = autoInjectable;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reflection_helpers_1 = require(\"../reflection-helpers\");\nfunction inject(token, options) {\n    const data = {\n        token,\n        multiple: false,\n        isOptional: options && options.isOptional\n    };\n    return reflection_helpers_1.defineInjectionTokenMetadata(data);\n}\nexports.default = inject;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reflection_helpers_1 = require(\"../reflection-helpers\");\nconst dependency_container_1 = require(\"../dependency-container\");\nconst dependency_container_2 = require(\"../dependency-container\");\nfunction injectable(options) {\n    return function (target) {\n        dependency_container_1.typeInfo.set(target, reflection_helpers_1.getParamInfo(target));\n        if (options && options.token) {\n            if (!Array.isArray(options.token)) {\n                dependency_container_2.instance.register(options.token, target);\n            }\n            else {\n                options.token.forEach(token => {\n                    dependency_container_2.instance.register(token, target);\n                });\n            }\n        }\n    };\n}\nexports.default = injectable;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nconst dependency_container_1 = require(\"../dependency-container\");\nfunction registry(registrations = []) {\n    return function (target) {\n        registrations.forEach((_a) => {\n            var { token, options } = _a, provider = tslib_1.__rest(_a, [\"token\", \"options\"]);\n            return dependency_container_1.instance.register(token, provider, options);\n        });\n        return target;\n    };\n}\nexports.default = registry;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst injectable_1 = require(\"./injectable\");\nconst dependency_container_1 = require(\"../dependency-container\");\nfunction singleton() {\n    return function (target) {\n        injectable_1.default()(target);\n        dependency_container_1.instance.registerSingleton(target);\n    };\n}\nexports.default = singleton;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reflection_helpers_1 = require(\"../reflection-helpers\");\nfunction injectAll(token, options) {\n    const data = {\n        token,\n        multiple: true,\n        isOptional: options && options.isOptional\n    };\n    return reflection_helpers_1.defineInjectionTokenMetadata(data);\n}\nexports.default = injectAll;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reflection_helpers_1 = require(\"../reflection-helpers\");\nfunction injectAllWithTransform(token, transformer, ...args) {\n    const data = {\n        token,\n        multiple: true,\n        transform: transformer,\n        transformArgs: args\n    };\n    return reflection_helpers_1.defineInjectionTokenMetadata(data);\n}\nexports.default = injectAllWithTransform;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst reflection_helpers_1 = require(\"../reflection-helpers\");\nfunction injectWithTransform(token, transformer, ...args) {\n    return reflection_helpers_1.defineInjectionTokenMetadata(token, {\n        transformToken: transformer,\n        args: args\n    });\n}\nexports.default = injectWithTransform;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst injectable_1 = require(\"./injectable\");\nconst dependency_container_1 = require(\"../dependency-container\");\nfunction scoped(lifecycle, token) {\n    return function (target) {\n        injectable_1.default()(target);\n        dependency_container_1.instance.register(token || target, target, {\n            lifecycle\n        });\n    };\n}\nexports.default = scoped;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar auto_injectable_1 = require(\"./auto-injectable\");\nObject.defineProperty(exports, \"autoInjectable\", { enumerable: true, get: function () { return auto_injectable_1.default; } });\nvar inject_1 = require(\"./inject\");\nObject.defineProperty(exports, \"inject\", { enumerable: true, get: function () { return inject_1.default; } });\nvar injectable_1 = require(\"./injectable\");\nObject.defineProperty(exports, \"injectable\", { enumerable: true, get: function () { return injectable_1.default; } });\nvar registry_1 = require(\"./registry\");\nObject.defineProperty(exports, \"registry\", { enumerable: true, get: function () { return registry_1.default; } });\nvar singleton_1 = require(\"./singleton\");\nObject.defineProperty(exports, \"singleton\", { enumerable: true, get: function () { return singleton_1.default; } });\nvar inject_all_1 = require(\"./inject-all\");\nObject.defineProperty(exports, \"injectAll\", { enumerable: true, get: function () { return inject_all_1.default; } });\nvar inject_all_with_transform_1 = require(\"./inject-all-with-transform\");\nObject.defineProperty(exports, \"injectAllWithTransform\", { enumerable: true, get: function () { return inject_all_with_transform_1.default; } });\nvar inject_with_transform_1 = require(\"./inject-with-transform\");\nObject.defineProperty(exports, \"injectWithTransform\", { enumerable: true, get: function () { return inject_with_transform_1.default; } });\nvar scoped_1 = require(\"./scoped\");\nObject.defineProperty(exports, \"scoped\", { enumerable: true, get: function () { return scoped_1.default; } });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction instanceCachingFactory(factoryFunc) {\n    let instance;\n    return (dependencyContainer) => {\n        if (instance == undefined) {\n            instance = factoryFunc(dependencyContainer);\n        }\n        return instance;\n    };\n}\nexports.default = instanceCachingFactory;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction instancePerContainerCachingFactory(factoryFunc) {\n    const cache = new WeakMap();\n    return (dependencyContainer) => {\n        let instance = cache.get(dependencyContainer);\n        if (instance == undefined) {\n            instance = factoryFunc(dependencyContainer);\n            cache.set(dependencyContainer, instance);\n        }\n        return instance;\n    };\n}\nexports.default = instancePerContainerCachingFactory;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction predicateAwareClassFactory(predicate, trueConstructor, falseConstructor, useCaching = true) {\n    let instance;\n    let previousPredicate;\n    return (dependencyContainer) => {\n        const currentPredicate = predicate(dependencyContainer);\n        if (!useCaching || previousPredicate !== currentPredicate) {\n            if ((previousPredicate = currentPredicate)) {\n                instance = dependencyContainer.resolve(trueConstructor);\n            }\n            else {\n                instance = dependencyContainer.resolve(falseConstructor);\n            }\n        }\n        return instance;\n    };\n}\nexports.default = predicateAwareClassFactory;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar instance_caching_factory_1 = require(\"./instance-caching-factory\");\nObject.defineProperty(exports, \"instanceCachingFactory\", { enumerable: true, get: function () { return instance_caching_factory_1.default; } });\nvar instance_per_container_caching_factory_1 = require(\"./instance-per-container-caching-factory\");\nObject.defineProperty(exports, \"instancePerContainerCachingFactory\", { enumerable: true, get: function () { return instance_per_container_caching_factory_1.default; } });\nvar predicate_aware_class_factory_1 = require(\"./predicate-aware-class-factory\");\nObject.defineProperty(exports, \"predicateAwareClassFactory\", { enumerable: true, get: function () { return predicate_aware_class_factory_1.default; } });\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nif (typeof Reflect === \"undefined\" || !Reflect.getMetadata) {\n    throw new Error(`tsyringe requires a reflect polyfill. Please add 'import \"reflect-metadata\"' to the top of your entry point.`);\n}\nvar types_1 = require(\"./types\");\nObject.defineProperty(exports, \"Lifecycle\", { enumerable: true, get: function () { return types_1.Lifecycle; } });\ntslib_1.__exportStar(require(\"./decorators\"), exports);\ntslib_1.__exportStar(require(\"./factories\"), exports);\ntslib_1.__exportStar(require(\"./providers\"), exports);\nvar lazy_helpers_1 = require(\"./lazy-helpers\");\nObject.defineProperty(exports, \"delay\", { enumerable: true, get: function () { return lazy_helpers_1.delay; } });\nvar dependency_container_1 = require(\"./dependency-container\");\nObject.defineProperty(exports, \"container\", { enumerable: true, get: function () { return dependency_container_1.instance; } });\n", "import { ValidationMetadataArgs } from './ValidationMetadataArgs';\nimport { ValidationArguments } from '../validation/ValidationArguments';\n\n/**\n * This metadata contains validation rules.\n */\nexport class ValidationMetadata {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Validation type.\n   */\n  type: string;\n\n  /**\n   * Validator name.\n   */\n  name?: string;\n\n  /**\n   * Target class to which this validation is applied.\n   */\n  target: Function | string;\n\n  /**\n   * Property of the object to be validated.\n   */\n  propertyName: string;\n\n  /**\n   * Constraint class that performs validation. Used only for custom validations.\n   */\n  constraintCls: Function;\n\n  /**\n   * Array of constraints of this validation.\n   */\n  constraints: any[];\n\n  /**\n   * Validation message to be shown in the case of error.\n   */\n  message: string | ((args: ValidationArguments) => string);\n\n  /**\n   * Validation groups used for this validation.\n   */\n  groups: string[] = [];\n\n  /**\n   * Indicates if validation must be performed always, no matter of validation groups used.\n   */\n  always?: boolean;\n\n  /**\n   * Specifies if validated value is an array and each of its item must be validated.\n   */\n  each: boolean = false;\n\n  /*\n   * A transient set of data passed through to the validation result for response mapping\n   */\n  context?: any = undefined;\n\n  /**\n   * Extra options specific to validation type.\n   */\n  validationTypeOptions: any;\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(args: ValidationMetadataArgs) {\n    this.type = args.type;\n    this.name = args.name;\n    this.target = args.target;\n    this.propertyName = args.propertyName;\n    this.constraints = args?.constraints;\n    this.constraintCls = args.constraintCls;\n    this.validationTypeOptions = args.validationTypeOptions;\n    if (args.validationOptions) {\n      this.message = args.validationOptions.message;\n      this.groups = args.validationOptions.groups;\n      this.always = args.validationOptions.always;\n      this.each = args.validationOptions.each;\n      this.context = args.validationOptions.context;\n    }\n  }\n}\n", "import { ValidationSchema } from './ValidationSchema';\nimport { ValidationMetadata } from '../metadata/ValidationMetadata';\nimport { ValidationMetadataArgs } from '../metadata/ValidationMetadataArgs';\nimport { ValidationOptions } from '../decorator/ValidationOptions';\n\n/**\n * Used to transform validation schemas to validation metadatas.\n */\nexport class ValidationSchemaToMetadataTransformer {\n  transform(schema: ValidationSchema): ValidationMetadata[] {\n    const metadatas: ValidationMetadata[] = [];\n    Object.keys(schema.properties).forEach(property => {\n      schema.properties[property].forEach(validation => {\n        const validationOptions: ValidationOptions = {\n          message: validation.message,\n          groups: validation.groups,\n          always: validation.always,\n          each: validation.each,\n        };\n        const args: ValidationMetadataArgs = {\n          type: validation.type,\n          name: validation.name,\n          target: schema.name,\n          propertyName: property,\n          constraints: validation.constraints,\n          validationTypeOptions: validation.options,\n          validationOptions: validationOptions,\n        };\n        metadatas.push(new ValidationMetadata(args));\n      });\n    });\n    return metadatas;\n  }\n}\n", "/**\n * Convert Map, Set to Array\n */\nexport function convertToArray<T>(val: Array<T> | Set<T> | Map<any, T>): Array<T> {\n  if (val instanceof Map) {\n    return Array.from(val.values());\n  }\n  return Array.isArray(val) ? val : Array.from(val);\n}\n", "/**\n * This function returns the global object across Node and browsers.\n *\n * Note: `globalThis` is the standardized approach however it has been added to\n * Node.js in version 12. We need to include this snippet until Node 12 EOL.\n */\nexport function getGlobal() {\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore: Cannot find name 'window'.\n  if (typeof window !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: Cannot find name 'window'.\n    return window;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore: Cannot find name 'self'.\n  if (typeof self !== 'undefined') {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore: Cannot find name 'self'.\n    return self;\n  }\n}\n", "// https://github.com/TylorS/typed-is-promise/blob/abf1514e1b6961adfc75765476b0debb96b2c3ae/src/index.ts\n\nexport function isPromise<T = any>(p: any): p is Promise<T> {\n  return p !== null && typeof p === 'object' && typeof p.then === 'function';\n}\n", "export * from './convert-to-array.util';\nexport * from './get-global.util';\nexport * from './is-promise.util';\n", "import { ValidationMetadata } from './ValidationMetadata';\nimport { ConstraintMetadata } from './ConstraintMetadata';\nimport { ValidationSchema } from '../validation-schema/ValidationSchema';\nimport { ValidationSchemaToMetadataTransformer } from '../validation-schema/ValidationSchemaToMetadataTransformer';\nimport { getGlobal } from '../utils';\n\n/**\n * Storage all metadatas.\n */\nexport class MetadataStorage {\n  // -------------------------------------------------------------------------\n  // Private properties\n  // -------------------------------------------------------------------------\n\n  private validationMetadatas: Map<any, ValidationMetadata[]> = new Map();\n  private constraintMetadatas: Map<any, ConstraintMetadata[]> = new Map();\n\n  get hasValidationMetaData(): boolean {\n    return !!this.validationMetadatas.size;\n  }\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Adds a new validation metadata.\n   */\n  addValidationSchema(schema: ValidationSchema): void {\n    const validationMetadatas = new ValidationSchemaToMetadataTransformer().transform(schema);\n    validationMetadatas.forEach(validationMetadata => this.addValidationMetadata(validationMetadata));\n  }\n\n  /**\n   * Adds a new validation metadata.\n   */\n  addValidationMetadata(metadata: ValidationMetadata): void {\n    const existingMetadata = this.validationMetadatas.get(metadata.target);\n\n    if (existingMetadata) {\n      existingMetadata.push(metadata);\n    } else {\n      this.validationMetadatas.set(metadata.target, [metadata]);\n    }\n  }\n\n  /**\n   * Adds a new constraint metadata.\n   */\n  addConstraintMetadata(metadata: ConstraintMetadata): void {\n    const existingMetadata = this.constraintMetadatas.get(metadata.target);\n\n    if (existingMetadata) {\n      existingMetadata.push(metadata);\n    } else {\n      this.constraintMetadatas.set(metadata.target, [metadata]);\n    }\n  }\n\n  /**\n   * Groups metadata by their property names.\n   */\n  groupByPropertyName(metadata: ValidationMetadata[]): { [propertyName: string]: ValidationMetadata[] } {\n    const grouped: { [propertyName: string]: ValidationMetadata[] } = {};\n    metadata.forEach(metadata => {\n      if (!grouped[metadata.propertyName]) grouped[metadata.propertyName] = [];\n      grouped[metadata.propertyName].push(metadata);\n    });\n    return grouped;\n  }\n\n  /**\n   * Gets all validation metadatas for the given object with the given groups.\n   */\n  getTargetValidationMetadatas(\n    targetConstructor: Function,\n    targetSchema: string,\n    always: boolean,\n    strictGroups: boolean,\n    groups?: string[]\n  ): ValidationMetadata[] {\n    const includeMetadataBecauseOfAlwaysOption = (metadata: ValidationMetadata): boolean => {\n      // `metadata.always` overrides global default.\n      if (typeof metadata.always !== 'undefined') return metadata.always;\n\n      // `metadata.groups` overrides global default.\n      if (metadata.groups && metadata.groups.length) return false;\n\n      // Use global default.\n      return always;\n    };\n\n    const excludeMetadataBecauseOfStrictGroupsOption = (metadata: ValidationMetadata): boolean => {\n      if (strictGroups) {\n        // Validation is not using groups.\n        if (!groups || !groups.length) {\n          // `metadata.groups` has at least one group.\n          if (metadata.groups && metadata.groups.length) return true;\n        }\n      }\n\n      return false;\n    };\n\n    // get directly related to a target metadatas\n    const filteredForOriginalMetadatasSearch = this.validationMetadatas.get(targetConstructor) || [];\n    const originalMetadatas = filteredForOriginalMetadatasSearch.filter(metadata => {\n      if (metadata.target !== targetConstructor && metadata.target !== targetSchema) return false;\n      if (includeMetadataBecauseOfAlwaysOption(metadata)) return true;\n      if (excludeMetadataBecauseOfStrictGroupsOption(metadata)) return false;\n      if (groups && groups.length > 0)\n        return metadata.groups && !!metadata.groups.find(group => groups.indexOf(group) !== -1);\n\n      return true;\n    });\n\n    // get metadatas for inherited classes\n    const filteredForInheritedMetadatasSearch = [];\n    for (const [key, value] of this.validationMetadatas.entries()) {\n      if (targetConstructor.prototype instanceof key) {\n        filteredForInheritedMetadatasSearch.push(...value);\n      }\n    }\n    const inheritedMetadatas = filteredForInheritedMetadatasSearch.filter(metadata => {\n      // if target is a string it's means we validate against a schema, and there is no inheritance support for schemas\n      if (typeof metadata.target === 'string') return false;\n      if (metadata.target === targetConstructor) return false;\n      if (metadata.target instanceof Function && !(targetConstructor.prototype instanceof metadata.target))\n        return false;\n      if (includeMetadataBecauseOfAlwaysOption(metadata)) return true;\n      if (excludeMetadataBecauseOfStrictGroupsOption(metadata)) return false;\n      if (groups && groups.length > 0)\n        return metadata.groups && !!metadata.groups.find(group => groups.indexOf(group) !== -1);\n\n      return true;\n    });\n\n    // filter out duplicate metadatas, prefer original metadatas instead of inherited metadatas\n    const uniqueInheritedMetadatas = inheritedMetadatas.filter(inheritedMetadata => {\n      return !originalMetadatas.find(originalMetadata => {\n        return (\n          originalMetadata.propertyName === inheritedMetadata.propertyName &&\n          originalMetadata.type === inheritedMetadata.type\n        );\n      });\n    });\n\n    return originalMetadatas.concat(uniqueInheritedMetadatas);\n  }\n\n  /**\n   * Gets all validator constraints for the given object.\n   */\n  getTargetValidatorConstraints(target: Function): ConstraintMetadata[] {\n    return this.constraintMetadatas.get(target) || [];\n  }\n}\n\n/**\n * Gets metadata storage.\n * Metadata storage follows the best practices and stores metadata in a global variable.\n */\nexport function getMetadataStorage(): MetadataStorage {\n  const global = getGlobal();\n\n  if (!global.classValidatorMetadataStorage) {\n    global.classValidatorMetadataStorage = new MetadataStorage();\n  }\n\n  return global.classValidatorMetadataStorage;\n}\n", "/**\n * Validation error description.\n */\nexport class ValidationError {\n  /**\n   * Object that was validated.\n   *\n   * OPTIONAL - configurable via the ValidatorOptions.validationError.target option\n   */\n  target?: object;\n\n  /**\n   * Object's property that haven't pass validation.\n   */\n  property: string;\n\n  /**\n   * Value that haven't pass a validation.\n   *\n   * OPTIONAL - configurable via the ValidatorOptions.validationError.value option\n   */\n  value?: any;\n\n  /**\n   * Constraints that failed validation with error messages.\n   */\n  constraints?: {\n    [type: string]: string;\n  };\n\n  /**\n   * Contains all nested validation errors of the property.\n   */\n  children?: ValidationError[];\n\n  /*\n   * A transient set of data passed through to the validation result for response mapping\n   */\n  contexts?: {\n    [type: string]: any;\n  };\n\n  /**\n   *\n   * @param shouldDecorate decorate the message with ANSI formatter escape codes for better readability\n   * @param hasParent true when the error is a child of an another one\n   * @param parentPath path as string to the parent of this property\n   * @param showConstraintMessages show constraint messages instead of constraint names\n   */\n  toString(\n    shouldDecorate: boolean = false,\n    hasParent: boolean = false,\n    parentPath: string = ``,\n    showConstraintMessages: boolean = false\n  ): string {\n    const boldStart = shouldDecorate ? `\\x1b[1m` : ``;\n    const boldEnd = shouldDecorate ? `\\x1b[22m` : ``;\n    const constraintsToString = () =>\n      (showConstraintMessages ? Object.values : Object.keys)(this.constraints ?? {}).join(`, `);\n    const propConstraintFailed = (propertyName: string): string =>\n      ` - property ${boldStart}${parentPath}${propertyName}${boldEnd} has failed the following constraints: ${boldStart}${constraintsToString()}${boldEnd} \\n`;\n\n    if (!hasParent) {\n      return (\n        `An instance of ${boldStart}${\n          this.target ? this.target.constructor.name : 'an object'\n        }${boldEnd} has failed the validation:\\n` +\n        (this.constraints ? propConstraintFailed(this.property) : ``) +\n        (this.children\n          ? this.children\n              .map(childError => childError.toString(shouldDecorate, true, this.property, showConstraintMessages))\n              .join(``)\n          : ``)\n      );\n    } else {\n      // we format numbers as array indexes for better readability.\n      const formattedProperty = Number.isInteger(+this.property)\n        ? `[${this.property}]`\n        : `${parentPath ? `.` : ``}${this.property}`;\n\n      if (this.constraints) {\n        return propConstraintFailed(formattedProperty);\n      } else {\n        return this.children\n          ? this.children\n              .map(childError =>\n                childError.toString(shouldDecorate, true, `${parentPath}${formattedProperty}`, showConstraintMessages)\n              )\n              .join(``)\n          : ``;\n      }\n    }\n  }\n}\n", "/**\n * Validation types.\n */\nexport class ValidationTypes {\n  /* system */\n  static CUSTOM_VALIDATION = 'customValidation'; // done\n  static NESTED_VALIDATION = 'nestedValidation'; // done\n  static PROMISE_VALIDATION = 'promiseValidation'; // done\n  static CONDITIONAL_VALIDATION = 'conditionalValidation'; // done\n  static WHITELIST = 'whitelistValidation'; // done\n  static IS_DEFINED = 'isDefined'; // done\n\n  /**\n   * Checks if validation type is valid.\n   */\n  static isValid(type: string): boolean {\n    return (\n      type !== 'isValid' &&\n      type !== 'getMessage' &&\n      Object.keys(this)\n        .map(key => (this as any)[key])\n        .indexOf(type) !== -1\n    );\n  }\n}\n", "import { ValidationArguments } from './ValidationArguments';\n\n/**\n * Convert the constraint to a string to be shown in an error\n */\nexport function constraintToString(constraint: unknown): string {\n  if (Array.isArray(constraint)) {\n    return constraint.join(', ');\n  }\n\n  if (typeof constraint === 'symbol') {\n    constraint = constraint.description;\n  }\n\n  return `${constraint}`;\n}\n\nexport class ValidationUtils {\n  static replaceMessageSpecialTokens(\n    message: string | ((args: ValidationArguments) => string),\n    validationArguments: ValidationArguments\n  ): string {\n    let messageString: string;\n    if (message instanceof Function) {\n      messageString = (message as (args: ValidationArguments) => string)(validationArguments);\n    } else if (typeof message === 'string') {\n      messageString = message;\n    }\n\n    if (messageString && Array.isArray(validationArguments.constraints)) {\n      validationArguments.constraints.forEach((constraint, index) => {\n        messageString = messageString.replace(\n          new RegExp(`\\\\$constraint${index + 1}`, 'g'),\n          constraintToString(constraint)\n        );\n      });\n    }\n\n    if (\n      messageString &&\n      validationArguments.value !== undefined &&\n      validationArguments.value !== null &&\n      ['string', 'boolean', 'number'].includes(typeof validationArguments.value)\n    )\n      messageString = messageString.replace(/\\$value/g, validationArguments.value);\n    if (messageString) messageString = messageString.replace(/\\$property/g, validationArguments.property);\n    if (messageString) messageString = messageString.replace(/\\$target/g, validationArguments.targetName);\n\n    return messageString;\n  }\n}\n", "import { Validator } from './Validator';\nimport { ValidationError } from './ValidationError';\nimport { ValidationMetadata } from '../metadata/ValidationMetadata';\nimport { ValidatorOptions } from './ValidatorOptions';\nimport { ValidationTypes } from './ValidationTypes';\nimport { ConstraintMetadata } from '../metadata/ConstraintMetadata';\nimport { ValidationArguments } from './ValidationArguments';\nimport { ValidationUtils } from './ValidationUtils';\nimport { isPromise, convertToArray } from '../utils';\nimport { getMetadataStorage } from '../metadata/MetadataStorage';\n\n/**\n * Executes validation over given object.\n */\nexport class ValidationExecutor {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  awaitingPromises: Promise<any>[] = [];\n  ignoreAsyncValidations: boolean = false;\n\n  // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n\n  private metadataStorage = getMetadataStorage();\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(private validator: Validator, private validatorOptions?: ValidatorOptions) {}\n\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  execute(object: object, targetSchema: string, validationErrors: ValidationError[]): void {\n    /**\n     * If there is no metadata registered it means possibly the dependencies are not flatterned and\n     * more than one instance is used.\n     *\n     * TODO: This needs proper handling, forcing to use the same container or some other proper solution.\n     */\n    if (!this.metadataStorage.hasValidationMetaData && this.validatorOptions?.enableDebugMessages === true) {\n      console.warn(\n        `No validation metadata found. No validation will be  performed. There are multiple possible reasons:\\n` +\n          `  - There may be multiple class-validator versions installed. You will need to flatten your dependencies to fix the issue.\\n` +\n          `  - This validation runs before any file with validation decorator was parsed by NodeJS.`\n      );\n    }\n\n    const groups = this.validatorOptions ? this.validatorOptions.groups : undefined;\n    const strictGroups = (this.validatorOptions && this.validatorOptions.strictGroups) || false;\n    const always = (this.validatorOptions && this.validatorOptions.always) || false;\n    /** Forbid unknown values are turned on by default and any other value than false will enable it. */\n    const forbidUnknownValues =\n      this.validatorOptions?.forbidUnknownValues === undefined || this.validatorOptions.forbidUnknownValues !== false;\n\n    const targetMetadatas = this.metadataStorage.getTargetValidationMetadatas(\n      object.constructor,\n      targetSchema,\n      always,\n      strictGroups,\n      groups\n    );\n    const groupedMetadatas = this.metadataStorage.groupByPropertyName(targetMetadatas);\n\n    if (forbidUnknownValues && !targetMetadatas.length) {\n      const validationError = new ValidationError();\n\n      if (\n        !this.validatorOptions ||\n        !this.validatorOptions.validationError ||\n        this.validatorOptions.validationError.target === undefined ||\n        this.validatorOptions.validationError.target === true\n      )\n        validationError.target = object;\n\n      validationError.value = undefined;\n      validationError.property = undefined;\n      validationError.children = [];\n      validationError.constraints = { unknownValue: 'an unknown value was passed to the validate function' };\n\n      validationErrors.push(validationError);\n\n      return;\n    }\n\n    if (this.validatorOptions && this.validatorOptions.whitelist)\n      this.whitelist(object, groupedMetadatas, validationErrors);\n\n    // General validation\n    Object.keys(groupedMetadatas).forEach(propertyName => {\n      const value = (object as any)[propertyName];\n      const definedMetadatas = groupedMetadatas[propertyName].filter(\n        metadata => metadata.type === ValidationTypes.IS_DEFINED\n      );\n      const metadatas = groupedMetadatas[propertyName].filter(\n        metadata => metadata.type !== ValidationTypes.IS_DEFINED && metadata.type !== ValidationTypes.WHITELIST\n      );\n\n      if (\n        value instanceof Promise &&\n        metadatas.find(metadata => metadata.type === ValidationTypes.PROMISE_VALIDATION)\n      ) {\n        this.awaitingPromises.push(\n          value.then(resolvedValue => {\n            this.performValidations(object, resolvedValue, propertyName, definedMetadatas, metadatas, validationErrors);\n          })\n        );\n      } else {\n        this.performValidations(object, value, propertyName, definedMetadatas, metadatas, validationErrors);\n      }\n    });\n  }\n\n  whitelist(\n    object: any,\n    groupedMetadatas: { [propertyName: string]: ValidationMetadata[] },\n    validationErrors: ValidationError[]\n  ): void {\n    const notAllowedProperties: string[] = [];\n\n    Object.keys(object).forEach(propertyName => {\n      // does this property have no metadata?\n      if (!groupedMetadatas[propertyName] || groupedMetadatas[propertyName].length === 0)\n        notAllowedProperties.push(propertyName);\n    });\n\n    if (notAllowedProperties.length > 0) {\n      if (this.validatorOptions && this.validatorOptions.forbidNonWhitelisted) {\n        // throw errors\n        notAllowedProperties.forEach(property => {\n          const validationError: ValidationError = this.generateValidationError(object, object[property], property);\n          validationError.constraints = { [ValidationTypes.WHITELIST]: `property ${property} should not exist` };\n          validationError.children = undefined;\n          validationErrors.push(validationError);\n        });\n      } else {\n        // strip non allowed properties\n        notAllowedProperties.forEach(property => delete object[property]);\n      }\n    }\n  }\n\n  stripEmptyErrors(errors: ValidationError[]): ValidationError[] {\n    return errors.filter(error => {\n      if (error.children) {\n        error.children = this.stripEmptyErrors(error.children);\n      }\n\n      if (Object.keys(error.constraints).length === 0) {\n        if (error.children.length === 0) {\n          return false;\n        } else {\n          delete error.constraints;\n        }\n      }\n\n      return true;\n    });\n  }\n\n  // -------------------------------------------------------------------------\n  // Private Methods\n  // -------------------------------------------------------------------------\n\n  private performValidations(\n    object: any,\n    value: any,\n    propertyName: string,\n    definedMetadatas: ValidationMetadata[],\n    metadatas: ValidationMetadata[],\n    validationErrors: ValidationError[]\n  ): void {\n    const customValidationMetadatas = metadatas.filter(metadata => metadata.type === ValidationTypes.CUSTOM_VALIDATION);\n    const nestedValidationMetadatas = metadatas.filter(metadata => metadata.type === ValidationTypes.NESTED_VALIDATION);\n    const conditionalValidationMetadatas = metadatas.filter(\n      metadata => metadata.type === ValidationTypes.CONDITIONAL_VALIDATION\n    );\n\n    const validationError = this.generateValidationError(object, value, propertyName);\n    validationErrors.push(validationError);\n\n    const canValidate = this.conditionalValidations(object, value, conditionalValidationMetadatas);\n    if (!canValidate) {\n      return;\n    }\n\n    // handle IS_DEFINED validation type the special way - it should work no matter skipUndefinedProperties/skipMissingProperties is set or not\n    this.customValidations(object, value, definedMetadatas, validationError);\n    this.mapContexts(object, value, definedMetadatas, validationError);\n\n    if (value === undefined && this.validatorOptions && this.validatorOptions.skipUndefinedProperties === true) {\n      return;\n    }\n\n    if (value === null && this.validatorOptions && this.validatorOptions.skipNullProperties === true) {\n      return;\n    }\n\n    if (\n      (value === null || value === undefined) &&\n      this.validatorOptions &&\n      this.validatorOptions.skipMissingProperties === true\n    ) {\n      return;\n    }\n\n    this.customValidations(object, value, customValidationMetadatas, validationError);\n    this.nestedValidations(value, nestedValidationMetadatas, validationError);\n\n    this.mapContexts(object, value, metadatas, validationError);\n    this.mapContexts(object, value, customValidationMetadatas, validationError);\n  }\n\n  private generateValidationError(object: object, value: any, propertyName: string): ValidationError {\n    const validationError = new ValidationError();\n\n    if (\n      !this.validatorOptions ||\n      !this.validatorOptions.validationError ||\n      this.validatorOptions.validationError.target === undefined ||\n      this.validatorOptions.validationError.target === true\n    )\n      validationError.target = object;\n\n    if (\n      !this.validatorOptions ||\n      !this.validatorOptions.validationError ||\n      this.validatorOptions.validationError.value === undefined ||\n      this.validatorOptions.validationError.value === true\n    )\n      validationError.value = value;\n\n    validationError.property = propertyName;\n    validationError.children = [];\n    validationError.constraints = {};\n\n    return validationError;\n  }\n\n  private conditionalValidations(object: object, value: any, metadatas: ValidationMetadata[]): ValidationMetadata[] {\n    return metadatas\n      .map(metadata => metadata.constraints[0](object, value))\n      .reduce((resultA, resultB) => resultA && resultB, true);\n  }\n\n  private customValidations(object: object, value: any, metadatas: ValidationMetadata[], error: ValidationError): void {\n    metadatas.forEach(metadata => {\n      this.metadataStorage.getTargetValidatorConstraints(metadata.constraintCls).forEach(customConstraintMetadata => {\n        if (customConstraintMetadata.async && this.ignoreAsyncValidations) return;\n        if (\n          this.validatorOptions &&\n          this.validatorOptions.stopAtFirstError &&\n          Object.keys(error.constraints || {}).length > 0\n        )\n          return;\n\n        const validationArguments: ValidationArguments = {\n          targetName: object.constructor ? (object.constructor as any).name : undefined,\n          property: metadata.propertyName,\n          object: object,\n          value: value,\n          constraints: metadata.constraints,\n        };\n\n        if (!metadata.each || !(Array.isArray(value) || value instanceof Set || value instanceof Map)) {\n          const validatedValue = customConstraintMetadata.instance.validate(value, validationArguments);\n          if (isPromise(validatedValue)) {\n            const promise = validatedValue.then(isValid => {\n              if (!isValid) {\n                const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\n                error.constraints[type] = message;\n                if (metadata.context) {\n                  if (!error.contexts) {\n                    error.contexts = {};\n                  }\n                  error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\n                }\n              }\n            });\n            this.awaitingPromises.push(promise);\n          } else {\n            if (!validatedValue) {\n              const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\n              error.constraints[type] = message;\n            }\n          }\n\n          return;\n        }\n\n        // convert set and map into array\n        const arrayValue = convertToArray(value);\n        // Validation needs to be applied to each array item\n        const validatedSubValues = arrayValue.map((subValue: any) =>\n          customConstraintMetadata.instance.validate(subValue, validationArguments)\n        );\n        const validationIsAsync = validatedSubValues.some((validatedSubValue: boolean | Promise<boolean>) =>\n          isPromise(validatedSubValue)\n        );\n\n        if (validationIsAsync) {\n          // Wrap plain values (if any) in promises, so that all are async\n          const asyncValidatedSubValues = validatedSubValues.map((validatedSubValue: boolean | Promise<boolean>) =>\n            isPromise(validatedSubValue) ? validatedSubValue : Promise.resolve(validatedSubValue)\n          );\n          const asyncValidationIsFinishedPromise = Promise.all(asyncValidatedSubValues).then(\n            (flatValidatedValues: boolean[]) => {\n              const validationResult = flatValidatedValues.every((isValid: boolean) => isValid);\n              if (!validationResult) {\n                const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\n                error.constraints[type] = message;\n                if (metadata.context) {\n                  if (!error.contexts) {\n                    error.contexts = {};\n                  }\n                  error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\n                }\n              }\n            }\n          );\n\n          this.awaitingPromises.push(asyncValidationIsFinishedPromise);\n\n          return;\n        }\n\n        const validationResult = validatedSubValues.every((isValid: boolean) => isValid);\n        if (!validationResult) {\n          const [type, message] = this.createValidationError(object, value, metadata, customConstraintMetadata);\n          error.constraints[type] = message;\n        }\n      });\n    });\n  }\n\n  private nestedValidations(value: any, metadatas: ValidationMetadata[], error: ValidationError): void {\n    if (value === void 0) {\n      return;\n    }\n\n    metadatas.forEach(metadata => {\n      if (metadata.type !== ValidationTypes.NESTED_VALIDATION && metadata.type !== ValidationTypes.PROMISE_VALIDATION) {\n        return;\n      } else if (\n        this.validatorOptions &&\n        this.validatorOptions.stopAtFirstError &&\n        Object.keys(error.constraints || {}).length > 0\n      ) {\n        return;\n      }\n\n      if (Array.isArray(value) || value instanceof Set || value instanceof Map) {\n        // Treats Set as an array - as index of Set value is value itself and it is common case to have Object as value\n        const arrayLikeValue = value instanceof Set ? Array.from(value) : value;\n        arrayLikeValue.forEach((subValue: any, index: any) => {\n          this.performValidations(value, subValue, index.toString(), [], metadatas, error.children);\n        });\n      } else if (value instanceof Object) {\n        const targetSchema = typeof metadata.target === 'string' ? metadata.target : metadata.target.name;\n        this.execute(value, targetSchema, error.children);\n      } else {\n        const [type, message] = this.createValidationError(metadata.target as object, value, metadata);\n        error.constraints[type] = message;\n      }\n    });\n  }\n\n  private mapContexts(object: object, value: any, metadatas: ValidationMetadata[], error: ValidationError): void {\n    return metadatas.forEach(metadata => {\n      if (metadata.context) {\n        let customConstraint;\n        if (metadata.type === ValidationTypes.CUSTOM_VALIDATION) {\n          const customConstraints = this.metadataStorage.getTargetValidatorConstraints(metadata.constraintCls);\n          customConstraint = customConstraints[0];\n        }\n\n        const type = this.getConstraintType(metadata, customConstraint);\n\n        if (error.constraints[type]) {\n          if (!error.contexts) {\n            error.contexts = {};\n          }\n\n          error.contexts[type] = Object.assign(error.contexts[type] || {}, metadata.context);\n        }\n      }\n    });\n  }\n\n  private createValidationError(\n    object: object,\n    value: any,\n    metadata: ValidationMetadata,\n    customValidatorMetadata?: ConstraintMetadata\n  ): [string, string] {\n    const targetName = object.constructor ? (object.constructor as any).name : undefined;\n    const type = this.getConstraintType(metadata, customValidatorMetadata);\n    const validationArguments: ValidationArguments = {\n      targetName: targetName,\n      property: metadata.propertyName,\n      object: object,\n      value: value,\n      constraints: metadata.constraints,\n    };\n\n    let message = metadata.message || '';\n    if (\n      !metadata.message &&\n      (!this.validatorOptions || (this.validatorOptions && !this.validatorOptions.dismissDefaultMessages))\n    ) {\n      if (customValidatorMetadata && customValidatorMetadata.instance.defaultMessage instanceof Function) {\n        message = customValidatorMetadata.instance.defaultMessage(validationArguments);\n      }\n    }\n\n    const messageString = ValidationUtils.replaceMessageSpecialTokens(message, validationArguments);\n    return [type, messageString];\n  }\n\n  private getConstraintType(metadata: ValidationMetadata, customValidatorMetadata?: ConstraintMetadata): string {\n    const type = customValidatorMetadata && customValidatorMetadata.name ? customValidatorMetadata.name : metadata.type;\n    return type;\n  }\n}\n", "import { ValidationError } from './ValidationError';\nimport { ValidatorOptions } from './ValidatorOptions';\nimport { ValidationExecutor } from './ValidationExecutor';\nimport { ValidationOptions } from '../decorator/ValidationOptions';\n\n/**\n * Validator performs validation of the given object based on its metadata.\n */\nexport class Validator {\n  // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class.\n   */\n  validate(object: object, options?: ValidatorOptions): Promise<ValidationError[]>;\n\n  /**\n   * Performs validation of the given object based on validation schema.\n   */\n  validate(schemaName: string, object: object, options?: ValidatorOptions): Promise<ValidationError[]>;\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validate(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<ValidationError[]> {\n    return this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n  }\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class and reject on error.\n   */\n  validateOrReject(object: object, options?: ValidatorOptions): Promise<void>;\n\n  /**\n   * Performs validation of the given object based on validation schema and reject on error.\n   */\n  validateOrReject(schemaName: string, object: object, options?: ValidatorOptions): Promise<void>;\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema and reject on error.\n   */\n  async validateOrReject(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<void> {\n    const errors = await this.coreValidate(objectOrSchemaName, objectOrValidationOptions, maybeValidatorOptions);\n    if (errors.length) return Promise.reject(errors);\n  }\n\n  /**\n   * Performs validation of the given object based on decorators used in given object class.\n   * NOTE: This method completely ignores all async validations.\n   */\n  validateSync(object: object, options?: ValidatorOptions): ValidationError[];\n\n  /**\n   * Performs validation of the given object based on validation schema.\n   */\n  validateSync(schemaName: string, object: object, options?: ValidatorOptions): ValidationError[];\n\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   */\n  validateSync(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): ValidationError[] {\n    const object = typeof objectOrSchemaName === 'string' ? (objectOrValidationOptions as object) : objectOrSchemaName;\n    const options =\n      typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : (objectOrValidationOptions as ValidationOptions);\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n\n    const executor = new ValidationExecutor(this, options);\n    executor.ignoreAsyncValidations = true;\n    const validationErrors: ValidationError[] = [];\n    executor.execute(object, schema, validationErrors);\n    return executor.stripEmptyErrors(validationErrors);\n  }\n\n  // -------------------------------------------------------------------------\n  // Private Properties\n  // -------------------------------------------------------------------------\n  /**\n   * Performs validation of the given object based on decorators or validation schema.\n   * Common method for `validateOrReject` and `validate` methods.\n   */\n  private coreValidate(\n    objectOrSchemaName: object | string,\n    objectOrValidationOptions: object | ValidationOptions,\n    maybeValidatorOptions?: ValidatorOptions\n  ): Promise<ValidationError[]> {\n    const object = typeof objectOrSchemaName === 'string' ? (objectOrValidationOptions as object) : objectOrSchemaName;\n    const options =\n      typeof objectOrSchemaName === 'string' ? maybeValidatorOptions : (objectOrValidationOptions as ValidationOptions);\n    const schema = typeof objectOrSchemaName === 'string' ? objectOrSchemaName : undefined;\n\n    const executor = new ValidationExecutor(this, options);\n    const validationErrors: ValidationError[] = [];\n    executor.execute(object, schema, validationErrors);\n\n    return Promise.all(executor.awaitingPromises).then(() => {\n      return executor.stripEmptyErrors(validationErrors);\n    });\n  }\n}\n", "/**\n * Container options.\n */\nexport interface UseContainerOptions {\n  /**\n   * If set to true, then default container will be used in the case if given container haven't returned anything.\n   */\n  fallback?: boolean;\n\n  /**\n   * If set to true, then default container will be used in the case if given container thrown an exception.\n   */\n  fallbackOnErrors?: boolean;\n}\n\n/**\n * Container to be used by this library for inversion control. If container was not implicitly set then by default\n * container simply creates a new instance of the given class.\n */\nconst defaultContainer: { get<T>(someClass: { new (...args: any[]): T } | Function): T } = new (class {\n  private instances: { type: Function; object: any }[] = [];\n  get<T>(someClass: { new (...args: any[]): T }): T {\n    let instance = this.instances.find(instance => instance.type === someClass);\n    if (!instance) {\n      instance = { type: someClass, object: new someClass() };\n      this.instances.push(instance);\n    }\n\n    return instance.object;\n  }\n})();\n\nlet userContainer: { get<T>(someClass: { new (...args: any[]): T } | Function): T };\nlet userContainerOptions: UseContainerOptions;\n\n/**\n * Sets container to be used by this library.\n */\nexport function useContainer(iocContainer: { get(someClass: any): any }, options?: UseContainerOptions): void {\n  userContainer = iocContainer;\n  userContainerOptions = options;\n}\n\n/**\n * Gets the IOC container used by this library.\n */\nexport function getFromContainer<T>(someClass: { new (...args: any[]): T } | Function): T {\n  if (userContainer) {\n    try {\n      const instance = userContainer.get(someClass);\n      if (instance) return instance;\n\n      if (!userContainerOptions || !userContainerOptions.fallback) return instance;\n    } catch (error) {\n      if (!userContainerOptions || !userContainerOptions.fallbackOnErrors) throw error;\n    }\n  }\n  return defaultContainer.get<T>(someClass);\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\n\n/**\n * If object has both allowed and not allowed properties a validation error will be thrown.\n */\nexport function Allow(validationOptions?: ValidationOptions): PropertyDecorator {\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.WHITELIST,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n", "import { ValidatorConstraintInterface } from '../validation/ValidatorConstraintInterface';\nimport { getFromContainer } from '../container';\n\n/**\n * This metadata interface contains information for custom validators.\n */\nexport class ConstraintMetadata {\n  // -------------------------------------------------------------------------\n  // Properties\n  // -------------------------------------------------------------------------\n\n  /**\n   * Target class which performs validation.\n   */\n  target: Function;\n\n  /**\n   * Custom validation's name, that will be used as validation error type.\n   */\n  name: string;\n\n  /**\n   * Indicates if this validation is asynchronous or not.\n   */\n  async: boolean;\n\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n  constructor(target: Function, name?: string, async: boolean = false) {\n    this.target = target;\n    this.name = name;\n    this.async = async;\n  }\n\n  // -------------------------------------------------------------------------\n  // Accessors\n  // -------------------------------------------------------------------------\n\n  /**\n   * Instance of the target custom validation class which performs validation.\n   */\n  get instance(): ValidatorConstraintInterface {\n    return getFromContainer<ValidatorConstraintInterface>(this.target);\n  }\n}\n", "import { ConstraintMetadata } from './metadata/ConstraintMetadata';\nimport { ValidatorConstraintInterface } from './validation/ValidatorConstraintInterface';\nimport { ValidationMetadata } from './metadata/ValidationMetadata';\nimport { ValidationMetadataArgs } from './metadata/ValidationMetadataArgs';\nimport { ValidationTypes } from './validation/ValidationTypes';\nimport { ValidationArguments } from './validation/ValidationArguments';\nimport { getFromContainer } from './container';\nimport { MetadataStorage, getMetadataStorage } from './metadata/MetadataStorage';\nimport { ValidationOptions } from './decorator/ValidationOptions';\n\nexport interface ValidationDecoratorOptions {\n  /**\n   * Target object to be validated.\n   */\n  target: Function;\n\n  /**\n   * Target object's property name to be validated.\n   */\n  propertyName: string;\n\n  /**\n   * Name of the validation that is being registered.\n   */\n  name?: string;\n\n  /**\n   * Indicates if this decorator will perform async validation.\n   */\n  async?: boolean;\n\n  /**\n   * Validator options.\n   */\n  options?: ValidationOptions;\n\n  /**\n   * Array of validation constraints.\n   */\n  constraints?: any[];\n\n  /**\n   * Validator that performs validation.\n   */\n  validator: ValidatorConstraintInterface | Function;\n}\n\n/**\n * Registers a custom validation decorator.\n */\nexport function registerDecorator(options: ValidationDecoratorOptions): void {\n  let constraintCls: Function;\n  if (options.validator instanceof Function) {\n    constraintCls = options.validator;\n    const constraintClasses = getFromContainer(MetadataStorage).getTargetValidatorConstraints(options.validator);\n    if (constraintClasses.length > 1) {\n      throw `More than one implementation of ValidatorConstraintInterface found for validator on: ${options.target.name}:${options.propertyName}`;\n    }\n  } else {\n    const validator = options.validator;\n    constraintCls = class CustomConstraint implements ValidatorConstraintInterface {\n      validate(value: any, validationArguments?: ValidationArguments): Promise<boolean> | boolean {\n        return validator.validate(value, validationArguments);\n      }\n\n      defaultMessage(validationArguments?: ValidationArguments): string {\n        if (validator.defaultMessage) {\n          return validator.defaultMessage(validationArguments);\n        }\n\n        return '';\n      }\n    };\n    getMetadataStorage().addConstraintMetadata(new ConstraintMetadata(constraintCls, options.name, options.async));\n  }\n\n  const validationMetadataArgs: ValidationMetadataArgs = {\n    type: options.name && ValidationTypes.isValid(options.name) ? options.name : ValidationTypes.CUSTOM_VALIDATION,\n    name: options.name,\n    target: options.target,\n    propertyName: options.propertyName,\n    validationOptions: options.options,\n    constraintCls: constraintCls,\n    constraints: options.constraints,\n  };\n  getMetadataStorage().addValidationMetadata(new ValidationMetadata(validationMetadataArgs));\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { registerDecorator } from '../../register-decorator';\nimport { ValidationArguments } from '../../validation/ValidationArguments';\nimport { ValidatorConstraintInterface } from '../../validation/ValidatorConstraintInterface';\n\nexport interface ValidateByOptions {\n  name: string;\n  constraints?: any[];\n  validator: ValidatorConstraintInterface | Function;\n  async?: boolean;\n}\n\nexport function buildMessage(\n  impl: (eachPrefix: string, args?: ValidationArguments) => string,\n  validationOptions?: ValidationOptions\n): (validationArguments?: ValidationArguments) => string {\n  return (validationArguments?: ValidationArguments): string => {\n    const eachPrefix = validationOptions && validationOptions.each ? 'each value in ' : '';\n    return impl(eachPrefix, validationArguments);\n  };\n}\n\nexport function ValidateBy(options: ValidateByOptions, validationOptions?: ValidationOptions): PropertyDecorator {\n  return function (object: object, propertyName: string): void {\n    registerDecorator({\n      name: options.name,\n      target: object.constructor,\n      propertyName: propertyName,\n      options: validationOptions,\n      constraints: options.constraints,\n      validator: options.validator,\n    });\n  };\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from './ValidateBy';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\n\n// isDefined is (yet) a special case\nexport const IS_DEFINED = ValidationTypes.IS_DEFINED;\n\n/**\n * Checks if value is defined (!== undefined, !== null).\n */\nexport function isDefined<T>(value: T | undefined | null): value is T {\n  return value !== undefined && value !== null;\n}\n\n/**\n * Checks if value is defined (!== undefined, !== null).\n */\nexport function IsDefined(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DEFINED,\n      validator: {\n        validate: (value): boolean => isDefined(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property should not be null or undefined',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\n\nexport const IS_OPTIONAL = 'isOptional';\n\n/**\n * Checks if value is missing and if so, ignores all validators.\n */\nexport function IsOptional(validationOptions?: ValidationOptions): PropertyDecorator {\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.CONDITIONAL_VALIDATION,\n      name: IS_OPTIONAL,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [\n        (object: any, value: any): boolean => {\n          return object[propertyName] !== null && object[propertyName] !== undefined;\n        },\n      ],\n      validationOptions: validationOptions,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ConstraintMetadata } from '../../metadata/ConstraintMetadata';\n\n/**\n * Registers custom validator class.\n */\nexport function ValidatorConstraint(options?: { name?: string; async?: boolean }) {\n  return function (target: Function): void {\n    const isAsync = options && options.async;\n    let name = options && options.name ? options.name : '';\n    if (!name) {\n      name = (target as any).name;\n      if (!name)\n        // generate name if it was not given\n        name = name.replace(/\\.?([A-Z]+)/g, (x, y) => '_' + (y as string).toLowerCase()).replace(/^_/, '');\n    }\n    const metadata = new ConstraintMetadata(target, name, isAsync);\n    getMetadataStorage().addConstraintMetadata(metadata);\n  };\n}\n\n/**\n * Performs validation based on the given custom validation class.\n * Validation class must be decorated with ValidatorConstraint decorator.\n */\nexport function Validate(constraintClass: Function, validationOptions?: ValidationOptions): PropertyDecorator;\nexport function Validate(\n  constraintClass: Function,\n  constraints?: any[],\n  validationOptions?: ValidationOptions\n): PropertyDecorator;\nexport function Validate(\n  constraintClass: Function,\n  constraintsOrValidationOptions?: any[] | ValidationOptions,\n  maybeValidationOptions?: ValidationOptions\n): PropertyDecorator {\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.CUSTOM_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraintCls: constraintClass,\n      constraints: Array.isArray(constraintsOrValidationOptions) ? constraintsOrValidationOptions : undefined,\n      validationOptions: !Array.isArray(constraintsOrValidationOptions)\n        ? constraintsOrValidationOptions\n        : maybeValidationOptions,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\n\n/**\n * Ignores the other validators on a property when the provided condition function returns false.\n */\nexport function ValidateIf(\n  condition: (object: any, value: any) => boolean,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.CONDITIONAL_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      constraints: [condition],\n      validationOptions: validationOptions,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\n\n/**\n * Objects / object arrays marked with this decorator will also be validated.\n */\nexport function ValidateNested(validationOptions?: ValidationOptions): PropertyDecorator {\n  const opts: ValidationOptions = { ...validationOptions };\n  const eachPrefix = opts.each ? 'each value in ' : '';\n  opts.message = opts.message || eachPrefix + 'nested property $property must be either object or array';\n\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.NESTED_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: opts,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { ValidationMetadataArgs } from '../../metadata/ValidationMetadataArgs';\nimport { ValidationTypes } from '../../validation/ValidationTypes';\nimport { ValidationMetadata } from '../../metadata/ValidationMetadata';\nimport { getMetadataStorage } from '../../metadata/MetadataStorage';\n\n/**\n * Resolve promise before validation\n */\nexport function ValidatePromise(validationOptions?: ValidationOptions): PropertyDecorator {\n  return function (object: object, propertyName: string): void {\n    const args: ValidationMetadataArgs = {\n      type: ValidationTypes.PROMISE_VALIDATION,\n      target: object.constructor,\n      propertyName: propertyName,\n      validationOptions: validationOptions,\n    };\n    getMetadataStorage().addValidationMetadata(new ValidationMetadata(args));\n  };\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = assertString;\nfunction assertString(input) {\n  if (input === undefined || input === null) throw new TypeError(\"Expected a string but received a \".concat(input));\n  if (input.constructor.name !== 'String') throw new TypeError(\"Expected a string but received a \".concat(input.constructor.name));\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = merge;\nfunction merge() {\n  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaults = arguments.length > 1 ? arguments[1] : undefined;\n  for (var key in defaults) {\n    if (typeof obj[key] === 'undefined') {\n      obj[key] = defaults[key];\n    }\n  }\n  return obj;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar includes = function includes(str, val) {\n  return str.indexOf(val) !== -1;\n};\nvar _default = exports.default = includes;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isLatLong;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nvar _includesString = _interopRequireDefault(require(\"./util/includesString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar lat = /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/;\nvar long = /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/;\nvar latDMS = /^(([1-8]?\\d)\\D+([1-5]?\\d|60)\\D+([1-5]?\\d|60)(\\.\\d+)?|90\\D+0\\D+0)\\D+[NSns]?$/i;\nvar longDMS = /^\\s*([1-7]?\\d{1,2}\\D+([1-5]?\\d|60)\\D+([1-5]?\\d|60)(\\.\\d+)?|180\\D+0\\D+0)\\D+[EWew]?$/i;\nvar defaultLatLongOptions = {\n  checkDMS: false\n};\nfunction isLatLong(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, defaultLatLongOptions);\n  if (!(0, _includesString.default)(str, ',')) return false;\n  var pair = str.split(',');\n  if (pair[0].startsWith('(') && !pair[1].endsWith(')') || pair[1].endsWith(')') && !pair[0].startsWith('(')) return false;\n  if (options.checkDMS) {\n    return latDMS.test(pair[0]) && longDMS.test(pair[1]);\n  }\n  return lat.test(pair[0]) && long.test(pair[1]);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from './ValidateBy';\nimport isLatLongValidator from 'validator/lib/isLatLong';\n\nexport const IS_LATLONG = 'isLatLong';\n\n/**\n * Checks if a value is string in format a \"latitude,longitude\".\n */\nexport function isLatLong(value: string): boolean {\n  return typeof value === 'string' && isLatLongValidator(value);\n}\n\n/**\n * Checks if a value is string in format a \"latitude,longitude\".\n */\nexport function IsLatLong(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LATLONG,\n      validator: {\n        validate: (value, args): boolean => isLatLong(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a latitude,longitude string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from './ValidateBy';\nimport { isLatLong } from './IsLatLong';\n\nexport const IS_LATITUDE = 'isLatitude';\n\n/**\n * Checks if a given value is a latitude.\n */\nexport function isLatitude(value: string): boolean {\n  return (typeof value === 'number' || typeof value === 'string') && isLatLong(`${value},0`);\n}\n\n/**\n * Checks if a given value is a latitude.\n */\nexport function IsLatitude(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LATITUDE,\n      validator: {\n        validate: (value, args): boolean => isLatitude(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a latitude string or number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from './ValidateBy';\nimport { isLatLong } from './IsLatLong';\n\nexport const IS_LONGITUDE = 'isLongitude';\n\n/**\n * Checks if a given value is a longitude.\n */\nexport function isLongitude(value: string): boolean {\n  return (typeof value === 'number' || typeof value === 'string') && isLatLong(`0,${value}`);\n}\n\n/**\n * Checks if a given value is a longitude.\n */\nexport function IsLongitude(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LONGITUDE,\n      validator: {\n        validate: (value, args): boolean => isLongitude(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a longitude string or number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const EQUALS = 'equals';\n\n/**\n * Checks if value matches (\"===\") the comparison.\n */\nexport function equals(value: unknown, comparison: unknown): boolean {\n  return value === comparison;\n}\n\n/**\n * Checks if value matches (\"===\") the comparison.\n */\nexport function Equals(comparison: any, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: EQUALS,\n      constraints: [comparison],\n      validator: {\n        validate: (value, args): boolean => equals(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be equal to $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const NOT_EQUALS = 'notEquals';\n\n/**\n * Checks if value does not match (\"!==\") the comparison.\n */\nexport function notEquals(value: unknown, comparison: unknown): boolean {\n  return value !== comparison;\n}\n\n/**\n * Checks if value does not match (\"!==\") the comparison.\n */\nexport function NotEquals(comparison: any, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: NOT_EQUALS,\n      constraints: [comparison],\n      validator: {\n        validate: (value, args): boolean => notEquals(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property should not be equal to $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_EMPTY = 'isEmpty';\n\n/**\n * Checks if given value is empty (=== '', === null, === undefined).\n */\nexport function isEmpty(value: unknown): boolean {\n  return value === '' || value === null || value === undefined;\n}\n\n/**\n * Checks if given value is empty (=== '', === null, === undefined).\n */\nexport function IsEmpty(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_EMPTY,\n      validator: {\n        validate: (value, args): boolean => isEmpty(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be empty', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_NOT_EMPTY = 'isNotEmpty';\n\n/**\n * Checks if given value is not empty (!== '', !== null, !== undefined).\n */\nexport function isNotEmpty(value: unknown): boolean {\n  return value !== '' && value !== null && value !== undefined;\n}\n\n/**\n * Checks if given value is not empty (!== '', !== null, !== undefined).\n */\nexport function IsNotEmpty(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NOT_EMPTY,\n      validator: {\n        validate: (value, args): boolean => isNotEmpty(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property should not be empty', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_IN = 'isIn';\n\n/**\n * Checks if given value is in a array of allowed values.\n */\nexport function isIn(value: unknown, possibleValues: readonly unknown[]): boolean {\n  return Array.isArray(possibleValues) && possibleValues.some(possibleValue => possibleValue === value);\n}\n\n/**\n * Checks if given value is in a array of allowed values.\n */\nexport function IsIn(values: readonly any[], validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_IN,\n      constraints: [values],\n      validator: {\n        validate: (value, args): boolean => isIn(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be one of the following values: $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_NOT_IN = 'isNotIn';\n\n/**\n * Checks if given value not in a array of allowed values.\n */\nexport function isNotIn(value: unknown, possibleValues: readonly unknown[]): boolean {\n  return !Array.isArray(possibleValues) || !possibleValues.some(possibleValue => possibleValue === value);\n}\n\n/**\n * Checks if given value not in a array of allowed values.\n */\nexport function IsNotIn(values: readonly any[], validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NOT_IN,\n      constraints: [values],\n      validator: {\n        validate: (value, args): boolean => isNotIn(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property should not be one of the following values: $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isNullOrUndefined;\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.farsiLocales = exports.englishLocales = exports.dotDecimal = exports.decimal = exports.commaDecimal = exports.bengaliLocales = exports.arabicLocales = exports.alphanumeric = exports.alpha = void 0;\nvar alpha = exports.alpha = {\n  'en-US': /^[A-Z]+$/i,\n  'az-AZ': /^[A-VXYZ\u00C7\u018F\u011E\u0130\u0131\u00D6\u015E\u00DC]+$/i,\n  'bg-BG': /^[\u0410-\u042F]+$/i,\n  'cs-CZ': /^[A-Z\u00C1\u010C\u010E\u00C9\u011A\u00CD\u0147\u00D3\u0158\u0160\u0164\u00DA\u016E\u00DD\u017D]+$/i,\n  'da-DK': /^[A-Z\u00C6\u00D8\u00C5]+$/i,\n  'de-DE': /^[A-Z\u00C4\u00D6\u00DC\u00DF]+$/i,\n  'el-GR': /^[\u0391-\u03CE]+$/i,\n  'es-ES': /^[A-Z\u00C1\u00C9\u00CD\u00D1\u00D3\u00DA\u00DC]+$/i,\n  'fa-IR': /^[\u0627\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u0641\u0642\u06A9\u06AF\u0644\u0645\u0646\u0648\u0647\u06CC]+$/i,\n  'fi-FI': /^[A-Z\u00C5\u00C4\u00D6]+$/i,\n  'fr-FR': /^[A-Z\u00C0\u00C2\u00C6\u00C7\u00C9\u00C8\u00CA\u00CB\u00CF\u00CE\u00D4\u0152\u00D9\u00DB\u00DC\u0178]+$/i,\n  'it-IT': /^[A-Z\u00C0\u00C9\u00C8\u00CC\u00CE\u00D3\u00D2\u00D9]+$/i,\n  'ja-JP': /^[\u3041-\u3093\u30A1-\u30F6\uFF66-\uFF9F\u4E00-\u9FA0\u30FC\u30FB\u3002\u3001]+$/i,\n  'nb-NO': /^[A-Z\u00C6\u00D8\u00C5]+$/i,\n  'nl-NL': /^[A-Z\u00C1\u00C9\u00CB\u00CF\u00D3\u00D6\u00DC\u00DA]+$/i,\n  'nn-NO': /^[A-Z\u00C6\u00D8\u00C5]+$/i,\n  'hu-HU': /^[A-Z\u00C1\u00C9\u00CD\u00D3\u00D6\u0150\u00DA\u00DC\u0170]+$/i,\n  'pl-PL': /^[A-Z\u0104\u0106\u0118\u015A\u0141\u0143\u00D3\u017B\u0179]+$/i,\n  'pt-PT': /^[A-Z\u00C3\u00C1\u00C0\u00C2\u00C4\u00C7\u00C9\u00CA\u00CB\u00CD\u00CF\u00D5\u00D3\u00D4\u00D6\u00DA\u00DC]+$/i,\n  'ru-RU': /^[\u0410-\u042F\u0401]+$/i,\n  'kk-KZ': /^[\u0410-\u042F\u0401\\u04D8\\u04B0\\u0406\\u04A2\\u0492\\u04AE\\u049A\\u04E8\\u04BA]+$/i,\n  'sl-SI': /^[A-Z\u010C\u0106\u0110\u0160\u017D]+$/i,\n  'sk-SK': /^[A-Z\u00C1\u010C\u010E\u00C9\u00CD\u0147\u00D3\u0160\u0164\u00DA\u00DD\u017D\u0139\u0154\u013D\u00C4\u00D4]+$/i,\n  'sr-RS@latin': /^[A-Z\u010C\u0106\u017D\u0160\u0110]+$/i,\n  'sr-RS': /^[\u0410-\u042F\u0402\u0408\u0409\u040A\u040B\u040F]+$/i,\n  'sv-SE': /^[A-Z\u00C5\u00C4\u00D6]+$/i,\n  'th-TH': /^[\u0E01-\u0E50\\s]+$/i,\n  'tr-TR': /^[A-Z\u00C7\u011E\u0130\u0131\u00D6\u015E\u00DC]+$/i,\n  'uk-UA': /^[\u0410-\u0429\u042C\u042E\u042F\u0404I\u0407\u0490\u0456]+$/i,\n  'vi-VN': /^[A-Z\u00C0\u00C1\u1EA0\u1EA2\u00C3\u00C2\u1EA6\u1EA4\u1EAC\u1EA8\u1EAA\u0102\u1EB0\u1EAE\u1EB6\u1EB2\u1EB4\u0110\u00C8\u00C9\u1EB8\u1EBA\u1EBC\u00CA\u1EC0\u1EBE\u1EC6\u1EC2\u1EC4\u00CC\u00CD\u1ECA\u1EC8\u0128\u00D2\u00D3\u1ECC\u1ECE\u00D5\u00D4\u1ED2\u1ED0\u1ED8\u1ED4\u1ED6\u01A0\u1EDC\u1EDA\u1EE2\u1EDE\u1EE0\u00D9\u00DA\u1EE4\u1EE6\u0168\u01AF\u1EEA\u1EE8\u1EF0\u1EEC\u1EEE\u1EF2\u00DD\u1EF4\u1EF6\u1EF8]+$/i,\n  'ko-KR': /^[\u3131-\u314E\u314F-\u3163\uAC00-\uD7A3]*$/,\n  'ku-IQ': /^[\u0626\u0627\u0628\u067E\u062A\u062C\u0686\u062D\u062E\u062F\u0631\u0695\u0632\u0698\u0633\u0634\u0639\u063A\u0641\u06A4\u0642\u06A9\u06AF\u0644\u06B5\u0645\u0646\u0648\u06C6\u06BE\u06D5\u06CC\u06CE\u064A\u0637\u0624\u062B\u0622\u0625\u0623\u0643\u0636\u0635\u0629\u0638\u0630]+$/i,\n  ar: /^[\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\u0670]+$/,\n  he: /^[\u05D0-\u05EA]+$/,\n  fa: /^['\u0622\u0627\u0621\u0623\u0624\u0626\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u0641\u0642\u06A9\u06AF\u0644\u0645\u0646\u0648\u0647\u0629\u06CC']+$/i,\n  bn: /^['\u0980\u0981\u0982\u0983\u0985\u0986\u0987\u0988\u0989\u098A\u098B\u098C\u098F\u0990\u0993\u0994\u0995\u0996\u0997\u0998\u0999\u099A\u099B\u099C\u099D\u099E\u099F\u09A0\u09A1\u09A2\u09A3\u09A4\u09A5\u09A6\u09A7\u09A8\u09AA\u09AB\u09AC\u09AD\u09AE\u09AF\u09B0\u09B2\u09B6\u09B7\u09B8\u09B9\u09BC\u09BD\u09BE\u09BF\u09C0\u09C1\u09C2\u09C3\u09C4\u09C7\u09C8\u09CB\u09CC\u09CD\u09CE\u09D7\u09DC\u09DD\u09DF\u09E0\u09E1\u09E2\u09E3\u09F0\u09F1\u09F2\u09F3\u09F4\u09F5\u09F6\u09F7\u09F8\u09F9\u09FA\u09FB']+$/,\n  eo: /^[ABC\u0108D-G\u011CH\u0124IJ\u0134K-PRS\u015CTU\u016CVZ]+$/i,\n  'hi-IN': /^[\\u0900-\\u0961]+[\\u0972-\\u097F]*$/i,\n  'si-LK': /^[\\u0D80-\\u0DFF]+$/\n};\nvar alphanumeric = exports.alphanumeric = {\n  'en-US': /^[0-9A-Z]+$/i,\n  'az-AZ': /^[0-9A-VXYZ\u00C7\u018F\u011E\u0130\u0131\u00D6\u015E\u00DC]+$/i,\n  'bg-BG': /^[0-9\u0410-\u042F]+$/i,\n  'cs-CZ': /^[0-9A-Z\u00C1\u010C\u010E\u00C9\u011A\u00CD\u0147\u00D3\u0158\u0160\u0164\u00DA\u016E\u00DD\u017D]+$/i,\n  'da-DK': /^[0-9A-Z\u00C6\u00D8\u00C5]+$/i,\n  'de-DE': /^[0-9A-Z\u00C4\u00D6\u00DC\u00DF]+$/i,\n  'el-GR': /^[0-9\u0391-\u03C9]+$/i,\n  'es-ES': /^[0-9A-Z\u00C1\u00C9\u00CD\u00D1\u00D3\u00DA\u00DC]+$/i,\n  'fi-FI': /^[0-9A-Z\u00C5\u00C4\u00D6]+$/i,\n  'fr-FR': /^[0-9A-Z\u00C0\u00C2\u00C6\u00C7\u00C9\u00C8\u00CA\u00CB\u00CF\u00CE\u00D4\u0152\u00D9\u00DB\u00DC\u0178]+$/i,\n  'it-IT': /^[0-9A-Z\u00C0\u00C9\u00C8\u00CC\u00CE\u00D3\u00D2\u00D9]+$/i,\n  'ja-JP': /^[0-9\uFF10-\uFF19\u3041-\u3093\u30A1-\u30F6\uFF66-\uFF9F\u4E00-\u9FA0\u30FC\u30FB\u3002\u3001]+$/i,\n  'hu-HU': /^[0-9A-Z\u00C1\u00C9\u00CD\u00D3\u00D6\u0150\u00DA\u00DC\u0170]+$/i,\n  'nb-NO': /^[0-9A-Z\u00C6\u00D8\u00C5]+$/i,\n  'nl-NL': /^[0-9A-Z\u00C1\u00C9\u00CB\u00CF\u00D3\u00D6\u00DC\u00DA]+$/i,\n  'nn-NO': /^[0-9A-Z\u00C6\u00D8\u00C5]+$/i,\n  'pl-PL': /^[0-9A-Z\u0104\u0106\u0118\u015A\u0141\u0143\u00D3\u017B\u0179]+$/i,\n  'pt-PT': /^[0-9A-Z\u00C3\u00C1\u00C0\u00C2\u00C4\u00C7\u00C9\u00CA\u00CB\u00CD\u00CF\u00D5\u00D3\u00D4\u00D6\u00DA\u00DC]+$/i,\n  'ru-RU': /^[0-9\u0410-\u042F\u0401]+$/i,\n  'kk-KZ': /^[0-9\u0410-\u042F\u0401\\u04D8\\u04B0\\u0406\\u04A2\\u0492\\u04AE\\u049A\\u04E8\\u04BA]+$/i,\n  'sl-SI': /^[0-9A-Z\u010C\u0106\u0110\u0160\u017D]+$/i,\n  'sk-SK': /^[0-9A-Z\u00C1\u010C\u010E\u00C9\u00CD\u0147\u00D3\u0160\u0164\u00DA\u00DD\u017D\u0139\u0154\u013D\u00C4\u00D4]+$/i,\n  'sr-RS@latin': /^[0-9A-Z\u010C\u0106\u017D\u0160\u0110]+$/i,\n  'sr-RS': /^[0-9\u0410-\u042F\u0402\u0408\u0409\u040A\u040B\u040F]+$/i,\n  'sv-SE': /^[0-9A-Z\u00C5\u00C4\u00D6]+$/i,\n  'th-TH': /^[\u0E01-\u0E59\\s]+$/i,\n  'tr-TR': /^[0-9A-Z\u00C7\u011E\u0130\u0131\u00D6\u015E\u00DC]+$/i,\n  'uk-UA': /^[0-9\u0410-\u0429\u042C\u042E\u042F\u0404I\u0407\u0490\u0456]+$/i,\n  'ko-KR': /^[0-9\u3131-\u314E\u314F-\u3163\uAC00-\uD7A3]*$/,\n  'ku-IQ': /^[\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u06690-9\u0626\u0627\u0628\u067E\u062A\u062C\u0686\u062D\u062E\u062F\u0631\u0695\u0632\u0698\u0633\u0634\u0639\u063A\u0641\u06A4\u0642\u06A9\u06AF\u0644\u06B5\u0645\u0646\u0648\u06C6\u06BE\u06D5\u06CC\u06CE\u064A\u0637\u0624\u062B\u0622\u0625\u0623\u0643\u0636\u0635\u0629\u0638\u0630]+$/i,\n  'vi-VN': /^[0-9A-Z\u00C0\u00C1\u1EA0\u1EA2\u00C3\u00C2\u1EA6\u1EA4\u1EAC\u1EA8\u1EAA\u0102\u1EB0\u1EAE\u1EB6\u1EB2\u1EB4\u0110\u00C8\u00C9\u1EB8\u1EBA\u1EBC\u00CA\u1EC0\u1EBE\u1EC6\u1EC2\u1EC4\u00CC\u00CD\u1ECA\u1EC8\u0128\u00D2\u00D3\u1ECC\u1ECE\u00D5\u00D4\u1ED2\u1ED0\u1ED8\u1ED4\u1ED6\u01A0\u1EDC\u1EDA\u1EE2\u1EDE\u1EE0\u00D9\u00DA\u1EE4\u1EE6\u0168\u01AF\u1EEA\u1EE8\u1EF0\u1EEC\u1EEE\u1EF2\u00DD\u1EF4\u1EF6\u1EF8]+$/i,\n  ar: /^[\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u06690-9\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u0641\u0642\u0643\u0644\u0645\u0646\u0647\u0648\u0649\u064A\u064B\u064C\u064D\u064E\u064F\u0650\u0651\u0652\u0670]+$/,\n  he: /^[0-9\u05D0-\u05EA]+$/,\n  fa: /^['0-9\u0622\u0627\u0621\u0623\u0624\u0626\u0628\u067E\u062A\u062B\u062C\u0686\u062D\u062E\u062F\u0630\u0631\u0632\u0698\u0633\u0634\u0635\u0636\u0637\u0638\u0639\u063A\u0641\u0642\u06A9\u06AF\u0644\u0645\u0646\u0648\u0647\u0629\u06CC\u06F1\u06F2\u06F3\u06F4\u06F5\u06F6\u06F7\u06F8\u06F9\u06F0']+$/i,\n  bn: /^['\u0980\u0981\u0982\u0983\u0985\u0986\u0987\u0988\u0989\u098A\u098B\u098C\u098F\u0990\u0993\u0994\u0995\u0996\u0997\u0998\u0999\u099A\u099B\u099C\u099D\u099E\u099F\u09A0\u09A1\u09A2\u09A3\u09A4\u09A5\u09A6\u09A7\u09A8\u09AA\u09AB\u09AC\u09AD\u09AE\u09AF\u09B0\u09B2\u09B6\u09B7\u09B8\u09B9\u09BC\u09BD\u09BE\u09BF\u09C0\u09C1\u09C2\u09C3\u09C4\u09C7\u09C8\u09CB\u09CC\u09CD\u09CE\u09D7\u09DC\u09DD\u09DF\u09E0\u09E1\u09E2\u09E3\u09E6\u09E7\u09E8\u09E9\u09EA\u09EB\u09EC\u09ED\u09EE\u09EF\u09F0\u09F1\u09F2\u09F3\u09F4\u09F5\u09F6\u09F7\u09F8\u09F9\u09FA\u09FB']+$/,\n  eo: /^[0-9ABC\u0108D-G\u011CH\u0124IJ\u0134K-PRS\u015CTU\u016CVZ]+$/i,\n  'hi-IN': /^[\\u0900-\\u0963]+[\\u0966-\\u097F]*$/i,\n  'si-LK': /^[0-9\\u0D80-\\u0DFF]+$/\n};\nvar decimal = exports.decimal = {\n  'en-US': '.',\n  ar: '\u066B'\n};\nvar englishLocales = exports.englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];\nfor (var locale, i = 0; i < englishLocales.length; i++) {\n  locale = \"en-\".concat(englishLocales[i]);\n  alpha[locale] = alpha['en-US'];\n  alphanumeric[locale] = alphanumeric['en-US'];\n  decimal[locale] = decimal['en-US'];\n}\n\n// Source: http://www.localeplanet.com/java/\nvar arabicLocales = exports.arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];\nfor (var _locale, _i = 0; _i < arabicLocales.length; _i++) {\n  _locale = \"ar-\".concat(arabicLocales[_i]);\n  alpha[_locale] = alpha.ar;\n  alphanumeric[_locale] = alphanumeric.ar;\n  decimal[_locale] = decimal.ar;\n}\nvar farsiLocales = exports.farsiLocales = ['IR', 'AF'];\nfor (var _locale2, _i2 = 0; _i2 < farsiLocales.length; _i2++) {\n  _locale2 = \"fa-\".concat(farsiLocales[_i2]);\n  alphanumeric[_locale2] = alphanumeric.fa;\n  decimal[_locale2] = decimal.ar;\n}\nvar bengaliLocales = exports.bengaliLocales = ['BD', 'IN'];\nfor (var _locale3, _i3 = 0; _i3 < bengaliLocales.length; _i3++) {\n  _locale3 = \"bn-\".concat(bengaliLocales[_i3]);\n  alpha[_locale3] = alpha.bn;\n  alphanumeric[_locale3] = alphanumeric.bn;\n  decimal[_locale3] = decimal['en-US'];\n}\n\n// Source: https://en.wikipedia.org/wiki/Decimal_mark\nvar dotDecimal = exports.dotDecimal = ['ar-EG', 'ar-LB', 'ar-LY'];\nvar commaDecimal = exports.commaDecimal = ['bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'en-ZM', 'eo', 'es-ES', 'fr-CA', 'fr-FR', 'id-ID', 'it-IT', 'ku-IQ', 'hi-IN', 'hu-HU', 'nb-NO', 'nn-NO', 'nl-NL', 'pl-PL', 'pt-PT', 'ru-RU', 'kk-KZ', 'si-LK', 'sl-SI', 'sr-RS@latin', 'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA', 'vi-VN'];\nfor (var _i4 = 0; _i4 < dotDecimal.length; _i4++) {\n  decimal[dotDecimal[_i4]] = decimal['en-US'];\n}\nfor (var _i5 = 0; _i5 < commaDecimal.length; _i5++) {\n  decimal[commaDecimal[_i5]] = ',';\n}\nalpha['fr-CA'] = alpha['fr-FR'];\nalphanumeric['fr-CA'] = alphanumeric['fr-FR'];\nalpha['pt-BR'] = alpha['pt-PT'];\nalphanumeric['pt-BR'] = alphanumeric['pt-PT'];\ndecimal['pt-BR'] = decimal['pt-PT'];\n\n// see #862\nalpha['pl-Pl'] = alpha['pl-PL'];\nalphanumeric['pl-Pl'] = alphanumeric['pl-PL'];\ndecimal['pl-Pl'] = decimal['pl-PL'];\n\n// see #1455\nalpha['fa-AF'] = alpha.fa;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFloat;\nexports.locales = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _nullUndefinedCheck = _interopRequireDefault(require(\"./util/nullUndefinedCheck\"));\nvar _alpha = require(\"./alpha\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isFloat(str, options) {\n  (0, _assertString.default)(str);\n  options = options || {};\n  var float = new RegExp(\"^(?:[-+])?(?:[0-9]+)?(?:\\\\\".concat(options.locale ? _alpha.decimal[options.locale] : '.', \"[0-9]*)?(?:[eE][\\\\+\\\\-]?(?:[0-9]+))?$\"));\n  if (str === '' || str === '.' || str === ',' || str === '-' || str === '+') {\n    return false;\n  }\n  var value = parseFloat(str.replace(',', '.'));\n  return float.test(str) && (!options.hasOwnProperty('min') || (0, _nullUndefinedCheck.default)(options.min) || value >= options.min) && (!options.hasOwnProperty('max') || (0, _nullUndefinedCheck.default)(options.max) || value <= options.max) && (!options.hasOwnProperty('lt') || (0, _nullUndefinedCheck.default)(options.lt) || value < options.lt) && (!options.hasOwnProperty('gt') || (0, _nullUndefinedCheck.default)(options.gt) || value > options.gt);\n}\nvar locales = exports.locales = Object.keys(_alpha.decimal);", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toFloat;\nvar _isFloat = _interopRequireDefault(require(\"./isFloat\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction toFloat(str) {\n  if (!(0, _isFloat.default)(str)) return NaN;\n  return parseFloat(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDivisibleBy;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _toFloat = _interopRequireDefault(require(\"./toFloat\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isDivisibleBy(str, num) {\n  (0, _assertString.default)(str);\n  return (0, _toFloat.default)(str) % parseInt(num, 10) === 0;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isDivisibleByValidator from 'validator/lib/isDivisibleBy';\n\nexport const IS_DIVISIBLE_BY = 'isDivisibleBy';\n\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function isDivisibleBy(value: unknown, num: number): boolean {\n  return typeof value === 'number' && typeof num === 'number' && isDivisibleByValidator(String(value), num);\n}\n\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function IsDivisibleBy(num: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DIVISIBLE_BY,\n      constraints: [num],\n      validator: {\n        validate: (value, args): boolean => isDivisibleBy(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be divisible by $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_POSITIVE = 'isPositive';\n\n/**\n * Checks if the value is a positive number greater than zero.\n */\nexport function isPositive(value: unknown): boolean {\n  return typeof value === 'number' && value > 0;\n}\n\n/**\n * Checks if the value is a positive number greater than zero.\n */\nexport function IsPositive(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_POSITIVE,\n      validator: {\n        validate: (value, args): boolean => isPositive(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a positive number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_NEGATIVE = 'isNegative';\n\n/**\n * Checks if the value is a negative number smaller than zero.\n */\nexport function isNegative(value: unknown): boolean {\n  return typeof value === 'number' && value < 0;\n}\n\n/**\n * Checks if the value is a negative number smaller than zero.\n */\nexport function IsNegative(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NEGATIVE,\n      validator: {\n        validate: (value, args): boolean => isNegative(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a negative number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const MAX = 'max';\n\n/**\n * Checks if the first number is less than or equal to the second.\n */\nexport function max(num: unknown, max: number): boolean {\n  return typeof num === 'number' && typeof max === 'number' && num <= max;\n}\n\n/**\n * Checks if the value is less than or equal to the allowed maximum value.\n */\nexport function Max(maxValue: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MAX,\n      constraints: [maxValue],\n      validator: {\n        validate: (value, args): boolean => max(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must not be greater than $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const MIN = 'min';\n\n/**\n * Checks if the first number is greater than or equal to the second.\n */\nexport function min(num: unknown, min: number): boolean {\n  return typeof num === 'number' && typeof min === 'number' && num >= min;\n}\n\n/**\n * Checks if the value is greater than or equal to the allowed minimum value.\n */\nexport function Min(minValue: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MIN,\n      constraints: [minValue],\n      validator: {\n        validate: (value, args): boolean => min(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must not be less than $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const MIN_DATE = 'minDate';\n\n/**\n * Checks if the value is a date that's after the specified date.\n */\nexport function minDate(date: unknown, minDate: Date | (() => Date)): boolean {\n  return date instanceof Date && date.getTime() >= (minDate instanceof Date ? minDate : minDate()).getTime();\n}\n\n/**\n * Checks if the value is a date that's after the specified date.\n */\nexport function MinDate(date: Date | (() => Date), validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MIN_DATE,\n      constraints: [date],\n      validator: {\n        validate: (value, args): boolean => minDate(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => 'minimal allowed date for ' + eachPrefix + '$property is $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const MAX_DATE = 'maxDate';\n\n/**\n * Checks if the value is a date that's before the specified date.\n */\nexport function maxDate(date: unknown, maxDate: Date | (() => Date)): boolean {\n  return date instanceof Date && date.getTime() <= (maxDate instanceof Date ? maxDate : maxDate()).getTime();\n}\n\n/**\n * Checks if the value is a date that's before the specified date.\n */\nexport function MaxDate(date: Date | (() => Date), validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MAX_DATE,\n      constraints: [date],\n      validator: {\n        validate: (value, args): boolean => maxDate(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => 'maximal allowed date for ' + eachPrefix + '$property is $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toString;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction toString(input) {\n  if (_typeof(input) === 'object' && input !== null) {\n    if (typeof input.toString === 'function') {\n      input = input.toString();\n    } else {\n      input = '[object Object]';\n    }\n  } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {\n    input = '';\n  }\n  return String(input);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = contains;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _toString = _interopRequireDefault(require(\"./util/toString\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar defaultContainsOptions = {\n  ignoreCase: false,\n  minOccurrences: 1\n};\nfunction contains(str, elem, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, defaultContainsOptions);\n  if (options.ignoreCase) {\n    return str.toLowerCase().split((0, _toString.default)(elem).toLowerCase()).length > options.minOccurrences;\n  }\n  return str.split((0, _toString.default)(elem)).length > options.minOccurrences;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport containsValidator from 'validator/lib/contains';\n\nexport const CONTAINS = 'contains';\n\n/**\n * Checks if the string contains the seed.\n * If given value is not a string, then it returns false.\n */\nexport function contains(value: unknown, seed: string): boolean {\n  return typeof value === 'string' && containsValidator(value, seed);\n}\n\n/**\n * Checks if the string contains the seed.\n * If given value is not a string, then it returns false.\n */\nexport function Contains(seed: string, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: CONTAINS,\n      constraints: [seed],\n      validator: {\n        validate: (value, args): boolean => contains(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain a $constraint1 string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport containsValidator from 'validator/lib/contains';\n\nexport const NOT_CONTAINS = 'notContains';\n\n/**\n * Checks if the string does not contain the seed.\n * If given value is not a string, then it returns false.\n */\nexport function notContains(value: unknown, seed: string): boolean {\n  return typeof value === 'string' && !containsValidator(value, seed);\n}\n\n/**\n * Checks if the string does not contain the seed.\n * If given value is not a string, then it returns false.\n */\nexport function NotContains(seed: string, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: NOT_CONTAINS,\n      constraints: [seed],\n      validator: {\n        validate: (value, args): boolean => notContains(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property should not contain a $constraint1 string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAlpha;\nexports.locales = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _alpha = require(\"./alpha\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isAlpha(_str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0, _assertString.default)(_str);\n  var str = _str;\n  var ignore = options.ignore;\n  if (ignore) {\n    if (ignore instanceof RegExp) {\n      str = str.replace(ignore, '');\n    } else if (typeof ignore === 'string') {\n      str = str.replace(new RegExp(\"[\".concat(ignore.replace(/[-[\\]{}()*+?.,\\\\^$|#\\\\s]/g, '\\\\$&'), \"]\"), 'g'), ''); // escape regex for ignore\n    } else {\n      throw new Error('ignore should be instance of a String or RegExp');\n    }\n  }\n  if (locale in _alpha.alpha) {\n    return _alpha.alpha[locale].test(str);\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nvar locales = exports.locales = Object.keys(_alpha.alpha);", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isAlphaValidator from 'validator/lib/isAlpha';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_ALPHA = 'isAlpha';\n\n/**\n * Checks if the string contains only letters (a-zA-Z).\n * If given value is not a string, then it returns false.\n */\nexport function isAlpha(value: unknown, locale?: ValidatorJS.AlphaLocale): boolean {\n  return typeof value === 'string' && isAlphaValidator(value, locale);\n}\n\n/**\n * Checks if the string contains only letters (a-zA-Z).\n * If given value is not a string, then it returns false.\n */\nexport function IsAlpha(locale?: ValidatorJS.AlphaLocale, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ALPHA,\n      constraints: [locale],\n      validator: {\n        validate: (value, args): boolean => isAlpha(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain only letters (a-zA-Z)',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAlphanumeric;\nexports.locales = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _alpha = require(\"./alpha\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isAlphanumeric(_str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  (0, _assertString.default)(_str);\n  var str = _str;\n  var ignore = options.ignore;\n  if (ignore) {\n    if (ignore instanceof RegExp) {\n      str = str.replace(ignore, '');\n    } else if (typeof ignore === 'string') {\n      str = str.replace(new RegExp(\"[\".concat(ignore.replace(/[-[\\]{}()*+?.,\\\\^$|#\\\\s]/g, '\\\\$&'), \"]\"), 'g'), ''); // escape regex for ignore\n    } else {\n      throw new Error('ignore should be instance of a String or RegExp');\n    }\n  }\n  if (locale in _alpha.alphanumeric) {\n    return _alpha.alphanumeric[locale].test(str);\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nvar locales = exports.locales = Object.keys(_alpha.alphanumeric);", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isAlphanumericValidator from 'validator/lib/isAlphanumeric';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_ALPHANUMERIC = 'isAlphanumeric';\n\n/**\n * Checks if the string contains only letters and numbers.\n * If given value is not a string, then it returns false.\n */\nexport function isAlphanumeric(value: unknown, locale?: ValidatorJS.AlphanumericLocale): boolean {\n  return typeof value === 'string' && isAlphanumericValidator(value, locale);\n}\n\n/**\n * Checks if the string contains only letters and numbers.\n * If given value is not a string, then it returns false.\n */\nexport function IsAlphanumeric(\n  locale?: ValidatorJS.AlphanumericLocale,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ALPHANUMERIC,\n      constraints: [locale],\n      validator: {\n        validate: (value, args): boolean => isAlphanumeric(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain only letters and numbers',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar includes = function includes(arr, val) {\n  return arr.some(function (arrVal) {\n    return val === arrVal;\n  });\n};\nvar _default = exports.default = includes;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDecimal;\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _includesArray = _interopRequireDefault(require(\"./util/includesArray\"));\nvar _alpha = require(\"./alpha\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction decimalRegExp(options) {\n  var regExp = new RegExp(\"^[-+]?([0-9]+)?(\\\\\".concat(_alpha.decimal[options.locale], \"[0-9]{\").concat(options.decimal_digits, \"})\").concat(options.force_decimal ? '' : '?', \"$\"));\n  return regExp;\n}\nvar default_decimal_options = {\n  force_decimal: false,\n  decimal_digits: '1,',\n  locale: 'en-US'\n};\nvar blacklist = ['', '-', '+'];\nfunction isDecimal(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_decimal_options);\n  if (options.locale in _alpha.decimal) {\n    return !(0, _includesArray.default)(blacklist, str.replace(/ /g, '')) && decimalRegExp(options).test(str);\n  }\n  throw new Error(\"Invalid locale '\".concat(options.locale, \"'\"));\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isDecimalValidator from 'validator/lib/isDecimal';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_DECIMAL = 'isDecimal';\n\n/**\n * Checks if the string is a valid decimal.\n * If given value is not a string, then it returns false.\n */\nexport function isDecimal(value: unknown, options?: ValidatorJS.IsDecimalOptions): boolean {\n  return typeof value === 'string' && isDecimalValidator(value, options);\n}\n\n/**\n * Checks if the string is a valid decimal.\n * If given value is not a string, then it returns false.\n */\nexport function IsDecimal(\n  options?: ValidatorJS.IsDecimalOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DECIMAL,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isDecimal(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property is not a valid decimal number.',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAscii;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/* eslint-disable no-control-regex */\nvar ascii = /^[\\x00-\\x7F]+$/;\n/* eslint-enable no-control-regex */\n\nfunction isAscii(str) {\n  (0, _assertString.default)(str);\n  return ascii.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isAsciiValidator from 'validator/lib/isAscii';\n\nexport const IS_ASCII = 'isAscii';\n\n/**\n * Checks if the string contains ASCII chars only.\n * If given value is not a string, then it returns false.\n */\nexport function isAscii(value: unknown): boolean {\n  return typeof value === 'string' && isAsciiValidator(value);\n}\n\n/**\n * Checks if the string contains ASCII chars only.\n * If given value is not a string, then it returns false.\n */\nexport function IsAscii(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ASCII,\n      validator: {\n        validate: (value, args): boolean => isAscii(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain only ASCII characters',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBase64;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar base64WithPadding = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/;\nvar base64WithoutPadding = /^[A-Za-z0-9+/]+$/;\nvar base64UrlWithPadding = /^(?:[A-Za-z0-9_-]{4})*(?:[A-Za-z0-9_-]{2}==|[A-Za-z0-9_-]{3}=|[A-Za-z0-9_-]{4})$/;\nvar base64UrlWithoutPadding = /^[A-Za-z0-9_-]+$/;\nfunction isBase64(str, options) {\n  var _options;\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, {\n    urlSafe: false,\n    padding: !((_options = options) !== null && _options !== void 0 && _options.urlSafe)\n  });\n  if (str === '') return true;\n  var regex;\n  if (options.urlSafe) {\n    regex = options.padding ? base64UrlWithPadding : base64UrlWithoutPadding;\n  } else {\n    regex = options.padding ? base64WithPadding : base64WithoutPadding;\n  }\n  return (!options.padding || str.length % 4 === 0) && regex.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBase64Validator from 'validator/lib/isBase64';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_BASE64 = 'isBase64';\n\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase64(value: unknown, options?: ValidatorJS.IsBase64Options): boolean {\n  return typeof value === 'string' && isBase64Validator(value, options);\n}\n\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function IsBase64(\n  options?: ValidatorJS.IsBase64Options,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BASE64,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isBase64(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be base64 encoded', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isByteLength;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/* eslint-disable prefer-rest-params */\nfunction isByteLength(str, options) {\n  (0, _assertString.default)(str);\n  var min;\n  var max;\n  if (_typeof(options) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  var len = encodeURI(str).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isByteLengthValidator from 'validator/lib/isByteLength';\n\nexport const IS_BYTE_LENGTH = 'isByteLength';\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function isByteLength(value: unknown, min: number, max?: number): boolean {\n  return typeof value === 'string' && isByteLengthValidator(value, { min, max });\n}\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function IsByteLength(min: number, max?: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BYTE_LENGTH,\n      constraints: [min, max],\n      validator: {\n        validate: (value, args): boolean => isByteLength(value, args?.constraints[0], args?.constraints[1]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\",\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isLuhnNumber;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isLuhnNumber(str) {\n  (0, _assertString.default)(str);\n  var sanitized = str.replace(/[- ]+/g, '');\n  var sum = 0;\n  var digit;\n  var tmpNum;\n  var shouldDouble;\n  for (var i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, i + 1);\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum % 10 + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!(sum % 10 === 0 ? sanitized : false);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCreditCard;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _isLuhnNumber = _interopRequireDefault(require(\"./isLuhnNumber\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar cards = {\n  amex: /^3[47][0-9]{13}$/,\n  dinersclub: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,\n  discover: /^6(?:011|5[0-9][0-9])[0-9]{12,15}$/,\n  jcb: /^(?:2131|1800|35\\d{3})\\d{11}$/,\n  mastercard: /^5[1-5][0-9]{2}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}$/,\n  // /^[25][1-7][0-9]{14}$/;\n  unionpay: /^(6[27][0-9]{14}|^(81[0-9]{14,17}))$/,\n  visa: /^(?:4[0-9]{12})(?:[0-9]{3,6})?$/\n};\nvar allCards = function () {\n  var tmpCardsArray = [];\n  for (var cardProvider in cards) {\n    // istanbul ignore else\n    if (cards.hasOwnProperty(cardProvider)) {\n      tmpCardsArray.push(cards[cardProvider]);\n    }\n  }\n  return tmpCardsArray;\n}();\nfunction isCreditCard(card) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(card);\n  var provider = options.provider;\n  var sanitized = card.replace(/[- ]+/g, '');\n  if (provider && provider.toLowerCase() in cards) {\n    // specific provider in the list\n    if (!cards[provider.toLowerCase()].test(sanitized)) {\n      return false;\n    }\n  } else if (provider && !(provider.toLowerCase() in cards)) {\n    /* specific provider not in the list */\n    throw new Error(\"\".concat(provider, \" is not a valid credit card provider.\"));\n  } else if (!allCards.some(function (cardProvider) {\n    return cardProvider.test(sanitized);\n  })) {\n    // no specific provider\n    return false;\n  }\n  return (0, _isLuhnNumber.default)(card);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isCreditCardValidator from 'validator/lib/isCreditCard';\n\nexport const IS_CREDIT_CARD = 'isCreditCard';\n\n/**\n * Checks if the string is a credit card.\n * If given value is not a string, then it returns false.\n */\nexport function isCreditCard(value: unknown): boolean {\n  return typeof value === 'string' && isCreditCardValidator(value);\n}\n\n/**\n * Checks if the string is a credit card.\n * If given value is not a string, then it returns false.\n */\nexport function IsCreditCard(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_CREDIT_CARD,\n      validator: {\n        validate: (value, args): boolean => isCreditCard(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a credit card', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction currencyRegex(options) {\n  var decimal_digits = \"\\\\d{\".concat(options.digits_after_decimal[0], \"}\");\n  options.digits_after_decimal.forEach(function (digit, index) {\n    if (index !== 0) decimal_digits = \"\".concat(decimal_digits, \"|\\\\d{\").concat(digit, \"}\");\n  });\n  var symbol = \"(\".concat(options.symbol.replace(/\\W/, function (m) {\n      return \"\\\\\".concat(m);\n    }), \")\").concat(options.require_symbol ? '' : '?'),\n    negative = '-?',\n    whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n    whole_dollar_amount_with_sep = \"[1-9]\\\\d{0,2}(\\\\\".concat(options.thousands_separator, \"\\\\d{3})*\"),\n    valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n    whole_dollar_amount = \"(\".concat(valid_whole_dollar_amounts.join('|'), \")?\"),\n    decimal_amount = \"(\\\\\".concat(options.decimal_separator, \"(\").concat(decimal_digits, \"))\").concat(options.require_decimal ? '' : '?');\n  var pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');\n\n  // default is negative sign before symbol, but there are two other options (besides parens)\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n  if (options.allow_negative_sign_placeholder) {\n    pattern = \"( (?!\\\\-))?\".concat(pattern);\n  } else if (options.allow_space_after_symbol) {\n    pattern = \" ?\".concat(pattern);\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = \"(\\\\(\".concat(pattern, \"\\\\)|\").concat(pattern, \")\");\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n  return new RegExp(\"^(?!-? )(?=.*\\\\d)\".concat(pattern, \"$\"));\n}\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false\n};\nfunction isCurrency(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isCurrencyValidator from 'validator/lib/isCurrency';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_CURRENCY = 'isCurrency';\n\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function isCurrency(value: unknown, options?: ValidatorJS.IsCurrencyOptions): boolean {\n  return typeof value === 'string' && isCurrencyValidator(value, options);\n}\n\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function IsCurrency(\n  options?: ValidatorJS.IsCurrencyOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_CURRENCY,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isCurrency(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a currency', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = checkHost;\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\nfunction checkHost(host, matches) {\n  for (var i = 0; i < matches.length; i++) {\n    var match = matches[i];\n    if (host === match || isRegExp(match) && match.test(host)) {\n      return true;\n    }\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFQDN;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_numeric_tld: false,\n  allow_wildcard: false,\n  ignore_max_length: false\n};\nfunction isFQDN(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_fqdn_options);\n\n  /* Remove the optional trailing dot before checking validity */\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n\n  /* Remove the optional wildcard before checking validity */\n  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {\n    str = str.substring(2);\n  }\n  var parts = str.split('.');\n  var tld = parts[parts.length - 1];\n  if (options.require_tld) {\n    // disallow fqdns without tld\n    if (parts.length < 2) {\n      return false;\n    }\n    if (!options.allow_numeric_tld && !/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    }\n\n    // disallow spaces\n    if (/\\s/.test(tld)) {\n      return false;\n    }\n  }\n\n  // reject numeric TLDs\n  if (!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\n    return false;\n  }\n  return parts.every(function (part) {\n    if (part.length > 63 && !options.ignore_max_length) {\n      return false;\n    }\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    }\n\n    // disallow full-width chars\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    }\n\n    // disallow parts starting or ending with hyphen\n    if (/^-|-$/.test(part)) {\n      return false;\n    }\n    if (!options.allow_underscores && /_/.test(part)) {\n      return false;\n    }\n    return true;\n  });\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\nvar IPv4SegmentFormat = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])';\nvar IPv4AddressFormat = \"(\".concat(IPv4SegmentFormat, \"[.]){3}\").concat(IPv4SegmentFormat);\nvar IPv4AddressRegExp = new RegExp(\"^\".concat(IPv4AddressFormat, \"$\"));\nvar IPv6SegmentFormat = '(?:[0-9a-fA-F]{1,4})';\nvar IPv6AddressRegExp = new RegExp('^(' + \"(?:\".concat(IPv6SegmentFormat, \":){7}(?:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){6}(?:\").concat(IPv4AddressFormat, \"|:\").concat(IPv6SegmentFormat, \"|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){5}(?::\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,2}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){4}(?:(:\").concat(IPv6SegmentFormat, \"){0,1}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,3}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){3}(?:(:\").concat(IPv6SegmentFormat, \"){0,2}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,4}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){2}(?:(:\").concat(IPv6SegmentFormat, \"){0,3}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,5}|:)|\") + \"(?:\".concat(IPv6SegmentFormat, \":){1}(?:(:\").concat(IPv6SegmentFormat, \"){0,4}:\").concat(IPv4AddressFormat, \"|(:\").concat(IPv6SegmentFormat, \"){1,6}|:)|\") + \"(?::((?::\".concat(IPv6SegmentFormat, \"){0,5}:\").concat(IPv4AddressFormat, \"|(?::\").concat(IPv6SegmentFormat, \"){1,7}|:))\") + ')(%[0-9a-zA-Z.]{1,})?$');\nfunction isIP(ipAddress) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(ipAddress);\n\n  // accessing 'arguments' for backwards compatibility: isIP(ipAddress [, version])\n  // eslint-disable-next-line prefer-rest-params\n  var version = (_typeof(options) === 'object' ? options.version : arguments[1]) || '';\n  if (!version) {\n    return isIP(ipAddress, {\n      version: 4\n    }) || isIP(ipAddress, {\n      version: 6\n    });\n  }\n  if (version.toString() === '4') {\n    return IPv4AddressRegExp.test(ipAddress);\n  }\n  if (version.toString() === '6') {\n    return IPv6AddressRegExp.test(ipAddress);\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmail;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _checkHost = _interopRequireDefault(require(\"./util/checkHost\"));\nvar _isByteLength = _interopRequireDefault(require(\"./isByteLength\"));\nvar _isFQDN = _interopRequireDefault(require(\"./isFQDN\"));\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar default_email_options = {\n  allow_display_name: false,\n  allow_underscores: false,\n  require_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n  blacklisted_chars: '',\n  ignore_max_length: false,\n  host_blacklist: [],\n  host_whitelist: []\n};\n\n/* eslint-disable max-len */\n/* eslint-disable no-control-regex */\nvar splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)</i;\nvar emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nvar gmailUserPart = /^[a-z\\d]+$/;\nvar quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nvar emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A1-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nvar quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nvar defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\nfunction validateDisplayName(display_name) {\n  var display_name_without_quotes = display_name.replace(/^\"(.+)\"$/, '$1');\n  // display name with only spaces is not valid\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  }\n\n  // check whether display name contains illegal character\n  var contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (display_name_without_quotes === display_name) {\n      return false;\n    }\n\n    // the quotes in display name must start with character symbol \\\n    var all_start_with_back_slash = display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction isEmail(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_email_options);\n  if (options.require_display_name || options.allow_display_name) {\n    var display_email = str.match(splitNameAddress);\n    if (display_email) {\n      var display_name = display_email[1];\n\n      // Remove display name and angle brackets to get email address\n      // Can be done in the regex but will introduce a ReDOS (See  #1597 for more info)\n      str = str.replace(display_name, '').replace(/(^<|>$)/g, '');\n\n      // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.slice(0, -1);\n      }\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n  var parts = str.split('@');\n  var domain = parts.pop();\n  var lower_domain = domain.toLowerCase();\n  if (options.host_blacklist.length > 0 && (0, _checkHost.default)(lower_domain, options.host_blacklist)) {\n    return false;\n  }\n  if (options.host_whitelist.length > 0 && !(0, _checkHost.default)(lower_domain, options.host_whitelist)) {\n    return false;\n  }\n  var user = parts.join('@');\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n    Previously we removed dots for gmail addresses before validating.\n    This was removed because it allows `multiple..dots@gmail.com`\n    to be reported as valid, but it is not.\n    Gmail only normalizes single dots, removing them from here is pointless,\n    should be done in normalizeEmail\n    */\n    user = user.toLowerCase();\n\n    // Removing sub-address from username before gmail validation\n    var username = user.split('+')[0];\n\n    // Dots are not included in gmail length restriction\n    if (!(0, _isByteLength.default)(username.replace(/\\./g, ''), {\n      min: 6,\n      max: 30\n    })) {\n      return false;\n    }\n    var _user_parts = username.split('.');\n    for (var i = 0; i < _user_parts.length; i++) {\n      if (!gmailUserPart.test(_user_parts[i])) {\n        return false;\n      }\n    }\n  }\n  if (options.ignore_max_length === false && (!(0, _isByteLength.default)(user, {\n    max: 64\n  }) || !(0, _isByteLength.default)(domain, {\n    max: 254\n  }))) {\n    return false;\n  }\n  if (!(0, _isFQDN.default)(domain, {\n    require_tld: options.require_tld,\n    ignore_max_length: options.ignore_max_length,\n    allow_underscores: options.allow_underscores\n  })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n    if (!(0, _isIP.default)(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n      var noBracketdomain = domain.slice(1, -1);\n      if (noBracketdomain.length === 0 || !(0, _isIP.default)(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n  if (options.blacklisted_chars) {\n    if (user.search(new RegExp(\"[\".concat(options.blacklisted_chars, \"]+\"), 'g')) !== -1) return false;\n  }\n  if (user[0] === '\"' && user[user.length - 1] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\n  }\n  var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\n  var user_parts = user.split('.');\n  for (var _i = 0; _i < user_parts.length; _i++) {\n    if (!pattern.test(user_parts[_i])) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isEmailValidator from 'validator/lib/isEmail';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_EMAIL = 'isEmail';\n\n/**\n * Checks if the string is an email.\n * If given value is not a string, then it returns false.\n */\nexport function isEmail(value: unknown, options?: ValidatorJS.IsEmailOptions): boolean {\n  return typeof value === 'string' && isEmailValidator(value, options);\n}\n\n/**\n * Checks if the string is an email.\n * If given value is not a string, then it returns false.\n */\nexport function IsEmail(\n  options?: ValidatorJS.IsEmailOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_EMAIL,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isEmail(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an email', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isFqdnValidator from 'validator/lib/isFQDN';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_FQDN = 'isFqdn';\n\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n * If given value is not a string, then it returns false.\n */\nexport function isFQDN(value: unknown, options?: ValidatorJS.IsFQDNOptions): boolean {\n  return typeof value === 'string' && isFqdnValidator(value, options);\n}\n\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n * If given value is not a string, then it returns false.\n */\nexport function IsFQDN(options?: ValidatorJS.IsFQDNOptions, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_FQDN,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isFQDN(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid domain name',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isFullWidth;\nexports.fullWidth = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar fullWidth = exports.fullWidth = /[^\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]/;\nfunction isFullWidth(str) {\n  (0, _assertString.default)(str);\n  return fullWidth.test(str);\n}", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isFullWidthValidator from 'validator/lib/isFullWidth';\n\nexport const IS_FULL_WIDTH = 'isFullWidth';\n\n/**\n * Checks if the string contains any full-width chars.\n * If given value is not a string, then it returns false.\n */\nexport function isFullWidth(value: unknown): boolean {\n  return typeof value === 'string' && isFullWidthValidator(value);\n}\n\n/**\n * Checks if the string contains any full-width chars.\n * If given value is not a string, then it returns false.\n */\nexport function IsFullWidth(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_FULL_WIDTH,\n      validator: {\n        validate: (value, args): boolean => isFullWidth(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain a full-width characters',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHalfWidth;\nexports.halfWidth = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar halfWidth = exports.halfWidth = /[\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]/;\nfunction isHalfWidth(str) {\n  (0, _assertString.default)(str);\n  return halfWidth.test(str);\n}", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isHalfWidthValidator from 'validator/lib/isHalfWidth';\n\nexport const IS_HALF_WIDTH = 'isHalfWidth';\n\n/**\n * Checks if the string contains any half-width chars.\n * If given value is not a string, then it returns false.\n */\nexport function isHalfWidth(value: unknown): boolean {\n  return typeof value === 'string' && isHalfWidthValidator(value);\n}\n\n/**\n * Checks if the string contains any half-width chars.\n * If given value is not a string, then it returns false.\n */\nexport function IsHalfWidth(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_HALF_WIDTH,\n      validator: {\n        validate: (value, args): boolean => isHalfWidth(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain a half-width characters',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isVariableWidth;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _isFullWidth = require(\"./isFullWidth\");\nvar _isHalfWidth = require(\"./isHalfWidth\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isVariableWidth(str) {\n  (0, _assertString.default)(str);\n  return _isFullWidth.fullWidth.test(str) && _isHalfWidth.halfWidth.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isVariableWidthValidator from 'validator/lib/isVariableWidth';\n\nexport const IS_VARIABLE_WIDTH = 'isVariableWidth';\n\n/**\n * Checks if the string contains variable-width chars.\n * If given value is not a string, then it returns false.\n */\nexport function isVariableWidth(value: unknown): boolean {\n  return typeof value === 'string' && isVariableWidthValidator(value);\n}\n\n/**\n * Checks if the string contains variable-width chars.\n * If given value is not a string, then it returns false.\n */\nexport function IsVariableWidth(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_VARIABLE_WIDTH,\n      validator: {\n        validate: (value, args): boolean => isVariableWidth(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain a full-width and half-width characters',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHexColor;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;\nfunction isHexColor(str) {\n  (0, _assertString.default)(str);\n  return hexcolor.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isHexColorValidator from 'validator/lib/isHexColor';\n\nexport const IS_HEX_COLOR = 'isHexColor';\n\n/**\n * Checks if the string is a hexadecimal color.\n * If given value is not a string, then it returns false.\n */\nexport function isHexColor(value: unknown): boolean {\n  return typeof value === 'string' && isHexColorValidator(value);\n}\n\n/**\n * Checks if the string is a hexadecimal color.\n * If given value is not a string, then it returns false.\n */\nexport function IsHexColor(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_HEX_COLOR,\n      validator: {\n        validate: (value, args): boolean => isHexColor(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a hexadecimal color',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHexadecimal;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar hexadecimal = /^(0x|0h)?[0-9A-F]+$/i;\nfunction isHexadecimal(str) {\n  (0, _assertString.default)(str);\n  return hexadecimal.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isHexadecimalValidator from 'validator/lib/isHexadecimal';\n\nexport const IS_HEXADECIMAL = 'isHexadecimal';\n\n/**\n * Checks if the string is a hexadecimal number.\n * If given value is not a string, then it returns false.\n */\nexport function isHexadecimal(value: unknown): boolean {\n  return typeof value === 'string' && isHexadecimalValidator(value);\n}\n\n/**\n * Checks if the string is a hexadecimal number.\n * If given value is not a string, then it returns false.\n */\nexport function IsHexadecimal(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_HEXADECIMAL,\n      validator: {\n        validate: (value, args): boolean => isHexadecimal(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a hexadecimal number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationArguments } from '../validation/ValidationArguments';\n\n/**\n * Options used to pass to validation decorators.\n */\nexport interface ValidationOptions {\n  /**\n   * Specifies if validated value is an array and each of its items must be validated.\n   */\n  each?: boolean;\n\n  /**\n   * Error message to be used on validation fail.\n   * Message can be either string or a function that returns a string.\n   */\n  message?: string | ((validationArguments: ValidationArguments) => string);\n\n  /**\n   * Validation groups used for this validation.\n   */\n  groups?: string[];\n\n  /**\n   * Indicates if validation must be performed always, no matter of validation groups used.\n   */\n  always?: boolean;\n\n  /*\n   * A transient set of data passed through to the validation result for response mapping\n   */\n  context?: any;\n}\n\nexport function isValidationOptions(val: any): val is ValidationOptions {\n  if (!val) {\n    return false;\n  }\n  return 'each' in val || 'message' in val || 'groups' in val || 'always' in val || 'context' in val;\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMACAddress;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar macAddress48 = /^(?:[0-9a-fA-F]{2}([-:\\s]))([0-9a-fA-F]{2}\\1){4}([0-9a-fA-F]{2})$/;\nvar macAddress48NoSeparators = /^([0-9a-fA-F]){12}$/;\nvar macAddress48WithDots = /^([0-9a-fA-F]{4}\\.){2}([0-9a-fA-F]{4})$/;\nvar macAddress64 = /^(?:[0-9a-fA-F]{2}([-:\\s]))([0-9a-fA-F]{2}\\1){6}([0-9a-fA-F]{2})$/;\nvar macAddress64NoSeparators = /^([0-9a-fA-F]){16}$/;\nvar macAddress64WithDots = /^([0-9a-fA-F]{4}\\.){3}([0-9a-fA-F]{4})$/;\nfunction isMACAddress(str, options) {\n  (0, _assertString.default)(str);\n  if (options !== null && options !== void 0 && options.eui) {\n    options.eui = String(options.eui);\n  }\n  /**\n   * @deprecated `no_colons` TODO: remove it in the next major\n  */\n  if (options !== null && options !== void 0 && options.no_colons || options !== null && options !== void 0 && options.no_separators) {\n    if (options.eui === '48') {\n      return macAddress48NoSeparators.test(str);\n    }\n    if (options.eui === '64') {\n      return macAddress64NoSeparators.test(str);\n    }\n    return macAddress48NoSeparators.test(str) || macAddress64NoSeparators.test(str);\n  }\n  if ((options === null || options === void 0 ? void 0 : options.eui) === '48') {\n    return macAddress48.test(str) || macAddress48WithDots.test(str);\n  }\n  if ((options === null || options === void 0 ? void 0 : options.eui) === '64') {\n    return macAddress64.test(str) || macAddress64WithDots.test(str);\n  }\n  return isMACAddress(str, {\n    eui: '48'\n  }) || isMACAddress(str, {\n    eui: '64'\n  });\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions, isValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMacAddressValidator from 'validator/lib/isMACAddress';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_MAC_ADDRESS = 'isMacAddress';\n\n/**\n * Check if the string is a MAC address.\n * If given value is not a string, then it returns false.\n */\nexport function isMACAddress(value: unknown, options?: ValidatorJS.IsMACAddressOptions): boolean {\n  return typeof value === 'string' && isMacAddressValidator(value, options);\n}\n\n/**\n * Check if the string is a MAC address.\n * If given value is not a string, then it returns false.\n */\nexport function IsMACAddress(\n  optionsArg?: ValidatorJS.IsMACAddressOptions,\n  validationOptionsArg?: ValidationOptions\n): PropertyDecorator;\nexport function IsMACAddress(validationOptionsArg?: ValidationOptions): PropertyDecorator;\nexport function IsMACAddress(\n  optionsOrValidationOptionsArg?: ValidatorJS.IsMACAddressOptions | ValidationOptions,\n  validationOptionsArg?: ValidationOptions\n): PropertyDecorator {\n  const options = !isValidationOptions(optionsOrValidationOptionsArg) ? optionsOrValidationOptionsArg : undefined;\n  const validationOptions = isValidationOptions(optionsOrValidationOptionsArg)\n    ? optionsOrValidationOptionsArg\n    : validationOptionsArg;\n\n  return ValidateBy(\n    {\n      name: IS_MAC_ADDRESS,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isMACAddress(value, options),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a MAC Address', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIPValidator from 'validator/lib/isIP';\n\nexport type IsIpVersion = '4' | '6' | 4 | 6;\n\nexport const IS_IP = 'isIp';\n\n/**\n * Checks if the string is an IP (version 4 or 6).\n * If given value is not a string, then it returns false.\n */\nexport function isIP(value: unknown, version?: IsIpVersion): boolean {\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  const versionStr = version ? (`${version}` as '4' | '6') : undefined;\n  return typeof value === 'string' && isIPValidator(value, versionStr);\n}\n\n/**\n * Checks if the string is an IP (version 4 or 6).\n * If given value is not a string, then it returns false.\n */\nexport function IsIP(version?: IsIpVersion, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_IP,\n      constraints: [version],\n      validator: {\n        validate: (value, args): boolean => isIP(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an ip address', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isInt;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _nullUndefinedCheck = _interopRequireDefault(require(\"./util/nullUndefinedCheck\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\nfunction isInt(str, options) {\n  (0, _assertString.default)(str);\n  options = options || {};\n\n  // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n  var regex = options.allow_leading_zeroes === false ? int : intLeadingZeroes;\n\n  // Check min/max/lt/gt\n  var minCheckPassed = !options.hasOwnProperty('min') || (0, _nullUndefinedCheck.default)(options.min) || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || (0, _nullUndefinedCheck.default)(options.max) || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || (0, _nullUndefinedCheck.default)(options.lt) || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || (0, _nullUndefinedCheck.default)(options.gt) || str > options.gt;\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPort;\nvar _isInt = _interopRequireDefault(require(\"./isInt\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isPort(str) {\n  return (0, _isInt.default)(str, {\n    allow_leading_zeroes: false,\n    min: 0,\n    max: 65535\n  });\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPortValidator from 'validator/lib/isPort';\n\nexport const IS_PORT = 'isPort';\n\n/**\n * Check if the string is a valid port number.\n */\nexport function isPort(value: unknown): boolean {\n  return typeof value === 'string' && isPortValidator(value);\n}\n\n/**\n * Check if the string is a valid port number.\n */\nexport function IsPort(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_PORT,\n      validator: {\n        validate: (value, args): boolean => isPort(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a port', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISBN;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar possibleIsbn10 = /^(?:[0-9]{9}X|[0-9]{10})$/;\nvar possibleIsbn13 = /^(?:[0-9]{13})$/;\nvar factor = [1, 3];\nfunction isISBN(isbn, options) {\n  (0, _assertString.default)(isbn);\n\n  // For backwards compatibility:\n  // isISBN(str [, version]), i.e. `options` could be used as argument for the legacy `version`\n  var version = String((options === null || options === void 0 ? void 0 : options.version) || options);\n  if (!(options !== null && options !== void 0 && options.version || options)) {\n    return isISBN(isbn, {\n      version: 10\n    }) || isISBN(isbn, {\n      version: 13\n    });\n  }\n  var sanitizedIsbn = isbn.replace(/[\\s-]+/g, '');\n  var checksum = 0;\n  if (version === '10') {\n    if (!possibleIsbn10.test(sanitizedIsbn)) {\n      return false;\n    }\n    for (var i = 0; i < version - 1; i++) {\n      checksum += (i + 1) * sanitizedIsbn.charAt(i);\n    }\n    if (sanitizedIsbn.charAt(9) === 'X') {\n      checksum += 10 * 10;\n    } else {\n      checksum += 10 * sanitizedIsbn.charAt(9);\n    }\n    if (checksum % 11 === 0) {\n      return true;\n    }\n  } else if (version === '13') {\n    if (!possibleIsbn13.test(sanitizedIsbn)) {\n      return false;\n    }\n    for (var _i = 0; _i < 12; _i++) {\n      checksum += factor[_i % 2] * sanitizedIsbn.charAt(_i);\n    }\n    if (sanitizedIsbn.charAt(12) - (10 - checksum % 10) % 10 === 0) {\n      return true;\n    }\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIsbnValidator from 'validator/lib/isISBN';\n\nexport type IsISBNVersion = '10' | '13' | 10 | 13;\n\nexport const IS_ISBN = 'isIsbn';\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function isISBN(value: unknown, version?: IsISBNVersion): boolean {\n  /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */\n  const versionStr = version ? (`${version}` as '10' | '13') : undefined;\n  return typeof value === 'string' && isIsbnValidator(value, versionStr);\n}\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function IsISBN(version?: IsISBNVersion, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISBN,\n      constraints: [version],\n      validator: {\n        validate: (value, args): boolean => isISBN(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an ISBN', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISIN;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;\n\n// this link details how the check digit is calculated:\n// https://www.isin.org/isin-format/. it is a little bit\n// odd in that it works with digits, not numbers. in order\n// to make only one pass through the ISIN characters, the\n// each alpha character is handled as 2 characters within\n// the loop.\n\nfunction isISIN(str) {\n  (0, _assertString.default)(str);\n  if (!isin.test(str)) {\n    return false;\n  }\n  var double = true;\n  var sum = 0;\n  // convert values\n  for (var i = str.length - 2; i >= 0; i--) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      var value = str[i].charCodeAt(0) - 55;\n      var lo = value % 10;\n      var hi = Math.trunc(value / 10);\n      // letters have two digits, so handle the low order\n      // and high order digits separately.\n      for (var _i = 0, _arr = [lo, hi]; _i < _arr.length; _i++) {\n        var digit = _arr[_i];\n        if (double) {\n          if (digit >= 5) {\n            sum += 1 + (digit - 5) * 2;\n          } else {\n            sum += digit * 2;\n          }\n        } else {\n          sum += digit;\n        }\n        double = !double;\n      }\n    } else {\n      var _digit = str[i].charCodeAt(0) - '0'.charCodeAt(0);\n      if (double) {\n        if (_digit >= 5) {\n          sum += 1 + (_digit - 5) * 2;\n        } else {\n          sum += _digit * 2;\n        }\n      } else {\n        sum += _digit;\n      }\n      double = !double;\n    }\n  }\n  var check = Math.trunc((sum + 9) / 10) * 10 - sum;\n  return +str[str.length - 1] === check;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIsinValidator from 'validator/lib/isISIN';\n\nexport const IS_ISIN = 'isIsin';\n\n/**\n * Checks if the string is an ISIN (stock/security identifier).\n * If given value is not a string, then it returns false.\n */\nexport function isISIN(value: unknown): boolean {\n  return typeof value === 'string' && isIsinValidator(value);\n}\n\n/**\n * Checks if the string is an ISIN (stock/security identifier).\n * If given value is not a string, then it returns false.\n */\nexport function IsISIN(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISIN,\n      validator: {\n        validate: (value, args): boolean => isISIN(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be an ISIN (stock/security identifier)',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISO8601;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/* eslint-disable max-len */\n// from http://goo.gl/0ejHHW\nvar iso8601 = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n// same as above, except with a strict 'T' separator between date and time\nvar iso8601StrictSeparator = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n/* eslint-enable max-len */\nvar isValidDate = function isValidDate(str) {\n  // str must have passed the ISO8601 check\n  // this check is meant to catch invalid dates\n  // like 2009-02-31\n  // first check for ordinal dates\n  var ordinalMatch = str.match(/^(\\d{4})-?(\\d{3})([ T]{1}\\.*|$)/);\n  if (ordinalMatch) {\n    var oYear = Number(ordinalMatch[1]);\n    var oDay = Number(ordinalMatch[2]);\n    // if is leap year\n    if (oYear % 4 === 0 && oYear % 100 !== 0 || oYear % 400 === 0) return oDay <= 366;\n    return oDay <= 365;\n  }\n  var match = str.match(/(\\d{4})-?(\\d{0,2})-?(\\d*)/).map(Number);\n  var year = match[1];\n  var month = match[2];\n  var day = match[3];\n  var monthString = month ? \"0\".concat(month).slice(-2) : month;\n  var dayString = day ? \"0\".concat(day).slice(-2) : day;\n\n  // create a date object and compare\n  var d = new Date(\"\".concat(year, \"-\").concat(monthString || '01', \"-\").concat(dayString || '01'));\n  if (month && day) {\n    return d.getUTCFullYear() === year && d.getUTCMonth() + 1 === month && d.getUTCDate() === day;\n  }\n  return true;\n};\nfunction isISO8601(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(str);\n  var check = options.strictSeparator ? iso8601StrictSeparator.test(str) : iso8601.test(str);\n  if (check && options.strict) return isValidDate(str);\n  return check;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIso8601Validator from 'validator/lib/isISO8601';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_ISO8601 = 'isIso8601';\n\n/**\n * Checks if the string is a valid ISO 8601 date.\n * If given value is not a string, then it returns false.\n * Use the option strict = true for additional checks for a valid date, e.g. invalidates dates like 2019-02-29.\n */\nexport function isISO8601(value: unknown, options?: ValidatorJS.IsISO8601Options): boolean {\n  return typeof value === 'string' && isIso8601Validator(value, options);\n}\n\n/**\n * Checks if the string is a valid ISO 8601 date.\n * If given value is not a string, then it returns false.\n * Use the option strict = true for additional checks for a valid date, e.g. invalidates dates like 2019-02-29.\n */\nexport function IsISO8601(\n  options?: ValidatorJS.IsISO8601Options,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISO8601,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isISO8601(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid ISO 8601 date string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isJSON;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _includesArray = _interopRequireDefault(require(\"./util/includesArray\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar default_json_options = {\n  allow_primitives: false\n};\nfunction isJSON(str, options) {\n  (0, _assertString.default)(str);\n  try {\n    options = (0, _merge.default)(options, default_json_options);\n    var primitives = [];\n    if (options.allow_primitives) {\n      primitives = [null, false, true];\n    }\n    var obj = JSON.parse(str);\n    return (0, _includesArray.default)(primitives, obj) || !!obj && _typeof(obj) === 'object';\n  } catch (e) {/* ignore */}\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isJSONValidator from 'validator/lib/isJSON';\n\nexport const IS_JSON = 'isJson';\n\n/**\n * Checks if the string is valid JSON (note: uses JSON.parse).\n * If given value is not a string, then it returns false.\n */\nexport function isJSON(value: unknown): boolean {\n  return typeof value === 'string' && isJSONValidator(value);\n}\n\n/**\n * Checks if the string is valid JSON (note: uses JSON.parse).\n * If given value is not a string, then it returns false.\n */\nexport function IsJSON(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_JSON,\n      validator: {\n        validate: (value, args): boolean => isJSON(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a json string', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isJWT;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _isBase = _interopRequireDefault(require(\"./isBase64\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isJWT(str) {\n  (0, _assertString.default)(str);\n  var dotSplit = str.split('.');\n  var len = dotSplit.length;\n  if (len !== 3) {\n    return false;\n  }\n  return dotSplit.reduce(function (acc, currElem) {\n    return acc && (0, _isBase.default)(currElem, {\n      urlSafe: true\n    });\n  }, true);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isJwtValidator from 'validator/lib/isJWT';\n\nexport const IS_JWT = 'isJwt';\n\n/**\n * Checks if the string is valid JWT token.\n * If given value is not a string, then it returns false.\n */\nexport function isJWT(value: unknown): boolean {\n  return typeof value === 'string' && isJwtValidator(value);\n}\n\n/**\n * Checks if the string is valid JWT token.\n * If given value is not a string, then it returns false.\n */\nexport function IsJWT(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_JWT,\n      validator: {\n        validate: (value, args): boolean => isJWT(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a jwt string', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isLowercase;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isLowercase(str) {\n  (0, _assertString.default)(str);\n  return str === str.toLowerCase();\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLowercaseValidator from 'validator/lib/isLowercase';\n\nexport const IS_LOWERCASE = 'isLowercase';\n\n/**\n * Checks if the string is lowercase.\n * If given value is not a string, then it returns false.\n */\nexport function isLowercase(value: unknown): boolean {\n  return typeof value === 'string' && isLowercaseValidator(value);\n}\n\n/**\n * Checks if the string is lowercase.\n * If given value is not a string, then it returns false.\n */\nexport function IsLowercase(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LOWERCASE,\n      validator: {\n        validate: (value, args): boolean => isLowercase(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a lowercase string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMobilePhone;\nexports.locales = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/* eslint-disable max-len */\nvar phones = {\n  'am-AM': /^(\\+?374|0)(33|4[134]|55|77|88|9[13-689])\\d{6}$/,\n  'ar-AE': /^((\\+?971)|0)?5[024568]\\d{7}$/,\n  'ar-BH': /^(\\+?973)?(3|6)\\d{7}$/,\n  'ar-DZ': /^(\\+?213|0)(5|6|7)\\d{8}$/,\n  'ar-LB': /^(\\+?961)?((3|81)\\d{6}|7\\d{7})$/,\n  'ar-EG': /^((\\+?20)|0)?1[0125]\\d{8}$/,\n  'ar-IQ': /^(\\+?964|0)?7[0-9]\\d{8}$/,\n  'ar-JO': /^(\\+?962|0)?7[789]\\d{7}$/,\n  'ar-KW': /^(\\+?965)([569]\\d{7}|41\\d{6})$/,\n  'ar-LY': /^((\\+?218)|0)?(9[1-6]\\d{7}|[1-8]\\d{7,9})$/,\n  'ar-MA': /^(?:(?:\\+|00)212|0)[5-7]\\d{8}$/,\n  'ar-OM': /^((\\+|00)968)?([79][1-9])\\d{6}$/,\n  'ar-PS': /^(\\+?970|0)5[6|9](\\d{7})$/,\n  'ar-SA': /^(!?(\\+?966)|0)?5\\d{8}$/,\n  'ar-SD': /^((\\+?249)|0)?(9[012369]|1[012])\\d{7}$/,\n  'ar-SY': /^(!?(\\+?963)|0)?9\\d{8}$/,\n  'ar-TN': /^(\\+?216)?[2459]\\d{7}$/,\n  'az-AZ': /^(\\+994|0)(10|5[015]|7[07]|99)\\d{7}$/,\n  'bs-BA': /^((((\\+|00)3876)|06))((([0-3]|[5-6])\\d{6})|(4\\d{7}))$/,\n  'be-BY': /^(\\+?375)?(24|25|29|33|44)\\d{7}$/,\n  'bg-BG': /^(\\+?359|0)?8[789]\\d{7}$/,\n  'bn-BD': /^(\\+?880|0)1[13456789][0-9]{8}$/,\n  'ca-AD': /^(\\+376)?[346]\\d{5}$/,\n  'cs-CZ': /^(\\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,\n  'da-DK': /^(\\+?45)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'de-DE': /^((\\+49|0)1)(5[0-25-9]\\d|6([23]|0\\d?)|7([0-57-9]|6\\d))\\d{7,9}$/,\n  'de-AT': /^(\\+43|0)\\d{1,4}\\d{3,12}$/,\n  'de-CH': /^(\\+41|0)([1-9])\\d{1,9}$/,\n  'de-LU': /^(\\+352)?((6\\d1)\\d{6})$/,\n  'dv-MV': /^(\\+?960)?(7[2-9]|9[1-9])\\d{5}$/,\n  'el-GR': /^(\\+?30|0)?6(8[5-9]|9(?![26])[0-9])\\d{7}$/,\n  'el-CY': /^(\\+?357?)?(9(9|7|6|5|4)\\d{6})$/,\n  'en-AI': /^(\\+?1|0)264(?:2(35|92)|4(?:6[1-2]|76|97)|5(?:3[6-9]|8[1-4])|7(?:2(4|9)|72))\\d{4}$/,\n  'en-AU': /^(\\+?61|0)4\\d{8}$/,\n  'en-AG': /^(?:\\+1|1)268(?:464|7(?:1[3-9]|[28]\\d|3[0246]|64|7[0-689]))\\d{4}$/,\n  'en-BM': /^(\\+?1)?441(((3|7)\\d{6}$)|(5[0-3][0-9]\\d{4}$)|(59\\d{5}$))/,\n  'en-BS': /^(\\+?1[-\\s]?|0)?\\(?242\\)?[-\\s]?\\d{3}[-\\s]?\\d{4}$/,\n  'en-GB': /^(\\+?44|0)7[1-9]\\d{8}$/,\n  'en-GG': /^(\\+?44|0)1481\\d{6}$/,\n  'en-GH': /^(\\+233|0)(20|50|24|54|27|57|26|56|23|53|28|55|59)\\d{7}$/,\n  'en-GY': /^(\\+592|0)6\\d{6}$/,\n  'en-HK': /^(\\+?852[-\\s]?)?[456789]\\d{3}[-\\s]?\\d{4}$/,\n  'en-MO': /^(\\+?853[-\\s]?)?[6]\\d{3}[-\\s]?\\d{4}$/,\n  'en-IE': /^(\\+?353|0)8[356789]\\d{7}$/,\n  'en-IN': /^(\\+?91|0)?[6789]\\d{9}$/,\n  'en-JM': /^(\\+?876)?\\d{7}$/,\n  'en-KE': /^(\\+?254|0)(7|1)\\d{8}$/,\n  'fr-CF': /^(\\+?236| ?)(70|75|77|72|21|22)\\d{6}$/,\n  'en-SS': /^(\\+?211|0)(9[1257])\\d{7}$/,\n  'en-KI': /^((\\+686|686)?)?( )?((6|7)(2|3|8)[0-9]{6})$/,\n  'en-KN': /^(?:\\+1|1)869(?:46\\d|48[89]|55[6-8]|66\\d|76[02-7])\\d{4}$/,\n  'en-LS': /^(\\+?266)(22|28|57|58|59|27|52)\\d{6}$/,\n  'en-MT': /^(\\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,\n  'en-MU': /^(\\+?230|0)?\\d{8}$/,\n  'en-MW': /^(\\+?265|0)(((77|88|31|99|98|21)\\d{7})|(((111)|1)\\d{6})|(32000\\d{4}))$/,\n  'en-NA': /^(\\+?264|0)(6|8)\\d{7}$/,\n  'en-NG': /^(\\+?234|0)?[789]\\d{9}$/,\n  'en-NZ': /^(\\+?64|0)[28]\\d{7,9}$/,\n  'en-PG': /^(\\+?675|0)?(7\\d|8[18])\\d{6}$/,\n  'en-PK': /^((00|\\+)?92|0)3[0-6]\\d{8}$/,\n  'en-PH': /^(09|\\+639)\\d{9}$/,\n  'en-RW': /^(\\+?250|0)?[7]\\d{8}$/,\n  'en-SG': /^(\\+65)?[3689]\\d{7}$/,\n  'en-SL': /^(\\+?232|0)\\d{8}$/,\n  'en-TZ': /^(\\+?255|0)?[67]\\d{8}$/,\n  'en-UG': /^(\\+?256|0)?[7]\\d{8}$/,\n  'en-US': /^((\\+1|1)?( |-)?)?(\\([2-9][0-9]{2}\\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,\n  'en-ZA': /^(\\+?27|0)\\d{9}$/,\n  'en-ZM': /^(\\+?26)?0[79][567]\\d{7}$/,\n  'en-ZW': /^(\\+263)[0-9]{9}$/,\n  'en-BW': /^(\\+?267)?(7[1-8]{1})\\d{6}$/,\n  'es-AR': /^\\+?549(11|[2368]\\d)\\d{8}$/,\n  'es-BO': /^(\\+?591)?(6|7)\\d{7}$/,\n  'es-CO': /^(\\+?57)?3(0(0|1|2|4|5)|1\\d|2[0-4]|5(0|1))\\d{7}$/,\n  'es-CL': /^(\\+?56|0)[2-9]\\d{1}\\d{7}$/,\n  'es-CR': /^(\\+506)?[2-8]\\d{7}$/,\n  'es-CU': /^(\\+53|0053)?5\\d{7}$/,\n  'es-DO': /^(\\+?1)?8[024]9\\d{7}$/,\n  'es-HN': /^(\\+?504)?[9|8|3|2]\\d{7}$/,\n  'es-EC': /^(\\+?593|0)([2-7]|9[2-9])\\d{7}$/,\n  'es-ES': /^(\\+?34)?[6|7]\\d{8}$/,\n  'es-GT': /^(\\+?502)?[2|6|7]\\d{7}$/,\n  'es-PE': /^(\\+?51)?9\\d{8}$/,\n  'es-MX': /^(\\+?52)?(1|01)?\\d{10,11}$/,\n  'es-NI': /^(\\+?505)\\d{7,8}$/,\n  'es-PA': /^(\\+?507)\\d{7,8}$/,\n  'es-PY': /^(\\+?595|0)9[9876]\\d{7}$/,\n  'es-SV': /^(\\+?503)?[67]\\d{7}$/,\n  'es-UY': /^(\\+598|0)9[1-9][\\d]{6}$/,\n  'es-VE': /^(\\+?58)?(2|4)\\d{9}$/,\n  'et-EE': /^(\\+?372)?\\s?(5|8[1-4])\\s?([0-9]\\s?){6,7}$/,\n  'fa-IR': /^(\\+?98[\\-\\s]?|0)9[0-39]\\d[\\-\\s]?\\d{3}[\\-\\s]?\\d{4}$/,\n  'fi-FI': /^(\\+?358|0)\\s?(4[0-6]|50)\\s?(\\d\\s?){4,8}$/,\n  'fj-FJ': /^(\\+?679)?\\s?\\d{3}\\s?\\d{4}$/,\n  'fo-FO': /^(\\+?298)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'fr-BF': /^(\\+226|0)[67]\\d{7}$/,\n  'fr-BJ': /^(\\+229)\\d{8}$/,\n  'fr-CD': /^(\\+?243|0)?(8|9)\\d{8}$/,\n  'fr-CM': /^(\\+?237)6[0-9]{8}$/,\n  'fr-FR': /^(\\+?33|0)[67]\\d{8}$/,\n  'fr-GF': /^(\\+?594|0|00594)[67]\\d{8}$/,\n  'fr-GP': /^(\\+?590|0|00590)[67]\\d{8}$/,\n  'fr-MQ': /^(\\+?596|0|00596)[67]\\d{8}$/,\n  'fr-PF': /^(\\+?689)?8[789]\\d{6}$/,\n  'fr-RE': /^(\\+?262|0|00262)[67]\\d{8}$/,\n  'fr-WF': /^(\\+681)?\\d{6}$/,\n  'he-IL': /^(\\+972|0)([23489]|5[012345689]|77)[1-9]\\d{6}$/,\n  'hu-HU': /^(\\+?36|06)(20|30|31|50|70)\\d{7}$/,\n  'id-ID': /^(\\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\\s?|\\d]{5,11})$/,\n  'ir-IR': /^(\\+98|0)?9\\d{9}$/,\n  'it-IT': /^(\\+?39)?\\s?3\\d{2} ?\\d{6,7}$/,\n  'it-SM': /^((\\+378)|(0549)|(\\+390549)|(\\+3780549))?6\\d{5,9}$/,\n  'ja-JP': /^(\\+81[ \\-]?(\\(0\\))?|0)[6789]0[ \\-]?\\d{4}[ \\-]?\\d{4}$/,\n  'ka-GE': /^(\\+?995)?(79\\d{7}|5\\d{8})$/,\n  'kk-KZ': /^(\\+?7|8)?7\\d{9}$/,\n  'kl-GL': /^(\\+?299)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'ko-KR': /^((\\+?82)[ \\-]?)?0?1([0|1|6|7|8|9]{1})[ \\-]?\\d{3,4}[ \\-]?\\d{4}$/,\n  'ky-KG': /^(\\+996\\s?)?(22[0-9]|50[0-9]|55[0-9]|70[0-9]|75[0-9]|77[0-9]|880|990|995|996|997|998)\\s?\\d{3}\\s?\\d{3}$/,\n  'lt-LT': /^(\\+370|8)\\d{8}$/,\n  'lv-LV': /^(\\+?371)2\\d{7}$/,\n  'mg-MG': /^((\\+?261|0)(2|3)\\d)?\\d{7}$/,\n  'mn-MN': /^(\\+|00|011)?976(77|81|88|91|94|95|96|99)\\d{6}$/,\n  'my-MM': /^(\\+?959|09|9)(2[5-7]|3[1-2]|4[0-5]|6[6-9]|7[5-9]|9[6-9])[0-9]{7}$/,\n  'ms-MY': /^(\\+?60|0)1(([0145](-|\\s)?\\d{7,8})|([236-9](-|\\s)?\\d{7}))$/,\n  'mz-MZ': /^(\\+?258)?8[234567]\\d{7}$/,\n  'nb-NO': /^(\\+?47)?[49]\\d{7}$/,\n  'ne-NP': /^(\\+?977)?9[78]\\d{8}$/,\n  'nl-BE': /^(\\+?32|0)4\\d{8}$/,\n  'nl-NL': /^(((\\+|00)?31\\(0\\))|((\\+|00)?31)|0)6{1}\\d{8}$/,\n  'nl-AW': /^(\\+)?297(56|59|64|73|74|99)\\d{5}$/,\n  'nn-NO': /^(\\+?47)?[49]\\d{7}$/,\n  'pl-PL': /^(\\+?48)? ?([5-8]\\d|45) ?\\d{3} ?\\d{2} ?\\d{2}$/,\n  'pt-BR': /^((\\+?55\\ ?[1-9]{2}\\ ?)|(\\+?55\\ ?\\([1-9]{2}\\)\\ ?)|(0[1-9]{2}\\ ?)|(\\([1-9]{2}\\)\\ ?)|([1-9]{2}\\ ?))((\\d{4}\\-?\\d{4})|(9[1-9]{1}\\d{3}\\-?\\d{4}))$/,\n  'pt-PT': /^(\\+?351)?9[1236]\\d{7}$/,\n  'pt-AO': /^(\\+?244)?9\\d{8}$/,\n  'ro-MD': /^(\\+?373|0)((6(0|1|2|6|7|8|9))|(7(6|7|8|9)))\\d{6}$/,\n  'ro-RO': /^(\\+?40|0)\\s?7\\d{2}(\\/|\\s|\\.|-)?\\d{3}(\\s|\\.|-)?\\d{3}$/,\n  'ru-RU': /^(\\+?7|8)?9\\d{9}$/,\n  'si-LK': /^(?:0|94|\\+94)?(7(0|1|2|4|5|6|7|8)( |-)?)\\d{7}$/,\n  'sl-SI': /^(\\+386\\s?|0)(\\d{1}\\s?\\d{3}\\s?\\d{2}\\s?\\d{2}|\\d{2}\\s?\\d{3}\\s?\\d{3})$/,\n  'sk-SK': /^(\\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,\n  'so-SO': /^(\\+?252|0)((6[0-9])\\d{7}|(7[1-9])\\d{7})$/,\n  'sq-AL': /^(\\+355|0)6[2-9]\\d{7}$/,\n  'sr-RS': /^(\\+3816|06)[- \\d]{5,9}$/,\n  'sv-SE': /^(\\+?46|0)[\\s\\-]?7[\\s\\-]?[02369]([\\s\\-]?\\d){7}$/,\n  'tg-TJ': /^(\\+?992)?[5][5]\\d{7}$/,\n  'th-TH': /^(\\+66|66|0)\\d{9}$/,\n  'tr-TR': /^(\\+?90|0)?5\\d{9}$/,\n  'tk-TM': /^(\\+993|993|8)\\d{8}$/,\n  'uk-UA': /^(\\+?38)?0(50|6[36-8]|7[357]|9[1-9])\\d{7}$/,\n  'uz-UZ': /^(\\+?998)?(6[125-79]|7[1-69]|88|9\\d)\\d{7}$/,\n  'vi-VN': /^((\\+?84)|0)((3([2-9]))|(5([25689]))|(7([0|6-9]))|(8([1-9]))|(9([0-9])))([0-9]{7})$/,\n  'zh-CN': /^((\\+|00)86)?(1[3-9]|9[28])\\d{9}$/,\n  'zh-TW': /^(\\+?886\\-?|0)?9\\d{8}$/,\n  'dz-BT': /^(\\+?975|0)?(17|16|77|02)\\d{6}$/,\n  'ar-YE': /^(((\\+|00)9677|0?7)[0137]\\d{7}|((\\+|00)967|0)[1-7]\\d{6})$/,\n  'ar-EH': /^(\\+?212|0)[\\s\\-]?(5288|5289)[\\s\\-]?\\d{5}$/,\n  'fa-AF': /^(\\+93|0)?(2{1}[0-8]{1}|[3-5]{1}[0-4]{1})(\\d{7})$/,\n  'mk-MK': /^(\\+?389|0)?((?:2[2-9]\\d{6}|(?:3[1-4]|4[2-8])\\d{6}|500\\d{5}|5[2-9]\\d{6}|7[0-9][2-9]\\d{5}|8[1-9]\\d{6}|800\\d{5}|8009\\d{4}))$/\n};\n/* eslint-enable max-len */\n\n// aliases\nphones['en-CA'] = phones['en-US'];\nphones['fr-CA'] = phones['en-CA'];\nphones['fr-BE'] = phones['nl-BE'];\nphones['zh-HK'] = phones['en-HK'];\nphones['zh-MO'] = phones['en-MO'];\nphones['ga-IE'] = phones['en-IE'];\nphones['fr-CH'] = phones['de-CH'];\nphones['it-CH'] = phones['fr-CH'];\nfunction isMobilePhone(str, locale, options) {\n  (0, _assertString.default)(str);\n  if (options && options.strictMode && !str.startsWith('+')) {\n    return false;\n  }\n  if (Array.isArray(locale)) {\n    return locale.some(function (key) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if (phones.hasOwnProperty(key)) {\n        var phone = phones[key];\n        if (phone.test(str)) {\n          return true;\n        }\n      }\n      return false;\n    });\n  } else if (locale in phones) {\n    return phones[locale].test(str);\n    // alias falsey locale as 'any'\n  } else if (!locale || locale === 'any') {\n    for (var key in phones) {\n      // istanbul ignore else\n      if (phones.hasOwnProperty(key)) {\n        var phone = phones[key];\n        if (phone.test(str)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nvar locales = exports.locales = Object.keys(phones);", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMobilePhoneValidator from 'validator/lib/isMobilePhone';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_MOBILE_PHONE = 'isMobilePhone';\n\n/**\n * Checks if the string is a mobile phone number (locale is either an array of locales (e.g ['sk-SK', 'sr-RS'])\n * OR one of ['am-Am', 'ar-AE', 'ar-BH', 'ar-DZ', 'ar-EG', 'ar-IQ', ar-JO', 'ar-KW', 'ar-SA', 'ar-SY', 'ar-TN', 'be-BY',\n * 'bg-BG', 'bn-BD', 'cs-CZ', 'da-DK', 'de-DE', 'de-AT', 'el-GR', 'en-AU', 'en-CA', 'en-GB', 'en-GG', 'en-GH', 'en-HK',\n * 'en-MO', 'en-IE', 'en-IN', 'en-KE', 'en-MT', 'en-MU', 'en-NG', 'en-NZ', 'en-PK', 'en-RW', 'en-SG', 'en-SL', 'en-UG',\n * 'en-US', 'en-TZ', 'en-ZA', 'en-ZM', 'es-CL', 'es-CR', 'es-EC', 'es-ES', 'es-MX', 'es-PA', 'es-PY', 'es-UY', 'et-EE',\n * 'fa-IR', 'fi-FI', 'fj-FJ', 'fo-FO', 'fr-BE', 'fr-FR', 'fr-GF', 'fr-GP', 'fr-MQ', 'fr-RE', 'he-IL', 'hu-HU', 'id-ID',\n * 'it-IT', 'ja-JP', 'kk-KZ', 'kl-GL', 'ko-KR', 'lt-LT', 'ms-MY', 'nb-NO', 'ne-NP', 'nl-BE', 'nl-NL', 'nn-NO', 'pl-PL',\n * 'pt-BR', 'pt-PT', 'ro-RO', 'ru-RU', 'sl-SI', 'sk-SK', 'sr-RS', 'sv-SE', 'th-TH', 'tr-TR', 'uk-UA', 'vi-VN', 'zh-CN',\n * 'zh-HK', 'zh-MO', 'zh-TW']\n * If given value is not a string, then it returns false.\n */\nexport function isMobilePhone(\n  value: unknown,\n  locale?: ValidatorJS.MobilePhoneLocale,\n  options?: ValidatorJS.IsMobilePhoneOptions\n): boolean {\n  return typeof value === 'string' && isMobilePhoneValidator(value, locale, options);\n}\n\n/**\n * Checks if the string is a mobile phone number (locale is either an array of locales (e.g ['sk-SK', 'sr-RS'])\n * OR one of ['am-Am', 'ar-AE', 'ar-BH', 'ar-DZ', 'ar-EG', 'ar-IQ', ar-JO', 'ar-KW', 'ar-SA', 'ar-SY', 'ar-TN', 'be-BY',\n * 'bg-BG', 'bn-BD', 'cs-CZ', 'da-DK', 'de-DE', 'de-AT', 'el-GR', 'en-AU', 'en-CA', 'en-GB', 'en-GG', 'en-GH', 'en-HK',\n * 'en-MO', 'en-IE', 'en-IN', 'en-KE', 'en-MT', 'en-MU', 'en-NG', 'en-NZ', 'en-PK', 'en-RW', 'en-SG', 'en-SL', 'en-UG',\n * 'en-US', 'en-TZ', 'en-ZA', 'en-ZM', 'es-CL', 'es-CR', 'es-EC', 'es-ES', 'es-MX', 'es-PA', 'es-PY', 'es-UY', 'et-EE',\n * 'fa-IR', 'fi-FI', 'fj-FJ', 'fo-FO', 'fr-BE', 'fr-FR', 'fr-GF', 'fr-GP', 'fr-MQ', 'fr-RE', 'he-IL', 'hu-HU', 'id-ID',\n * 'it-IT', 'ja-JP', 'kk-KZ', 'kl-GL', 'ko-KR', 'lt-LT', 'ms-MY', 'nb-NO', 'ne-NP', 'nl-BE', 'nl-NL', 'nn-NO', 'pl-PL',\n * 'pt-BR', 'pt-PT', 'ro-RO', 'ru-RU', 'sl-SI', 'sk-SK', 'sr-RS', 'sv-SE', 'th-TH', 'tr-TR', 'uk-UA', 'vi-VN', 'zh-CN',\n * 'zh-HK', 'zh-MO', 'zh-TW']\n * If given value is not a string, then it returns false.\n */\nexport function IsMobilePhone(\n  locale?: ValidatorJS.MobilePhoneLocale,\n  options?: ValidatorJS.IsMobilePhoneOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_MOBILE_PHONE,\n      constraints: [locale, options],\n      validator: {\n        validate: (value, args): boolean => isMobilePhone(value, args?.constraints[0], args?.constraints[1]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a phone number', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountryCodes = void 0;\nexports.default = isISO31661Alpha2;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\nvar validISO31661Alpha2CountriesCodes = new Setnfunction isISO31661Alpha2(str) {\n  (0, _assertString.default)(str);\n  return validISO31661Alpha2CountriesCodes.has(str.toUpperCase());\n}\nvar CountryCodes = exports.CountryCodes = validISO31661Alpha2CountriesCodes;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isISO31661Alpha2Validator from 'validator/lib/isISO31661Alpha2';\n\nexport const IS_ISO31661_ALPHA_2 = 'isISO31661Alpha2';\n\n/**\n * Check if the string is a valid [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) officially assigned country code.\n */\nexport function isISO31661Alpha2(value: unknown): boolean {\n  return typeof value === 'string' && isISO31661Alpha2Validator(value);\n}\n\n/**\n * Check if the string is a valid [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) officially assigned country code.\n */\nexport function IsISO31661Alpha2(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISO31661_ALPHA_2,\n      validator: {\n        validate: (value, args): boolean => isISO31661Alpha2(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid ISO31661 Alpha2 code',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISO31661Alpha3;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\nvar validISO31661Alpha3CountriesCodes = new Set(['AFG', 'ALA', 'ALB', 'DZA', 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM', 'ABW', 'AUS', 'AUT', 'AZE', 'BHS', 'BHR', 'BGD', 'BRB', 'BLR', 'BEL', 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH', 'BWA', 'BVT', 'BRA', 'IOT', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR', 'CAN', 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK', 'COL', 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'HRV', 'CUB', 'CUW', 'CYP', 'CZE', 'DNK', 'DJI', 'DMA', 'DOM', 'ECU', 'EGY', 'SLV', 'GNQ', 'ERI', 'EST', 'ETH', 'FLK', 'FRO', 'FJI', 'FIN', 'FRA', 'GUF', 'PYF', 'ATF', 'GAB', 'GMB', 'GEO', 'DEU', 'GHA', 'GIB', 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN', 'GNB', 'GUY', 'HTI', 'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL', 'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN', 'ISR', 'ITA', 'JAM', 'JPN', 'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KWT', 'KGZ', 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LIE', 'LTU', 'LUX', 'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT', 'MHL', 'MTQ', 'MRT', 'MUS', 'MYT', 'MEX', 'FSM', 'MDA', 'MCO', 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM', 'NRU', 'NPL', 'NLD', 'NCL', 'NZL', 'NIC', 'NER', 'NGA', 'NIU', 'NFK', 'MNP', 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER', 'PHL', 'PCN', 'POL', 'PRT', 'PRI', 'QAT', 'REU', 'ROU', 'RUS', 'RWA', 'BLM', 'SHN', 'KNA', 'LCA', 'MAF', 'SPM', 'VCT', 'WSM', 'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE', 'SGP', 'SXM', 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'SSD', 'ESP', 'LKA', 'SDN', 'SUR', 'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN', 'TJK', 'TZA', 'THA', 'TLS', 'TGO', 'TKL', 'TON', 'TTO', 'TUN', 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR', 'USA', 'UMI', 'URY', 'UZB', 'VUT', 'VEN', 'VNM', 'VGB', 'VIR', 'WLF', 'ESH', 'YEM', 'ZMB', 'ZWE']);\nfunction isISO31661Alpha3(str) {\n  (0, _assertString.default)(str);\n  return validISO31661Alpha3CountriesCodes.has(str.toUpperCase());\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isISO31661Alpha3Validator from 'validator/lib/isISO31661Alpha3';\n\nexport const IS_ISO31661_ALPHA_3 = 'isISO31661Alpha3';\n\n/**\n * Check if the string is a valid [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) officially assigned country code.\n */\nexport function isISO31661Alpha3(value: unknown): boolean {\n  return typeof value === 'string' && isISO31661Alpha3Validator(value);\n}\n\n/**\n * Check if the string is a valid [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) officially assigned country code.\n */\nexport function IsISO31661Alpha3(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISO31661_ALPHA_3,\n      validator: {\n        validate: (value, args): boolean => isISO31661Alpha3(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid ISO31661 Alpha3 code',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMongoId;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _isHexadecimal = _interopRequireDefault(require(\"./isHexadecimal\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isMongoId(str) {\n  (0, _assertString.default)(str);\n  return (0, _isHexadecimal.default)(str) && str.length === 24;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMongoIdValidator from 'validator/lib/isMongoId';\n\nexport const IS_MONGO_ID = 'isMongoId';\n\n/**\n * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n * If given value is not a string, then it returns false.\n */\nexport function isMongoId(value: unknown): boolean {\n  return typeof value === 'string' && isMongoIdValidator(value);\n}\n\n/**\n * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n * If given value is not a string, then it returns false.\n */\nexport function IsMongoId(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_MONGO_ID,\n      validator: {\n        validate: (value, args): boolean => isMongoId(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a mongodb id', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMultibyte;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/* eslint-disable no-control-regex */\nvar multibyte = /[^\\x00-\\x7F]/;\n/* eslint-enable no-control-regex */\n\nfunction isMultibyte(str) {\n  (0, _assertString.default)(str);\n  return multibyte.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMultibyteValidator from 'validator/lib/isMultibyte';\n\nexport const IS_MULTIBYTE = 'isMultibyte';\n\n/**\n * Checks if the string contains one or more multibyte chars.\n * If given value is not a string, then it returns false.\n */\nexport function isMultibyte(value: unknown): boolean {\n  return typeof value === 'string' && isMultibyteValidator(value);\n}\n\n/**\n * Checks if the string contains one or more multibyte chars.\n * If given value is not a string, then it returns false.\n */\nexport function IsMultibyte(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_MULTIBYTE,\n      validator: {\n        validate: (value, args): boolean => isMultibyte(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain one or more multibyte chars',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isSurrogatePair;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar surrogatePair = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\nfunction isSurrogatePair(str) {\n  (0, _assertString.default)(str);\n  return surrogatePair.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isSurrogatePairValidator from 'validator/lib/isSurrogatePair';\n\nexport const IS_SURROGATE_PAIR = 'isSurrogatePair';\n\n/**\n * Checks if the string contains any surrogate pairs chars.\n * If given value is not a string, then it returns false.\n */\nexport function isSurrogatePair(value: unknown): boolean {\n  return typeof value === 'string' && isSurrogatePairValidator(value);\n}\n\n/**\n * Checks if the string contains any surrogate pairs chars.\n * If given value is not a string, then it returns false.\n */\nexport function IsSurrogatePair(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_SURROGATE_PAIR,\n      validator: {\n        validate: (value, args): boolean => isSurrogatePair(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain any surrogate pairs chars',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isURL;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _checkHost = _interopRequireDefault(require(\"./util/checkHost\"));\nvar _includesString = _interopRequireDefault(require(\"./util/includesString\"));\nvar _isFQDN = _interopRequireDefault(require(\"./isFQDN\"));\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n/*\noptions for isURL method\n\nprotocols - valid protocols can be modified with this option.\nrequire_tld - If set to false isURL will not check if the URL's host includes a top-level domain.\nrequire_protocol - if set to true isURL will return false if protocol is not present in the URL.\nrequire_host - if set to false isURL will not check if host is present in the URL.\nrequire_port - if set to true isURL will check if port is present in the URL.\nrequire_valid_protocol - isURL will check if the URL's protocol is present in the protocols option.\nallow_underscores - if set to true, the validator will allow underscores in the URL.\nhost_whitelist - if set to an array of strings or regexp, and the domain matches none of the strings\n                 defined in it, the validation fails.\nhost_blacklist - if set to an array of strings or regexp, and the domain matches any of the strings\n                 defined in it, the validation fails.\nallow_trailing_dot - if set to true, the validator will allow the domain to end with\n                     a `.` character.\nallow_protocol_relative_urls - if set to true protocol relative URLs will be allowed.\nallow_fragments - if set to false isURL will return false if fragments are present.\nallow_query_components - if set to false isURL will return false if query components are present.\ndisallow_auth - if set to true, the validator will fail if the URL contains an authentication\n                component, e.g. `http://username:password@example.com`\nvalidate_length - if set to false isURL will skip string length validation. `max_allowed_length`\n                  will be ignored if this is set as `false`.\nmax_allowed_length - if set, isURL will not allow URLs longer than the specified value (default is\n                     2084 that IE maximum URL length).\n\n*/\n\nvar default_url_options = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_port: false,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false,\n  allow_fragments: true,\n  allow_query_components: true,\n  validate_length: true,\n  max_allowed_length: 2084\n};\nvar wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\nfunction isURL(url, options) {\n  (0, _assertString.default)(url);\n  if (!url || /[\\s<>]/.test(url)) {\n    return false;\n  }\n  if (url.indexOf('mailto:') === 0) {\n    return false;\n  }\n  options = (0, _merge.default)(options, default_url_options);\n  if (options.validate_length && url.length > options.max_allowed_length) {\n    return false;\n  }\n  if (!options.allow_fragments && (0, _includesString.default)(url, '#')) {\n    return false;\n  }\n  if (!options.allow_query_components && ((0, _includesString.default)(url, '?') || (0, _includesString.default)(url, '&'))) {\n    return false;\n  }\n  var protocol, auth, host, hostname, port, port_str, split, ipv6;\n  split = url.split('#');\n  url = split.shift();\n  split = url.split('?');\n  url = split.shift();\n  split = url.split('://');\n  if (split.length > 1) {\n    protocol = split.shift().toLowerCase();\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (url.slice(0, 2) === '//') {\n    if (!options.allow_protocol_relative_urls) {\n      return false;\n    }\n    split[0] = url.slice(2);\n  }\n  url = split.join('://');\n  if (url === '') {\n    return false;\n  }\n  split = url.split('/');\n  url = split.shift();\n  if (url === '' && !options.require_host) {\n    return true;\n  }\n  split = url.split('@');\n  if (split.length > 1) {\n    if (options.disallow_auth) {\n      return false;\n    }\n    if (split[0] === '') {\n      return false;\n    }\n    auth = split.shift();\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n    var _auth$split = auth.split(':'),\n      _auth$split2 = _slicedToArray(_auth$split, 2),\n      user = _auth$split2[0],\n      password = _auth$split2[1];\n    if (user === '' && password === '') {\n      return false;\n    }\n  }\n  hostname = split.join('@');\n  port_str = null;\n  ipv6 = null;\n  var ipv6_match = hostname.match(wrapped_ipv6);\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n  if (port_str !== null && port_str.length > 0) {\n    port = parseInt(port_str, 10);\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  } else if (options.require_port) {\n    return false;\n  }\n  if (options.host_whitelist) {\n    return (0, _checkHost.default)(host, options.host_whitelist);\n  }\n  if (host === '' && !options.require_host) {\n    return true;\n  }\n  if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {\n    return false;\n  }\n  host = host || ipv6;\n  if (options.host_blacklist && (0, _checkHost.default)(host, options.host_blacklist)) {\n    return false;\n  }\n  return true;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUrlValidator from 'validator/lib/isURL';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_URL = 'isUrl';\n\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function isURL(value: string, options?: ValidatorJS.IsURLOptions): boolean {\n  return typeof value === 'string' && isUrlValidator(value, options);\n}\n\n/**\n * Checks if the string is a url.\n * If given value is not a string, then it returns false.\n */\nexport function IsUrl(options?: ValidatorJS.IsURLOptions, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_URL,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isURL(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a URL address', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isUUID;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar uuid = {\n  1: /^[0-9A-F]{8}-[0-9A-F]{4}-1[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  2: /^[0-9A-F]{8}-[0-9A-F]{4}-2[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  6: /^[0-9A-F]{8}-[0-9A-F]{4}-6[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  7: /^[0-9A-F]{8}-[0-9A-F]{4}-7[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  8: /^[0-9A-F]{8}-[0-9A-F]{4}-8[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  nil: /^00000000-0000-0000-0000-000000000000$/i,\n  max: /^ffffffff-ffff-ffff-ffff-ffffffffffff$/i,\n  loose: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  // From https://github.com/uuidjs/uuid/blob/main/src/regex.js\n  all: /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i\n};\nfunction isUUID(str, version) {\n  (0, _assertString.default)(str);\n  if (version === undefined || version === null) {\n    version = 'all';\n  }\n  return version in uuid ? uuid[version].test(str) : false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUuidValidator from 'validator/lib/isUUID';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_UUID = 'isUuid';\n\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n * If given value is not a string, then it returns false.\n */\nexport function isUUID(value: unknown, version?: ValidatorJS.UUIDVersion): boolean {\n  return typeof value === 'string' && isUuidValidator(value, version);\n}\n\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n * If given value is not a string, then it returns false.\n */\nexport function IsUUID(version?: ValidatorJS.UUIDVersion, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_UUID,\n      constraints: [version],\n      validator: {\n        validate: (value, args): boolean => isUUID(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a UUID', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_FIREBASE_PUSH_ID = 'IsFirebasePushId';\n\n/**\n * Checks if the string is a Firebase Push Id\n * If given value is not a Firebase Push Id, it returns false\n */\nexport function isFirebasePushId(value: unknown): boolean {\n  const webSafeRegex = /^[a-zA-Z0-9_-]*$/;\n  return typeof value === 'string' && value.length === 20 && webSafeRegex.test(value);\n}\n\n/**\n * Checks if the string is a Firebase Push Id\n * If given value is not a Firebase Push Id, it returns false\n */\nexport function IsFirebasePushId(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_FIREBASE_PUSH_ID,\n      validator: {\n        validate: (value, args): boolean => isFirebasePushId(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a Firebase Push Id',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isUppercase;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isUppercase(str) {\n  (0, _assertString.default)(str);\n  return str === str.toUpperCase();\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isUppercaseValidator from 'validator/lib/isUppercase';\n\nexport const IS_UPPERCASE = 'isUppercase';\n\n/**\n * Checks if the string is uppercase.\n * If given value is not a string, then it returns false.\n */\nexport function isUppercase(value: unknown): boolean {\n  return typeof value === 'string' && isUppercaseValidator(value);\n}\n\n/**\n * Checks if the string is uppercase.\n * If given value is not a string, then it returns false.\n */\nexport function IsUppercase(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_UPPERCASE,\n      validator: {\n        validate: (value, args): boolean => isUppercase(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be uppercase', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isLength;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\n/* eslint-disable prefer-rest-params */\nfunction isLength(str, options) {\n  (0, _assertString.default)(str);\n  var min;\n  var max;\n  if (_typeof(options) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else {\n    // backwards compatibility: isLength(str, min [, max])\n    min = arguments[1] || 0;\n    max = arguments[2];\n  }\n  var presentationSequences = str.match(/(\\uFE0F|\\uFE0E)/g) || [];\n  var surrogatePairs = str.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g) || [];\n  var len = str.length - presentationSequences.length - surrogatePairs.length;\n  var isInsideRange = len >= min && (typeof max === 'undefined' || len <= max);\n  if (isInsideRange && Array.isArray(options === null || options === void 0 ? void 0 : options.discreteLengths)) {\n    return options.discreteLengths.some(function (discreteLen) {\n      return discreteLen === len;\n    });\n  }\n  return isInsideRange;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\n\nexport const IS_LENGTH = 'isLength';\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function length(value: unknown, min: number, max?: number): boolean {\n  return typeof value === 'string' && isLengthValidator(value, { min, max });\n}\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function Length(min: number, max?: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LENGTH,\n      constraints: [min, max],\n      validator: {\n        validate: (value, args): boolean => length(value, args?.constraints[0], args?.constraints[1]),\n        defaultMessage: buildMessage((eachPrefix, args) => {\n          const isMinLength = args?.constraints[0] !== null && args?.constraints[0] !== undefined;\n          const isMaxLength = args?.constraints[1] !== null && args?.constraints[1] !== undefined;\n          if (isMinLength && (!args.value || args.value.length < args?.constraints[0])) {\n            return eachPrefix + '$property must be longer than or equal to $constraint1 characters';\n          } else if (isMaxLength && args.value.length > args?.constraints[1]) {\n            return eachPrefix + '$property must be shorter than or equal to $constraint2 characters';\n          }\n          return (\n            eachPrefix +\n            '$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters'\n          );\n        }, validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\n\nexport const MAX_LENGTH = 'maxLength';\n\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function maxLength(value: unknown, max: number): boolean {\n  return typeof value === 'string' && isLengthValidator(value, { min: 0, max });\n}\n\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function MaxLength(max: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MAX_LENGTH,\n      constraints: [max],\n      validator: {\n        validate: (value, args): boolean => maxLength(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be shorter than or equal to $constraint1 characters',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLengthValidator from 'validator/lib/isLength';\n\nexport const MIN_LENGTH = 'minLength';\n\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function minLength(value: unknown, min: number): boolean {\n  return typeof value === 'string' && isLengthValidator(value, { min });\n}\n\n/**\n * Checks if the string's length is not less than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function MinLength(min: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: MIN_LENGTH,\n      constraints: [min],\n      validator: {\n        validate: (value, args): boolean => minLength(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be longer than or equal to $constraint1 characters',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = matches;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction matches(str, pattern, modifiers) {\n  (0, _assertString.default)(str);\n  if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {\n    pattern = new RegExp(pattern, modifiers);\n  }\n  return !!str.match(pattern);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\n\nexport const MATCHES = 'matches';\n\n/**\n * Checks if string matches the pattern. Either matches('foo', /foo/i).\n * If given value is not a string, then it returns false.\n */\nexport function matches(value: string, pattern: RegExp): boolean;\nexport function matches(value: string, pattern: string, modifiers: string): boolean;\nexport function matches(value: string, pattern: RegExp | string, modifiers?: string): boolean {\n  return typeof value === 'string' && matchesValidator(value, pattern as unknown as any, modifiers);\n}\n\n/**\n * Checks if string matches the pattern. Either matches('foo', /foo/i)\n * If given value is not a string, then it returns false.\n */\nexport function Matches(pattern: RegExp, validationOptions?: ValidationOptions): PropertyDecorator;\nexport function Matches(pattern: string, modifiers?: string, validationOptions?: ValidationOptions): PropertyDecorator;\nexport function Matches(\n  pattern: RegExp | string,\n  modifiersOrAnnotationOptions?: string | ValidationOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  let modifiers: string;\n  if (modifiersOrAnnotationOptions && modifiersOrAnnotationOptions instanceof Object && !validationOptions) {\n    validationOptions = modifiersOrAnnotationOptions;\n  } else {\n    modifiers = modifiersOrAnnotationOptions as string;\n  }\n\n  return ValidateBy(\n    {\n      name: MATCHES,\n      constraints: [pattern, modifiers],\n      validator: {\n        validate: (value, args): boolean => matches(value, args?.constraints[0], args?.constraints[1]),\n        defaultMessage: buildMessage(\n          (eachPrefix, args) => eachPrefix + '$property must match $constraint1 regular expression',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "{\"version\":4,\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6],0,0,0,0,0,0,0,[[\"6[2-467]\\\\d{3}\",[5]],[\"4\\\\d{4}\",[5]],0,0,0,0,[\"(?:0[1-9]|[1589]\\\\d)\\\\d{4}\",[6]]]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[135-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[135-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[[\"[78]\\\\d{5}\",[6]],[\"690\\\\d{6}|[356]\\\\d{5}\",[6,9]],[\"180[02]\\\\d{4}\",[8]],[\"[19]\\\\d{5}\",[6]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[2-4679][2-8]\\\\d{6}\",[8]],[\"5[024-68]\\\\d{7}\",[9]],[\"400\\\\d{6}|800\\\\d{2,9}\"],[\"900[02]\\\\d{5}\",[9]],0,0,[\"600[25]\\\\d{5}\",[9]],0,0,[\"700[05]\\\\d{5}\",[9]]]],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[25][0-8]|[34][0-4]|6[0-5])[2-9]\\\\d{6}\"],[\"7\\\\d{8}\"]]],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([457]\\\\d{6})$|1\",\"268$1\",0,\"268\",[[\"268(?:4(?:6[0-38]|84)|56[0-2])\\\\d{4}\"],[\"268(?:464|7(?:1[3-9]|[28]\\\\d|3[0246]|64|7[0-689]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"26840[69]\\\\d{4}\"],[\"26848[01]\\\\d{4}\"]]],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2457]\\\\d{6})$|1\",\"264$1\",0,\"264\",[[\"264(?:292|4(?:6[12]|9[78]))\\\\d{4}\"],[\"264(?:235|4(?:69|76)|5(?:3[6-9]|8[1-4])|7(?:29|72))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"264724\\\\d{4}\"]]],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"4505[0-2]\\\\d{3}|(?:[2358][16-9]\\\\d[2-9]|4410)\\\\d{4}|(?:[2358][2-5][2-9]|4(?:[2-57-9][2-9]|6\\\\d))\\\\d{5}\",[8]],[\"6(?:[78][2-9]|9\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{4}\",[7]],[\"900[1-9]\\\\d\\\\d\",[6]],[\"700[2-9]\\\\d{4}\",[8]],0,0,0,0,[\"808[1-9]\\\\d\\\\d\",[6]]]],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:1[0-25]|47)\\\\d|2(?:2[2-46]|3[1-8]|4[2-69]|5[2-7]|6[1-9]|8[1-7])|3[12]2)\\\\d{5}\"],[\"(?:33|4[1349]|55|77|88|9[13-9])\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[016]\\\\d{5}\"],0,0,0,0,[\"60(?:2[78]|3[5-9]|4[02-9]|5[0-46-9]|[6-8]\\\\d|9[0-2])\\\\d{4}\"],[\"80[1-4]\\\\d{5}\"]]],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]],0,0,0,0,0,0,[[\"2\\\\d(?:[0134][25-9]|[25-9]\\\\d)\\\\d{5}\"],[\"9[1-79]\\\\d{7}\"]]],\"AR\":[\"54\",\"00\",\"(?:11|[89]\\\\d\\\\d)\\\\d{8}|[2368]\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\",0,0,[[\"3(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\\\d{5}|(?:2(?:2(?:2[59]|44|52)|3(?:26|44)|47[35]|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|(?:2(?:657|9(?:54|66))|3(?:48[27]|7(?:55|77)|8(?:65|78)))[2-8]\\\\d{5}|(?:2(?:284|3(?:02|23)|477|622|920)|3(?:4(?:46|89|92)|541))[2-7]\\\\d{5}|(?:(?:11[1-8]|670)\\\\d|2(?:2(?:0[45]|1[2-6]|3[3-6])|3(?:[06]4|7[45])|494|6(?:04|1[2-8]|[36][45]|4[3-6])|80[45]|9(?:[17][4-6]|[48][45]|9[3-6]))|3(?:364|4(?:1[2-8]|[25][4-6]|3[3-6]|84)|5(?:1[2-9]|[38][4-6])|6(?:2[45]|44)|7[069][45]|8(?:0[45]|1[2-7]|3[4-6]|5[3-6]|7[2-6]|8[3-68])))\\\\d{6}|(?:2(?:2(?:62|81)|320|9(?:42|83))|3(?:329|4(?:62|7[16])|5(?:43|64)|7(?:18|5[17])))[2-6]\\\\d{5}|2(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|(?:2(?:257|3(?:24|46|92)|9(?:01|23|64))|3(?:4(?:42|64)|5(?:25|37|4[47]|71)|7(?:35|72)|825))[3-6]\\\\d{5}|(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|25|[45][25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[035-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[14]|4[13]|5[468]|7[3-5]|8[26])|8(?:2[67]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\",[10]],[\"93(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\\\d{5}|9(?:2(?:2(?:2[59]|44|52)|3(?:26|44)|47[35]|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|9(?:2(?:657|9(?:54|66))|3(?:48[27]|7(?:55|77)|8(?:65|78)))[2-8]\\\\d{5}|9(?:2(?:284|3(?:02|23)|477|622|920)|3(?:4(?:46|89|92)|541))[2-7]\\\\d{5}|(?:675\\\\d|9(?:11[1-8]\\\\d|2(?:2(?:0[45]|1[2-6]|3[3-6])|3(?:[06]4|7[45])|494|6(?:04|1[2-8]|[36][45]|4[3-6])|80[45]|9(?:[17][4-6]|[48][45]|9[3-6]))|3(?:364|4(?:1[2-8]|[25][4-6]|3[3-6]|84)|5(?:1[2-9]|[38][4-6])|6(?:2[45]|44)|7[069][45]|8(?:0[45]|1[2-7]|3[4-6]|5[3-6]|7[2-6]|8[3-68]))))\\\\d{6}|9(?:2(?:2(?:62|81)|320|9(?:42|83))|3(?:329|4(?:62|7[16])|5(?:43|64)|7(?:18|5[17])))[2-6]\\\\d{5}|92(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|9(?:2(?:257|3(?:24|46|92)|9(?:01|23|64))|3(?:4(?:42|64)|5(?:25|37|4[47]|71)|7(?:35|72)|825))[3-6]\\\\d{5}|9(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|25|[45][25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[035-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[14]|4[13]|5[468]|7[3-5]|8[26])|8(?:2[67]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\"],[\"800\\\\d{7,8}\"],[\"60[04579]\\\\d{7}\",[10]],0,0,[\"810\\\\d{7}\",[10]]]],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"([267]\\\\d{6})$|1\",\"684$1\",0,\"684\",[[\"6846(?:22|33|44|55|77|88|9[19])\\\\d{4}\"],[\"684(?:2(?:48|5[2468]|7[26])|7(?:3[13]|70|82))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:48|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\",\"(?:31|4)6|51|6(?:485|5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1(?:11\\\\d|[2-9]\\\\d{3,11})|(?:316|463)\\\\d{3,10}|648[34]\\\\d{3,9}|(?:51|66|73)2\\\\d{3,10}|(?:2(?:1[467]|2[13-8]|5[2357]|6[1-46-8]|7[1-8]|8[124-7]|9[1458])|3(?:1[1-578]|3[23568]|4[5-7]|5[1378]|6[1-38]|8[3-68])|4(?:2[1-8]|35|7[1368]|8[2457])|5(?:2[1-8]|3[357]|4[147]|5[12578]|6[37])|6(?:13|2[1-47]|4[135-7]|5[468])|7(?:2[1-8]|35|4[13478]|5[68]|6[16-8]|7[1-6]|9[45]))\\\\d{4,10}\"],[\"6(?:485|(?:5[0-3579]|6[013-9]|[7-9]\\\\d)\\\\d)\\\\d{3,9}\",[7,8,9,10,11,12,13]],[\"800\\\\d{6,10}\",[9,10,11,12,13]],[\"(?:8[69][2-68]|9(?:0[01]|3[019]))\\\\d{6,10}\",[9,10,11,12,13]],0,0,0,0,[\"5(?:0[1-9]|17|[79]\\\\d)\\\\d{2,10}|7[28]0\\\\d{6,10}\",[5,6,7,8,9,10,11,12,13]],[\"8(?:10|2[018])\\\\d{6,10}|828\\\\d{5}\",[8,9,10,11,12,13]]]],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7}(?:\\\\d(?:\\\\d{2})?)?|8[0-24-9]\\\\d{7})|[2-478]\\\\d{8}|1\\\\d{4,7}\",[5,6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|4\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"(183[12])|0\",0,0,0,[[\"(?:(?:2(?:(?:[0-26-9]\\\\d|3[0-8]|5[0135-9])\\\\d|4(?:[02-9]\\\\d|10))|3(?:(?:[0-3589]\\\\d|6[1-9]|7[0-35-9])\\\\d|4(?:[0-578]\\\\d|90))|7(?:[013-57-9]\\\\d|2[0-8])\\\\d)\\\\d\\\\d|8(?:51(?:0(?:0[03-9]|[12479]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\\\d|7[89]|9[0-4])|[34]\\\\d\\\\d)|(?:6[0-8]|[78]\\\\d)\\\\d{3}|9(?:[02-9]\\\\d{3}|1(?:(?:[0-58]\\\\d|6[0135-9])\\\\d|7(?:0[0-24-9]|[1-9]\\\\d)|9(?:[0-46-9]\\\\d|5[0-79])))))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"163\\\\d{2,6}\",[5,6,7,8,9]],[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]],0,0,0,0,0,0,[[\"5(?:2\\\\d|8[1-9])\\\\d{4}\"],[\"(?:290|5[69]\\\\d|6(?:[03]0|22|4[0-2]|[69]\\\\d)|7(?:[34]\\\\d|7[07])|9(?:6[45]|9[4-8]))\\\\d{4}\"],[\"800\\\\d{4}\"],[\"900\\\\d{4}\"],0,0,0,0,[\"(?:28\\\\d|501)\\\\d{4}\"]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",[[\"18[1-8]\\\\d{3,6}\",[6,7,8,9]],[\"4946\\\\d{2,6}|(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"20\\\\d{4,8}|60[12]\\\\d{5,6}|7(?:099\\\\d{4,5}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d|(?:606|7(?:0[78]|1|3\\\\d))\\\\d{7}|(?:10|29|3[09]|70[1-5]\\\\d)\\\\d{4,8}\"]],\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[28]|2|365|46\",\"1[28]|2|365[45]|46\",\"1[28]|2|365(?:4|5[02])|46\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[13-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[12]428|3655[02])\\\\d{4}|(?:2(?:22[0-79]|63[0-28])|3654)\\\\d{5}|(?:(?:1[28]|46)\\\\d|2(?:[014-6]2|[23]3))\\\\d{6}\"],[\"36554\\\\d{4}|(?:[16]0|4[04]|5[015]|7[07]|99)\\\\d{7}\"],[\"88\\\\d{7}\"],[\"900200\\\\d{3}\"]]],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:[05-79][2-9]|1[4579]|[23][24-9]|4[2-4689]|8[2457-9])|49[2-579]|5(?:0[2-49]|[13][2-9]|[268][2-4679]|4[4689]|5[2-79]|7[2-69]|9[2-4689]))\\\\d{5}\",[8]],[\"6040\\\\d{5}|6(?:03|[1-356]|44|7\\\\d)\\\\d{6}\"],[\"8[08]\\\\d{6}\",[8]],[\"9[0246]\\\\d{6}\",[8]],0,0,[\"703[235]0\\\\d{3}|70(?:2[0-5]|3[0146]|[56]0)\\\\d{4}\",[8]],0,0,[\"8[12]\\\\d{6}\",[8]]]],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"246$1\",0,\"246\",[[\"246521[0369]\\\\d{3}|246(?:2(?:2[78]|7[0-4])|4(?:1[024-6]|2\\\\d|3[2-9])|5(?:20|[34]\\\\d|54|7[1-3])|6(?:2\\\\d|38)|7[35]7|9(?:1[89]|63))\\\\d{4}\"],[\"246(?:(?:2(?:[3568]\\\\d|4[0-57-9])|3(?:5[2-9]|6[0-6])|4(?:46|5\\\\d)|69[5-7]|8(?:[2-5]\\\\d|83))\\\\d|52(?:1[147]|20))\\\\d{3}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:246976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"246(?:292|367|4(?:1[7-9]|3[01]|4[47-9]|67)|7(?:1[2-9]|2\\\\d|3[016]|53))\\\\d{4}\"],0,[\"24631\\\\d{5}\"]]],\"BD\":[\"880\",\"00\",\"[1-469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-79]\\\\d{8}|[2-9]\\\\d{7}|[3-9]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-8]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:[15]|28|4[14])|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]|2[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4(?:31\\\\d\\\\d|423)|5222)\\\\d{3}(?:\\\\d{2})?|8332[6-9]\\\\d\\\\d|(?:3(?:03[56]|224)|4(?:22[25]|653))\\\\d{3,4}|(?:3(?:42[47]|529|823)|4(?:027|525|65(?:28|8))|562|6257|7(?:1(?:5[3-5]|6[12]|7[156]|89)|22[589]56|32|42675|52(?:[25689](?:56|8)|[347]8)|71(?:6[1267]|75|89)|92374)|82(?:2[59]|32)56|9(?:03[23]56|23(?:256|373)|31|5(?:1|2[4589]56)))\\\\d{3}|(?:3(?:02[348]|22[35]|324|422)|4(?:22[67]|32[236-9]|6(?:2[46]|5[57])|953)|5526|6(?:024|6655)|81)\\\\d{4,5}|(?:2(?:7(?:1[0-267]|2[0-289]|3[0-29]|4[01]|5[1-3]|6[013]|7[0178]|91)|8(?:0[125]|1[1-6]|2[0157-9]|3[1-69]|41|6[1-35]|7[1-5]|8[1-8]|9[0-6])|9(?:0[0-2]|1[0-4]|2[568]|3[3-6]|5[5-7]|6[0136-9]|7[0-7]|8[014-9]))|3(?:0(?:2[025-79]|3[2-4])|181|22[12]|32[2356]|824)|4(?:02[09]|22[348]|32[045]|523|6(?:27|54))|666(?:22|53)|7(?:22[57-9]|42[56]|82[35])8|8(?:0[124-9]|2(?:181|2[02-4679]8)|4[12]|[5-7]2)|9(?:[04]2|2(?:2|328)|81))\\\\d{4}|(?:2(?:[23]\\\\d|[45])\\\\d\\\\d|3(?:1(?:2[5-7]|[5-7])|425|822)|4(?:033|1\\\\d|[257]1|332|4(?:2[246]|5[25])|6(?:2[35]|56|62)|8(?:23|54)|92[2-5])|5(?:02[03489]|22[457]|32[35-79]|42[46]|6(?:[18]|53)|724|826)|6(?:023|2(?:2[2-5]|5[3-5]|8)|32[3478]|42[34]|52[47]|6(?:[18]|6(?:2[34]|5[24]))|[78]2[2-5]|92[2-6])|7(?:02|21\\\\d|[3-589]1|6[12]|72[24])|8(?:217|3[12]|[5-7]1)|9[24]1)\\\\d{5}|(?:(?:3[2-8]|5[2-57-9]|6[03-589])1|4[4689][18])\\\\d{5}|[59]1\\\\d{5}\"],[\"(?:1[13-9]\\\\d|644)\\\\d{7}|(?:3[78]|44|66)[02-9]\\\\d{7}\",[10]],[\"80[03]\\\\d{7}\",[10]],0,0,0,0,0,[\"96(?:0[469]|1[0-47]|3[389]|43|6[69]|7[78])\\\\d{6}\",[10]]]],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"80[2-8]\\\\d{5}|(?:1[0-69]|[23][2-8]|4[23]|5\\\\d|6[013-57-9]|71|8[1-79]|9[2-4])\\\\d{6}\",[8]],[\"4[5-9]\\\\d{7}\",[9]],[\"800[1-9]\\\\d{4}\",[8]],[\"(?:70(?:2[0-57]|3[04-7]|44|6[04-69]|7[0579])|90\\\\d\\\\d)\\\\d{4}\",[8]],0,0,[\"78(?:0[578]|1[014-8]|2[25]|3[15-8]|48|5[05]|60|7[06-8]|9\\\\d)\\\\d{4}\",[8]],0,0,[\"7879\\\\d{4}\",[8]]]],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:49|5[23]|6[5-7]|9[016-9])|4(?:4[569]|5[4-6]|6[5-7]|7[0179])|5(?:[34]\\\\d|50|6[5-7]))\\\\d{4}\"],[\"(?:0[1-7]|5[0-8]|[67]\\\\d)\\\\d{6}\"]]],\"BG\":[\"359\",\"00\",\"00800\\\\d{7}|[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9,12],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2\\\\d{5,7}|(?:43[1-6]|70[1-9])\\\\d{4,5}|(?:[36]\\\\d|4[124-7]|[57][1-9]|8[1-6]|9[1-7])\\\\d{5,6}\",[6,7,8]],[\"(?:43[07-9]|99[69]\\\\d)\\\\d{5}|(?:8[7-9]|98)\\\\d{7}\",[8,9]],[\"(?:00800\\\\d\\\\d|800)\\\\d{5}\",[8,12]],[\"90\\\\d{6}\",[8]],0,0,0,0,0,[\"700\\\\d{5}\",[8]]]],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[02-4679]\"]]],0,0,0,0,0,0,[[\"(?:1(?:3[1356]|6[0156]|7\\\\d)\\\\d|6(?:1[16]\\\\d|500|6(?:0\\\\d|3[12]|44|55|7[7-9]|88)|9[69][69])|7(?:[07]\\\\d\\\\d|1(?:11|78)))\\\\d{4}\"],[\"(?:3(?:[0-79]\\\\d|8[0-57-9])\\\\d|6(?:3(?:00|33|6[16])|441|6(?:3[03-9]|[69]\\\\d|7[0-689])))\\\\d{4}\"],[\"8[02369]\\\\d{6}\"],[\"(?:87|9[0-8])\\\\d{6}\"],0,0,0,0,0,[\"84\\\\d{6}\"]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]],0,0,0,0,0,0,[[\"(?:22|31)\\\\d{6}\"],[\"(?:29|6[124-9]|7[125-9])\\\\d{6}\"]]],\"BJ\":[\"229\",\"00\",\"(?:01\\\\d|[24-689])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"0\"]]],0,0,0,0,0,0,[[\"2090\\\\d{4}|(?:012\\\\d\\\\d|2(?:02|1[037]|2[45]|3[68]|4\\\\d))\\\\d{5}\"],[\"(?:01(?:2[5-9]|[4-69]\\\\d)|4[0-8]|[56]\\\\d|9[013-9])\\\\d{6}\"],0,0,0,0,[\"81\\\\d{6}\",[8]],0,[\"857[58]\\\\d{4}\",[8]]]],\"BL\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|3[3-7]|5[12]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"441$1\",0,\"441\",[[\"441(?:[46]\\\\d\\\\d|5(?:4\\\\d|60|89))\\\\d{4}\"],[\"441(?:[2378]\\\\d|5[0-39]|9[02])\\\\d{5}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[[\"22[0-7]\\\\d{4}|(?:2[013-9]|[34]\\\\d|5[0-25-9])\\\\d{5}\"],[\"(?:22[89]|[78]\\\\d\\\\d)\\\\d{4}\"],0,0,0,0,0,0,[\"5[34]\\\\d{5}\"]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"8001\\\\d{5}|(?:[2-467]\\\\d|50)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[235]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\",0,0,0,[[\"(?:2(?:2\\\\d\\\\d|5(?:11|[258]\\\\d|9[67])|6(?:12|2\\\\d|9[34])|8(?:2[34]|39|62))|3(?:3\\\\d\\\\d|4(?:6\\\\d|8[24])|8(?:25|42|5[257]|86|9[25])|9(?:[27]\\\\d|3[2-4]|4[248]|5[24]|6[2-6]))|4(?:4\\\\d\\\\d|6(?:11|[24689]\\\\d|72)))\\\\d{4}\",[8]],[\"[67]\\\\d{7}\",[8]],[\"8001[07]\\\\d{4}\",[9]],0,0,0,0,0,[\"50\\\\d{6}\",[8]]]],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\",[[\"(?:318[023]|41(?:6[023]|70)|7(?:1[578]|2[05]|50)\\\\d)\\\\d{3}\"],[\"(?:31(?:8[14-8]|9[14578])|416[14-9]|7(?:0[01]|7[07]|8\\\\d|9[056])\\\\d)\\\\d{3}\"]]],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"[1-467]\\\\d{9,10}|55[0-46-9]\\\\d{8}|[34]\\\\d{7}|55\\\\d{7,8}|(?:5[0-46-9]|[89]\\\\d)\\\\d{7,9}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37|86)\",\"300|4(?:0(?:0|20)|370|864)\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\",0,0,[[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-5]\\\\d{7}\",[10]],[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])(?:7|9\\\\d)\\\\d{7}\",[10,11]],[\"800\\\\d{6,7}\",[9,10]],[\"[59]00\\\\d{6,7}\",[9,10]],0,0,0,0,0,[\"(?:30[03]\\\\d{3}|4(?:0(?:0\\\\d|20)|370|864))\\\\d{4}|300\\\\d{5}\",[8,10]]]],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([3-8]\\\\d{6})$|1\",\"242$1\",0,\"242\",[[\"242(?:3(?:02|[236][1-9]|4[0-24-9]|5[0-68]|7[347]|8[0-4]|9[2-467])|461|502|6(?:0[1-5]|12|2[013]|[45]0|7[67]|8[78]|9[89])|7(?:02|88))\\\\d{4}\"],[\"242(?:3(?:5[79]|7[56]|95)|4(?:[23][1-9]|4[1-35-9]|5[1-8]|6[2-8]|7\\\\d|81)|5(?:2[45]|3[35]|44|5[1-46-9]|65|77)|6[34]6|7(?:27|38)|8(?:0[1-9]|1[02-9]|2\\\\d|3[0-4]|[89]9))\\\\d{4}\"],[\"242300\\\\d{4}|8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"242225\\\\d{4}\"]]],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]],0,0,0,0,0,0,[[\"(?:2[3-6]|[34][5-7]|5[236]|6[2-46]|7[246]|8[2-4])\\\\d{5}\",[7]],[\"(?:1[67]|77)\\\\d{6}\",[8]]]],\"BW\":[\"267\",\"00\",\"(?:0800|(?:[37]|800)\\\\d)\\\\d{6}|(?:[2-6]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-6]|3[15-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"(?:2(?:4[0-48]|6[0-24]|9[0578])|3(?:1[0-35-9]|55|[69]\\\\d|7[013]|81)|4(?:6[03]|7[1267]|9[0-5])|5(?:3[03489]|4[0489]|7[1-47]|88|9[0-49])|6(?:2[1-35]|5[149]|8[013467]))\\\\d{4}\",[7]],[\"(?:321|7[1-8]\\\\d)\\\\d{5}\",[8]],[\"(?:0800|800\\\\d)\\\\d{6}\",[10]],[\"90\\\\d{5}\",[7]],0,0,0,0,[\"79(?:1(?:[0-2]\\\\d|3[0-8])|2[0-7]\\\\d)\\\\d{3}\",[8]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,[[\"(?:1(?:5(?:1[1-5]|[24]\\\\d|6[2-4]|9[1-7])|6(?:[235]\\\\d|4[1-7])|7\\\\d\\\\d)|2(?:1(?:[246]\\\\d|3[0-35-9]|5[1-9])|2(?:[235]\\\\d|4[0-8])|3(?:[26]\\\\d|3[02-79]|4[024-7]|5[03-7])))\\\\d{5}\",[9]],[\"(?:2(?:5[5-79]|9[1-9])|(?:33|44)\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{3,7}|8(?:0[13]|20\\\\d)\\\\d{7}\"],[\"(?:810|902)\\\\d{7}\",[10]],0,0,0,0,[\"249\\\\d{6}\",[9]]],\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]],0,0,0,0,0,0,[[\"(?:2(?:[02]\\\\d|36|[68]0)|[3-58](?:[02]\\\\d|[68]0)|7(?:[02]\\\\d|32|[68]0))\\\\d{4}\",[7]],[\"6[0-35-7]\\\\d{5}\",[7]],[\"0800\\\\d{7}\",[11]]]],\"CA\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[7,10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|5[07]|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|7[39])|9(?:0[25]|42))[2-9]\\\\d{6}\",[10]],[\"\",[10]],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\",[10]],[\"900[2-9]\\\\d{6}\",[10]],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|(?:5(?:2[125-9]|33|44|66|77|88)|6(?:22|33))[2-9]\\\\d{6}\",[10]],0,[\"310\\\\d{4}\",[7]],0,[\"600[2-9]\\\\d{6}\",[10]]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CD\":[\"243\",\"00\",\"(?:(?:[189]|5\\\\d)\\\\d|2)\\\\d{7}|[1-68]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:12|573)\\\\d\\\\d|276)\\\\d{5}|[1-6]\\\\d{6}\"],[\"88\\\\d{5}|(?:8[0-69]|9[017-9])\\\\d{7}\",[7,9]]]],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]],0,0,0,0,0,0,[[\"2[12]\\\\d{6}\"],[\"7[024-7]\\\\d{6}\"],0,[\"8776\\\\d{4}\"]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]],0,0,0,0,0,0,[[\"222[1-589]\\\\d{5}\"],[\"026(?:1[0-5]|6[6-9])\\\\d{4}|0(?:[14-6]\\\\d\\\\d|2(?:40|5[5-8]|6[07-9]))\\\\d{5}\"],0,[\"80[0-2]\\\\d{6}\"]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[12467]|3[1-4]|4[134]|5[256]|6[12]|[7-9]1)\\\\d{7}\",[9]],[\"(?:6[89]|7[235-9])\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"90[016]\\\\d{6}\",[9]],[\"878\\\\d{6}\",[9]],[\"860\\\\d{9}\",[12]],[\"5[18]\\\\d{7}\",[9]],[\"74[0248]\\\\d{6}\",[9]],0,[\"84[0248]\\\\d{6}\",[9]]]],\"CI\":[\"225\",\"00\",\"[02]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d)(\\\\d{5})\",\"$1 $2 $3 $4\",[\"2\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"0\"]]],0,0,0,0,0,0,[[\"2(?:[15]\\\\d{3}|7(?:2(?:0[23]|1[2357]|2[245]|3[45]|4[3-5])|3(?:06|1[69]|[2-6]7)))\\\\d{5}\"],[\"0[157]\\\\d{8}\"]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[13-7]|4[1-5])\\\\d{3}\"],[\"[578]\\\\d{4}\"]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"219\",\"2196\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[1-36]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]],0,0,0,0,0,0,[[\"2(?:1982[0-6]|3314[05-9])\\\\d{3}|(?:2(?:1(?:160|962)|3(?:2\\\\d\\\\d|3(?:[03467]\\\\d|1[0-35-9]|2[1-9]|5[0-24-9]|8[0-3])|600)|646[59])|80[1-9]\\\\d\\\\d|9(?:3(?:[0-57-9]\\\\d\\\\d|6(?:0[02-9]|[1-9]\\\\d))|6(?:[0-8]\\\\d\\\\d|9(?:[02-79]\\\\d|1[05-9]))|7[1-9]\\\\d\\\\d|9(?:[03-9]\\\\d\\\\d|1(?:[0235-9]\\\\d|4[0-24-9])|2(?:[0-79]\\\\d|8[0-46-9]))))\\\\d{4}|(?:22|3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|8[1-9]|9[2458])\\\\d{7}\",[9]],[\"\",[9]],[\"(?:123|8)00\\\\d{6}\",[9,11]],0,0,0,0,0,[\"44\\\\d{7}\",[9]],[\"600\\\\d{7,8}\",[10,11]]]],\"CM\":[\"237\",\"00\",\"[26]\\\\d{8}|88\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]|88\"]]],0,0,0,0,0,0,[[\"2(?:22|33)\\\\d{6}\",[9]],[\"(?:24[23]|6(?:[25-9]\\\\d|40))\\\\d{6}\",[9]],[\"88\\\\d{6,7}\"]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79)\\\\d\\\\d00\",\"(?:(?:1[03-689]|2\\\\d)\\\\d\\\\d|6)\\\\d{8}|1\\\\d{10}|[126]\\\\d{6}(?:\\\\d(?:\\\\d{2})?)?|86\\\\d{5,6}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{5,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]|3(?:[157]|35|49|9[1-68])|4(?:1[124-9]|2[179]|6[47-9]|7|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:07|1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3|4[13]|5[1-5]|7[0-79]|9[0-35-9])|(?:4[35]|59|85)[1-9]\",\"(?:10|2[0-57-9])(?:1[02]|9[56])|8078|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))1\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|80781|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))12\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|807812|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\",\"10(?:1(?:0|23)|9[56])|2[0-57-9](?:1(?:00|23)|9[56])|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:1[124-9]|2[179]|[35][1-9]|6[47-9]|7\\\\d|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:078|1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))123\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"(1(?:[12]\\\\d|79)\\\\d\\\\d)|0\",0,0,0,[[\"(?:10(?:[02-79]\\\\d\\\\d|[18](?:0[1-9]|[1-9]\\\\d))|2(?:[02-57-9]\\\\d{3}|1(?:[18](?:0[1-9]|[1-9]\\\\d)|[2-79]\\\\d\\\\d))|(?:41[03]|8078|9(?:78|94))\\\\d\\\\d)\\\\d{5}|(?:10|2[0-57-9])(?:1(?:00|23)\\\\d\\\\d|95\\\\d{3,4})|(?:41[03]|9(?:78|94))(?:100\\\\d\\\\d|95\\\\d{3,4})|8078123|(?:43[35]|754|851)\\\\d{7,8}|(?:43[35]|754|851)(?:1(?:00\\\\d|23)\\\\d|95\\\\d{3,4})|(?:3(?:11|7[179])|4(?:[15]1|3[12])|5(?:1\\\\d|2[37]|3[12]|51|7[13-79]|9[15])|7(?:[39]1|5[57]|6[09])|8(?:71|98))(?:[02-8]\\\\d{7}|1(?:0(?:0\\\\d\\\\d(?:\\\\d{3})?|[1-9]\\\\d{5})|[13-9]\\\\d{6}|2(?:[0-24-9]\\\\d{5}|3\\\\d(?:\\\\d{4})?))|9(?:[0-46-9]\\\\d{6}|5\\\\d{3}(?:\\\\d(?:\\\\d{2})?)?))|(?:3(?:1[02-9]|35|49|5\\\\d|7[02-68]|9[1-68])|4(?:1[24-9]|2[179]|3[46-9]|5[2-9]|6[47-9]|7\\\\d|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[17]\\\\d|2[248]|3[04-9]|4[3-6]|5[0-3689]|6[2368]|9[02-9])|8(?:1[236-8]|2[5-7]|3\\\\d|5[2-9]|7[02-9]|8[36-8]|9[1-7])|9(?:0[1-3689]|1[1-79]|3\\\\d|4[13]|5[1-5]|7[0-79]|9[0-35-9]))(?:[02-8]\\\\d{6}|1(?:0(?:0\\\\d\\\\d(?:\\\\d{2})?|[1-9]\\\\d{4})|[13-9]\\\\d{5}|2(?:[0-24-9]\\\\d{4}|3\\\\d(?:\\\\d{3})?))|9(?:[0-46-9]\\\\d{5}|5\\\\d{3,5}))\",[7,8,9,10,11]],[\"1740[0-5]\\\\d{6}|1(?:[38]\\\\d|4[57]|[59][0-35-9]|6[25-7]|7[0-35-8])\\\\d{8}\",[11]],[\"(?:(?:10|21)8|8)00\\\\d{7}\",[10,12]],[\"16[08]\\\\d{5}\",[8]],0,0,0,0,0,[\"10(?:10\\\\d{4}|96\\\\d{3,4})|400\\\\d{7}|950\\\\d{7,8}|(?:2[0-57-9]|3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))96\\\\d{3,4}\",[7,8,9,10,11]]],\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:46|60\\\\d\\\\d)\\\\d{6}|(?:1\\\\d|[39])\\\\d{9}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"46\"]],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"6|90\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3[0-357]|9[14]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\",0,0,0,[[\"601055(?:[0-4]\\\\d|50)\\\\d\\\\d|6010(?:[0-4]\\\\d|5[0-4])\\\\d{4}|(?:46|60(?:[18][1-9]|[24-7][2-9]))\\\\d{6}\",[8,10]],[\"333301[0-5]\\\\d{3}|3333(?:00|2[5-9]|[3-9]\\\\d)\\\\d{4}|(?:3(?:(?:0[0-5]|1\\\\d|5[01]|70)\\\\d|2(?:[0-3]\\\\d|4[1-9])|3(?:00|3[0-24-9]))|9(?:101|408))\\\\d{6}\",[10]],[\"1800\\\\d{7}\",[11]],[\"(?:19(?:0[01]|4[78])|901)\\\\d{7}\",[10,11]]]],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|(?:[24-8]\\\\d{3}|3005)\\\\d{4}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\",0,0,0,[[\"210[7-9]\\\\d{4}|2(?:[024-7]\\\\d|1[1-9])\\\\d{5}\",[8]],[\"(?:3005\\\\d|6500[01])\\\\d{3}|(?:5[07]|6[0-4]|7[0-3]|8[3-9])\\\\d{6}\",[8]],[\"800\\\\d{7}\",[10]],[\"90[059]\\\\d{7}\",[10]],0,0,0,0,[\"(?:210[0-6]|4\\\\d{3}|5100)\\\\d{4}\",[8]]]],\"CU\":[\"53\",\"119\",\"(?:[2-7]|8\\\\d\\\\d)\\\\d{7}|[2-47]\\\\d{6}|[34]\\\\d{5}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[56]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3[23]|4[89])\\\\d{4,6}|(?:31|4[36]|8(?:0[25]|78)\\\\d)\\\\d{6}|(?:2[1-4]|4[1257]|7\\\\d)\\\\d{5,6}\"],[\"(?:5\\\\d|6[2-4])\\\\d{6}\",[8]],[\"800\\\\d{7}\",[10]],0,0,0,0,0,0,[\"807\\\\d{7}\",[10]]]],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]],0,0,0,0,0,0,[[\"2(?:2[1-7]|3[0-8]|4[12]|5[1256]|6\\\\d|7[1-3]|8[1-5])\\\\d{4}\"],[\"(?:36|5[1-389]|9\\\\d)\\\\d{5}\"],[\"800\\\\d{4}\"],0,0,0,0,0,[\"(?:3[3-5]|4[356])\\\\d{5}\"]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\",[[\"9(?:4(?:3[0-5]|4[14]|6\\\\d)|50\\\\d|7(?:2[014]|3[02-9]|4[4-9]|6[357]|77|8[7-9])|8(?:3[39]|[46]\\\\d|7[01]|8[57-9]))\\\\d{4}\"],[\"953[01]\\\\d{4}|9(?:5[12467]|6[5-9])\\\\d{5}\"],0,0,0,0,0,[\"955\\\\d{5}\",[8]],0,[\"60[0-2]\\\\d{4}\",[7]]]],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{8}(?:\\\\d{2})?|8[0-24-9]\\\\d{7})|[148]\\\\d{8}|1\\\\d{5,7}\",[6,7,8,9,10,12],0,\"0\",0,\"([59]\\\\d{7})$|0\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"4(?:79[01]|83[0-389]|94[0-478])\\\\d{5}|4(?:[0-36]\\\\d|4[047-9]|5[0-25-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"14(?:5(?:1[0458]|[23][458])|71\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{6}(?:\\\\d{2})?|45[0-4]\\\\d{3})|13\\\\d{4}\",[6,8,10,12]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]],0,0,0,0,0,0,[[\"2[2-6]\\\\d{6}\"],[\"9(?:10|[4-79]\\\\d)\\\\d{5}\"],[\"800\\\\d{5}\"],[\"90[09]\\\\d{5}\"],[\"700\\\\d{5}\"],0,[\"(?:50|77)\\\\d{6}\"],0,0,[\"80[1-9]\\\\d{5}\"]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"96\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[1257-9]|4[16-9]|5[13-9])\\\\d{7}\",[9]],[\"(?:60[1-8]\\\\d|7(?:0(?:[2-5]\\\\d|60)|19[0-2]|[2379]\\\\d\\\\d))\\\\d{5}\",[9]],[\"800\\\\d{6}\",[9]],[\"9(?:0[05689]|76)\\\\d{6}\",[9]],[\"70[01]\\\\d{6}\",[9]],[\"9(?:3\\\\d{9}|6\\\\d{7,10})\"],[\"9(?:5\\\\d|7[2-4])\\\\d{6}\",[9]],0,[\"9[17]0\\\\d{6}\",[9]],[\"8[134]\\\\d{7}\",[9]]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[34]0|69|8\\\\d)\\\\d\\\\d?|49(?:37|49|60|7[089]|9\\\\d)\\\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\\\d{1,8}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}|49(?:[015]\\\\d|2[13]|31|[46][1-8])\\\\d{1,9}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[03568]\",\"15(?:[0568]|31)\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"32\\\\d{9,11}|49[1-6]\\\\d{10}|322\\\\d{6}|49[0-7]\\\\d{3,9}|(?:[34]0|[68]9)\\\\d{3,13}|(?:2(?:0[1-689]|[1-3569]\\\\d|4[0-8]|7[1-7]|8[0-7])|3(?:[3569]\\\\d|4[0-79]|7[1-7]|8[1-8])|4(?:1[02-9]|[2-48]\\\\d|5[0-6]|6[0-8]|7[0-79])|5(?:0[2-8]|[124-6]\\\\d|[38][0-8]|[79][0-7])|6(?:0[02-9]|[1-358]\\\\d|[47][0-8]|6[1-9])|7(?:0[2-8]|1[1-9]|[27][0-7]|3\\\\d|[4-6][0-8]|8[0-5]|9[013-7])|8(?:0[2-9]|1[0-79]|2\\\\d|3[0-46-9]|4[0-6]|5[013-9]|6[1-8]|7[0-8]|8[0-24-6])|9(?:0[6-9]|[1-4]\\\\d|[589][0-7]|6[0-8]|7[0-467]))\\\\d{3,12}\",[5,6,7,8,9,10,11,12,13,14,15]],[\"1(?:(?:5(?:[0-25-9]\\\\d\\\\d|310)|7[26]\\\\d\\\\d)\\\\d{6}|6[023]\\\\d{7,8})|17\\\\d{8}\",[10,11]],[\"800\\\\d{7,12}\",[10,11,12,13,14,15]],[\"(?:137[7-9]|900(?:[135]|9\\\\d))\\\\d{6}\",[10,11]],[\"700\\\\d{8}\",[11]],[\"1(?:6(?:013|255|399)|7(?:(?:[015]1|[69]3)3|[2-4]55|[78]99))\\\\d{7,8}|15(?:(?:[03-68]00|113)\\\\d|2\\\\d55|7\\\\d99|9\\\\d33)\\\\d{7}\",[12,13]],[\"18(?:1\\\\d{5,11}|[2-9]\\\\d{8})\",[8,9,10,11,12,13,14]],[\"16(?:4\\\\d{1,10}|[89]\\\\d{1,11})\",[4,5,6,7,8,9,10,11,12,13,14]],0,[\"180\\\\d{5,11}|13(?:7[1-6]\\\\d\\\\d|8)\\\\d{4}\",[7,8,9,10,11,12,13,14]]]],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]],0,0,0,0,0,0,[[\"2(?:1[2-5]|7[45])\\\\d{5}\"],[\"77\\\\d{6}\"]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:[0-59][1-9]|[6-8]\\\\d)|3(?:[0-3][1-9]|4[13]|5[1-58]|6[1347-9]|7\\\\d|8[1-8]|9[1-79])|4(?:[0-25][1-9]|[34][2-9]|6[13-579]|7[13579]|8[1-47]|9[127])|5(?:[0-36][1-9]|4[146-9]|5[3-57-9]|7[568]|8[1-358]|9[1-69])|6(?:[0135][1-9]|2[1-68]|4[2-8]|6[1689]|[78]\\\\d|9[15689])|7(?:[0-69][1-9]|7[3-9]|8[147])|8(?:[16-9][1-9]|2[1-58])|9(?:[1-47-9][1-9]|6\\\\d))\\\\d{5}\"],[\"(?:2[6-8]|37|6[78]|96)\\\\d{6}|(?:2[0-59]|3[0-689]|[457]\\\\d|6[0-69]|8[126-9]|9[1-47-9])[1-9]\\\\d{5}\"],[\"80\\\\d{6}\"],[\"90\\\\d{6}\"]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"767$1\",0,\"767\",[[\"767(?:2(?:55|66)|4(?:2[01]|4[0-25-9])|50[0-4])\\\\d{4}\"],[\"767(?:2(?:[2-4689]5|7[5-7])|31[5-7]|61[1-8]|70[1-6])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8001|8[024]9\",[[\"8(?:[04]9[2-9]\\\\d\\\\d|29(?:2(?:[0-59]\\\\d|6[04-9]|7[0-27]|8[0237-9])|3(?:[0-35-9]\\\\d|4[7-9])|[45]\\\\d\\\\d|6(?:[0-27-9]\\\\d|[3-5][1-9]|6[0135-8])|7(?:0[013-9]|[1-37]\\\\d|4[1-35689]|5[1-4689]|6[1-57-9]|8[1-79]|9[1-8])|8(?:0[146-9]|1[0-48]|[248]\\\\d|3[1-79]|5[01589]|6[013-68]|7[124-8]|9[0-8])|9(?:[0-24]\\\\d|3[02-46-9]|5[0-79]|60|7[0169]|8[57-9]|9[02-9])))\\\\d{4}\"],[\"8[024]9[2-9]\\\\d{6}\"],[\"8(?:00(?:14|[2-9]\\\\d)|(?:33|44|55|66|77|88)[2-9]\\\\d)\\\\d{5}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"9619\\\\d{5}|(?:1\\\\d|2[013-79]|3[0-8]|4[013-689])\\\\d{6}\"],[\"(?:5(?:4[0-29]|5\\\\d|6[0-3])|6(?:[569]\\\\d|7[0-6])|7[7-9]\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"80[3-689]1\\\\d{5}\",[9]],0,0,0,0,[\"98[23]\\\\d{6}\",[9]],[\"80[12]1\\\\d{5}\",[9]]]],\"EC\":[\"593\",\"00\",\"1\\\\d{9,10}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"[2-7][2-7]\\\\d{6}\",[8]],[\"964[0-2]\\\\d{5}|9(?:39|[57][89]|6[0-36-9]|[89]\\\\d)\\\\d{6}\",[9]],[\"1800\\\\d{7}|1[78]00\\\\d{6}\",[10,11]],0,0,0,0,0,[\"[2-7]890\\\\d{4}\",[8]]]],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d|90)\\\\d{5}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-49])\",\"[45]|8(?:00[1-9]|[1-49])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"(?:3[23589]|4[3-8]|6\\\\d|7[1-9]|88)\\\\d{5}\",[7]],[\"(?:5\\\\d{5}|8(?:1(?:0(?:0(?:00|[178]\\\\d)|[3-9]\\\\d\\\\d)|(?:1(?:0[2-6]|1\\\\d)|(?:2[0-59]|[3-79]\\\\d)\\\\d)\\\\d)|2(?:0(?:0(?:00|4\\\\d)|(?:19|[2-7]\\\\d)\\\\d)|(?:(?:[124-69]\\\\d|3[5-9])\\\\d|7(?:[0-79]\\\\d|8[13-9])|8(?:[2-6]\\\\d|7[01]))\\\\d)|[349]\\\\d{4}))\\\\d\\\\d|5(?:(?:[02]\\\\d|5[0-478])\\\\d|1(?:[0-8]\\\\d|95)|6(?:4[0-4]|5[1-589]))\\\\d{3}\",[7,8]],[\"800(?:(?:0\\\\d\\\\d|1)\\\\d|[2-9])\\\\d{3}\"],[\"(?:40\\\\d\\\\d|900)\\\\d{4}\",[7,8]],[\"70[0-2]\\\\d{5}\",[8]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{8})\",\"$1 $2\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"13[23]\\\\d{6}|(?:15|57)\\\\d{6,7}|(?:2\\\\d|3|4[05-8]|5[05]|6[24-689]|8[2468]|9[235-7])\\\\d{7}\",[8,9]],[\"1[0-25]\\\\d{8}\",[10]],[\"800\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]]]],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\",[[\"528[89]\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[0167]\\\\d|2[0-467]|5[0-3]|8[0-7]))\\\\d{6}\"],[\"80[0-7]\\\\d{6}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"(?:592(?:4[0-2]|93)|80[89]\\\\d\\\\d)\\\\d{4}\"]]],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1[12568]|[24]0|55|6[146])|8\\\\d\\\\d)\\\\d{4}\"],[\"(?:17[1-3]|7\\\\d\\\\d)\\\\d{4}\"]]],\"ES\":[\"34\",\"00\",\"[5-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]],0,0,0,0,0,0,[[\"96906(?:0[0-8]|1[1-9]|[2-9]\\\\d)\\\\d\\\\d|9(?:69(?:0[0-57-9]|[1-9]\\\\d)|73(?:[0-8]\\\\d|9[1-9]))\\\\d{4}|(?:8(?:[1356]\\\\d|[28][0-8]|[47][1-9])|9(?:[135]\\\\d|[268][0-8]|4[1-9]|7[124-9]))\\\\d{6}\"],[\"(?:590[16]00\\\\d|9(?:6906(?:09|10)|7390\\\\d\\\\d))\\\\d\\\\d|(?:6\\\\d|7[1-48])\\\\d{7}\"],[\"[89]00\\\\d{6}\"],[\"80[367]\\\\d{6}\"],[\"70\\\\d{7}\"],0,[\"51\\\\d{7}\"],0,0,[\"90[12]\\\\d{6}\"]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-579]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-579]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"11667[01]\\\\d{3}|(?:11(?:1(?:1[124]|2[2-7]|3[1-5]|5[5-8]|8[6-8])|2(?:13|3[6-8]|5[89]|7[05-9]|8[2-6])|3(?:2[01]|3[0-289]|4[1289]|7[1-4]|87)|4(?:1[69]|3[2-49]|4[0-3]|6[5-8]|7\\\\d)|5(?:1[578]|44|5[0-4])|6(?:1[578]|2[69]|39|4[5-7]|5[0-5]|6[0-59]|8[015-8]))|2(?:2(?:11[1-9]|22[0-7]|33\\\\d|44[1467]|66[1-68])|5(?:11[124-6]|33[2-8]|44[1467]|55[14]|66[1-3679]|77[124-79]|880))|3(?:3(?:11[0-46-8]|(?:22|55)[0-6]|33[0134689]|44[04]|66[01467])|4(?:44[0-8]|55[0-69]|66[0-3]|77[1-5]))|4(?:6(?:119|22[0-24-7]|33[1-5]|44[13-69]|55[14-689]|660|88[1-4])|7(?:(?:11|22)[1-9]|33[13-7]|44[13-6]|55[1-689]))|5(?:7(?:227|55[05]|(?:66|77)[14-8])|8(?:11[149]|22[013-79]|33[0-68]|44[013-8]|550|66[1-5]|77\\\\d)))\\\\d{4}\"],[\"700[1-9]\\\\d{5}|(?:7(?:0[1-9]|1[0-8]|22|77|86|99)|9\\\\d\\\\d)\\\\d{6}\"]]],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{5})\",\"$1\",[\"20[2-59]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"(?:[1-3]0|[68])0|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[14]|2[09]|50|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"(?:19|[2568])[1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",[[\"1[3-7][1-8]\\\\d{3,6}|(?:19[1-8]|[23568][1-8]\\\\d|9(?:00|[1-8]\\\\d))\\\\d{2,6}\",[5,6,7,8,9]],[\"4946\\\\d{2,6}|(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"20\\\\d{4,8}|60[12]\\\\d{5,6}|7(?:099\\\\d{4,5}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d|(?:606|7(?:0[78]|1|3\\\\d))\\\\d{7}|(?:10|29|3[09]|70[1-5]\\\\d)\\\\d{4,8}\"]],\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,[[\"603\\\\d{4}|(?:3[0-5]|6[25-7]|8[58])\\\\d{5}\",[7]],[\"(?:[279]\\\\d|45|5[01568]|8[034679])\\\\d{5}\",[7]],[\"0800\\\\d{7}\",[11]]],\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5],0,0,0,0,0,0,0,[[\"[2-47]\\\\d{4}\"],[\"[56]\\\\d{4}\"]]],\"FM\":[\"691\",\"00\",\"(?:[39]\\\\d\\\\d|820)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[389]\"]]],0,0,0,0,0,0,[[\"31(?:00[67]|208|309)\\\\d\\\\d|(?:3(?:[2357]0[1-9]|602|804|905)|(?:820|9[2-6]\\\\d)\\\\d)\\\\d{3}\"],[\"31(?:00[67]|208|309)\\\\d\\\\d|(?:3(?:[2357]0[1-9]|602|804|905)|(?:820|9[2-7]\\\\d)\\\\d)\\\\d{3}\"]]],\"FO\":[\"298\",\"00\",\"[2-9]\\\\d{5}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\",0,0,0,[[\"(?:20|[34]\\\\d|8[19])\\\\d{4}\"],[\"(?:[27][1-9]|5\\\\d|9[16])\\\\d{4}\"],[\"80[257-9]\\\\d{3}\"],[\"90(?:[13-5][15-7]|2[125-7]|9\\\\d)\\\\d\\\\d\"],0,0,0,0,[\"(?:6[0-36]|88)\\\\d{4}\"]]],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:26[013-9]|59[1-35-9])\\\\d{6}|(?:[13]\\\\d|2[0-57-9]|4[1-9]|5[0-8])\\\\d{7}\"],[\"(?:6(?:[0-24-8]\\\\d|3[0-8]|9[589])|7[3-9]\\\\d)\\\\d{6}\"],[\"80[0-5]\\\\d{6}\"],[\"836(?:0[0-36-9]|[1-9]\\\\d)\\\\d{4}|8(?:1[2-9]|2[2-47-9]|3[0-57-9]|[569]\\\\d|8[0-35-9])\\\\d{6}\"],0,0,[\"80[6-9]\\\\d{6}\"],0,[\"9\\\\d{8}\"],[\"8(?:1[01]|2[0156]|4[024]|84)\\\\d{6}\"]]],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"]],0,0,\"0(11\\\\d{6}|60\\\\d{6}|61\\\\d{6}|6[256]\\\\d{6}|7[467]\\\\d{6})\",\"$1\",0,0,[[\"[01]1\\\\d{6}\",[8]],[\"(?:(?:0[2-7]|7[467])\\\\d|6(?:0[0-4]|10|[256]\\\\d))\\\\d{5}|[2-7]\\\\d{6}\"]]],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1(?:3(?:[0-58]\\\\d\\\\d|73[0-35])|4(?:(?:[0-5]\\\\d|70)\\\\d|69[7-9])|(?:(?:5[0-26-9]|[78][0-49])\\\\d|6(?:[0-4]\\\\d|50))\\\\d)|(?:2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d|1(?:[0-7]\\\\d|8[0-3]))|(?:3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d)\\\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"473$1\",0,\"473\",[[\"473(?:2(?:3[0-2]|69)|3(?:2[89]|86)|4(?:[06]8|3[5-9]|4[0-4]|5[59]|73|90)|63[68]|7(?:58|84)|800|938)\\\\d{4}\"],[\"473(?:4(?:0[2-79]|1[04-9]|2[0-5]|49|5[6-8])|5(?:2[01]|3[3-8])|901)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:[256]\\\\d|4[124-9]|7[0-4])|4(?:1\\\\d|2[2-7]|3[1-79]|4[2-8]|7[239]|9[1-7]))\\\\d{6}\"],[\"5(?:(?:(?:0555|1(?:[17]77|555))[5-9]|757(?:7[7-9]|8[01]))\\\\d|22252[0-4])\\\\d\\\\d|5(?:0(?:0[17]0|505)|1(?:0[01]0|1(?:07|33|51))|2(?:0[02]0|2[25]2)|3(?:0[03]0|3[35]3)|(?:40[04]|900)0|5222)[0-4]\\\\d{3}|(?:5(?:0(?:0(?:0\\\\d|11|22|3[0-6]|44|5[05]|77|88|9[09])|(?:[14]\\\\d|77)\\\\d|22[02])|1(?:1(?:[03][01]|[124]\\\\d|5[2-6]|7[0-4])|4\\\\d\\\\d)|[23]555|4(?:4\\\\d\\\\d|555)|5(?:[0157-9]\\\\d\\\\d|200|333|444)|6[89]\\\\d\\\\d|7(?:[0147-9]\\\\d\\\\d|5(?:00|[57]5))|8(?:0(?:[018]\\\\d|2[0-4])|5(?:55|8[89])|8(?:55|88))|9(?:090|[1-35-9]\\\\d\\\\d))|790\\\\d\\\\d)\\\\d{4}\"],[\"800\\\\d{6}\"],0,0,0,0,0,[\"70[67]\\\\d{6}\"]]],\"GF\":[\"594\",\"00\",\"(?:[56]94\\\\d|7093)\\\\d{5}|(?:80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]|9[47]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"594(?:[02-49]\\\\d|1[0-5]|5[6-9]|6[0-3]|80)\\\\d{4}\"],[\"(?:694(?:[0-249]\\\\d|3[0-8])|7093[0-3])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:396|76\\\\d)\\\\d|476[0-6])\\\\d{4}\"]]],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"([25-9]\\\\d{5})$|0\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"3082[0-5]\\\\d{4}|3(?:0(?:[237]\\\\d|8[01])|[167](?:2[0-6]|7\\\\d|80)|2(?:2[0-5]|7\\\\d|80)|3(?:2[0-3]|7\\\\d|80)|4(?:2[013-9]|3[01]|7\\\\d|80)|5(?:2[0-7]|7\\\\d|80)|8(?:2[0-2]|7\\\\d|80)|9(?:[28]0|7\\\\d))\\\\d{5}\",[9]],[\"(?:2(?:[0346-9]\\\\d|5[67])|5(?:[03-7]\\\\d|9[1-9]))\\\\d{6}\",[9]],[\"800\\\\d{5}\",[8]]]],\"GI\":[\"350\",\"00\",\"(?:[25]\\\\d|60)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]],0,0,0,0,0,0,[[\"2190[0-2]\\\\d{3}|2(?:0(?:[02]\\\\d|3[01])|16[24-9]|2[2-5]\\\\d)\\\\d{4}\"],[\"5251[0-4]\\\\d{3}|(?:5(?:[146-8]\\\\d\\\\d|250)|60(?:1[01]|6\\\\d))\\\\d{4}\"]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d|70)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-9]\"]]],0,0,0,0,0,0,[[\"(?:19|3[1-7]|[68][1-9]|70|9\\\\d)\\\\d{4}\"],[\"[245]\\\\d{5}\"],[\"80\\\\d{4}\"],0,0,0,0,0,[\"3[89]\\\\d{4}\"]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:4(?:[23]\\\\d\\\\d|4(?:1[024679]|[6-9]\\\\d))|5(?:5(?:3\\\\d|4[0-7])|6[67]\\\\d|7(?:1[04]|2[035]|3[58]|48))|8\\\\d{3})\\\\d{3}\"],[\"(?:[23679]\\\\d|4[015]|5[0-489])\\\\d{5}\"]]],\"GN\":[\"224\",\"00\",\"722\\\\d{6}|(?:3|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]],0,0,0,0,0,0,[[\"3(?:0(?:24|3[12]|4[1-35-7]|5[13]|6[189]|[78]1|9[1478])|1\\\\d\\\\d)\\\\d{4}\",[8]],[\"6[0-356]\\\\d{7}\",[9]],0,0,0,0,0,0,[\"722\\\\d{6}\",[9]]]],\"GP\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1-9]|5[3-579]|[68][0-689]|7[08]|9\\\\d)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]],0,0,0,0,0,0,[[\"33[0-24-9]\\\\d[46]\\\\d{4}|3(?:33|5\\\\d)\\\\d[7-9]\\\\d{4}\"],[\"(?:222|55\\\\d)\\\\d{6}\"],[\"80\\\\d[1-9]\\\\d{5}\"],[\"90\\\\d[1-9]\\\\d{5}\"]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|8\\\\d{9,11}|(?:[269]\\\\d|70)\\\\d{8}\",[10,11,12],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{5})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"2(?:1\\\\d\\\\d|2(?:2[1-46-9]|[36][1-8]|4[1-7]|5[1-4]|7[1-5]|[89][1-9])|3(?:1\\\\d|2[1-57]|[35][1-3]|4[13]|7[1-7]|8[124-6]|9[1-79])|4(?:1\\\\d|2[1-8]|3[1-4]|4[13-5]|6[1-578]|9[1-5])|5(?:1\\\\d|[29][1-4]|3[1-5]|4[124]|5[1-6])|6(?:1\\\\d|[269][1-6]|3[1245]|4[1-7]|5[13-9]|7[14]|8[1-5])|7(?:1\\\\d|2[1-5]|3[1-6]|4[1-7]|5[1-57]|6[135]|9[125-7])|8(?:1\\\\d|2[1-5]|[34][1-4]|9[1-57]))\\\\d{6}\",[10]],[\"68[57-9]\\\\d{7}|(?:69|94)\\\\d{8}\",[10]],[\"800\\\\d{7,9}\"],[\"90[19]\\\\d{7}\",[10]],[\"70\\\\d{8}\",[10]],0,[\"5005000\\\\d{3}\",[10]],0,0,[\"8(?:0[16]|12|[27]5|50)\\\\d{7}\",[10]]]],\"GT\":[\"502\",\"00\",\"80\\\\d{6}|(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-8]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[[\"[267][2-9]\\\\d{6}\",[8]],[\"(?:[3-5]\\\\d\\\\d|80[0-4])\\\\d{5}\",[8]],[\"18[01]\\\\d{8}\",[11]],[\"19\\\\d{9}\",[11]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"671$1\",0,\"671\",[[\"671(?:2\\\\d\\\\d|3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[02-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[478])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]],0,0,0,0,0,0,[[\"443\\\\d{6}\",[9]],[\"9(?:5\\\\d|6[569]|77)\\\\d{6}\",[9]],0,0,0,0,0,0,[\"40\\\\d{5}\",[7]]]],\"GY\":[\"592\",\"001\",\"(?:[2-8]\\\\d{3}|9008)\\\\d{3}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:1[6-9]|2[0-35-9]|3[1-4]|5[3-9]|6\\\\d|7[0-79])|3(?:2[25-9]|3\\\\d)|4(?:4[0-24]|5[56])|50[0-6]|77[1-57])\\\\d{4}\"],[\"(?:510|6\\\\d\\\\d|7(?:[0-5]\\\\d|6[01]))\\\\d{4}\"],[\"(?:289|8(?:00|6[28]|88|99))\\\\d{4}\"],[\"9008\\\\d{3}\"],0,0,0,0,[\"515\\\\d{4}\"]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4,7}|(?:[2-7]|9\\\\d{3})\\\\d{7}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[[\"(?:2(?:[13-9]\\\\d|2[013-9])\\\\d|3(?:(?:[1569][0-24-9]|4[0-246-9]|7[0-24-69])\\\\d|8(?:4[0-8]|[579]\\\\d|6[0-2]))|58(?:0[1-9]|1[2-9]))\\\\d{4}\",[8]],[\"(?:4(?:44[0-35-9]|6(?:1[0-79]|4[0-57-9]|6[0-4])|7(?:[26][0-5]|4[0-48]))|5(?:73[0-6]|95[0-8])|6(?:26[013-8]|(?:66|78)[0-5])|70(?:7[1-8]|8[0-4])|84(?:4[0-2]|8[0-35-9])|9(?:29[013-9]|39[014-9]|59[0-4]|899))\\\\d{4}|(?:4(?:4[0-35-9]|6[02357-9]|7[015])|5(?:[1-59][0-46-9]|6[0-4689]|7[0-246-9])|6(?:0[1-9]|[13-59]\\\\d|[268][0-57-9]|7[0-79])|70[1-59]|84[0-39]|9(?:0[1-9]|1[02-9]|[2358][0-8]|[467]\\\\d))\\\\d{5}\",[8]],[\"800\\\\d{6}\",[9]],[\"900(?:[0-24-9]\\\\d{7}|3\\\\d{1,4})\",[5,6,7,8,11]],[\"8(?:1[0-4679]\\\\d|2(?:[0-36]\\\\d|7[0-4])|3(?:[034]\\\\d|2[09]|70))\\\\d{4}\",[8]],0,[\"30(?:0[1-9]|[15-7]\\\\d|2[047]|89)\\\\d{4}\",[8]],[\"7(?:1(?:0[0-38]|1[0-3679]|3[013]|69|9[0136])|2(?:[02389]\\\\d|1[18]|7[27-9])|3(?:[0-38]\\\\d|7[0-369]|9[2357-9])|47\\\\d|5(?:[178]\\\\d|5[0-5])|6(?:0[0-7]|2[236-9]|[35]\\\\d)|7(?:[27]\\\\d|8[7-9])|8(?:[23689]\\\\d|7[1-9])|9(?:[025]\\\\d|6[0-246-8]|7[0-36-9]|8[238]))\\\\d{4}\",[8]]],\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]],0,0,0,0,0,0,[[\"2(?:2(?:0[0-59]|1[1-9]|[23]\\\\d|4[02-7]|5[57]|6[245]|7[0135689]|8[01346-9]|9[0-2])|4(?:0[578]|2[3-59]|3[13-9]|4[0-68]|5[1-3589])|5(?:0[2357-9]|1[1-356]|4[03-5]|5\\\\d|6[014-69]|7[04]|80)|6(?:[056]\\\\d|17|2[067]|3[047]|4[0-378]|[78][0-8]|9[01])|7(?:0[5-79]|6[46-9]|7[02-9]|8[034]|91)|8(?:79|8[0-357-9]|9[1-57-9]))\\\\d{4}\",[8]],[\"[37-9]\\\\d{7}\",[8]],[\"8002\\\\d{7}\",[11]]]],\"HR\":[\"385\",\"00\",\"[2-69]\\\\d{8}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{6}\",[7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6|7[245]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1\\\\d{7}|(?:2[0-3]|3[1-5]|4[02-47-9]|5[1-3])\\\\d{6,7}\",[8,9]],[\"9(?:(?:0[1-9]|[12589]\\\\d)\\\\d\\\\d|7(?:[0679]\\\\d\\\\d|5(?:[01]\\\\d|44|55|77|9[5-79])))\\\\d{4}|98\\\\d{6}\",[8,9]],[\"80\\\\d{5,7}\"],[\"6[01459]\\\\d{6}|6[01]\\\\d{5}\",[7,8]],[\"7[45]\\\\d{6}\",[8]],0,[\"62\\\\d{6,7}|72\\\\d{6}\",[8,9]]]],\"HT\":[\"509\",\"00\",\"(?:[2-489]\\\\d|55)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-589]\"]]],0,0,0,0,0,0,[[\"2(?:2\\\\d|5[1-5]|81|9[149])\\\\d{5}\"],[\"(?:[34]\\\\d|55)\\\\d{6}\"],[\"8\\\\d{7}\"],0,0,0,0,0,[\"9(?:[67][0-4]|8[0-3589]|9\\\\d)\\\\d{5}\"]]],\"HU\":[\"36\",\"00\",\"[235-7]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"06 $1\"]],\"06\",0,0,0,0,0,[[\"(?:1\\\\d|[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6[23689]|8[2-57-9]|9[2-69])\\\\d{6}\",[8]],[\"(?:[257]0|3[01])\\\\d{7}\",[9]],[\"(?:[48]0\\\\d|680[29])\\\\d{5}\"],[\"9[01]\\\\d{6}\",[8]],0,0,[\"38\\\\d{7}\",[9]],0,[\"21\\\\d{7}\",[9]]]],\"ID\":[\"62\",\"00[89]\",\"00[1-9]\\\\d{9,14}|(?:[1-36]|8\\\\d{5})\\\\d{6}|00\\\\d{9}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2[124]\\\\d{7,8}|619\\\\d{8}|2(?:1(?:14|500)|2\\\\d{3})\\\\d{3}|61\\\\d{5,8}|(?:2(?:[35][1-4]|6[0-8]|7[1-6]|8\\\\d|9[1-8])|3(?:1|[25][1-8]|3[1-68]|4[1-3]|6[1-3568]|7[0-469]|8\\\\d)|4(?:0[1-589]|1[01347-9]|2[0-36-8]|3[0-24-68]|43|5[1-378]|6[1-5]|7[134]|8[1245])|5(?:1[1-35-9]|2[25-8]|3[124-9]|4[1-3589]|5[1-46]|6[1-8])|6(?:[25]\\\\d|3[1-69]|4[1-6])|7(?:02|[125][1-9]|[36]\\\\d|4[1-8]|7[0-36-9])|9(?:0[12]|1[013-8]|2[0-479]|5[125-8]|6[23679]|7[159]|8[01346]))\\\\d{5,8}\",[7,8,9,10,11]],[\"8[1-35-9]\\\\d{7,10}\",[9,10,11,12]],[\"00(?:1803\\\\d{5,11}|7803\\\\d{7})|(?:177\\\\d|800)\\\\d{5,7}\",[8,9,10,11,12,13,14,15,16,17]],[\"809\\\\d{7}\",[10]],0,0,[\"(?:1500|8071\\\\d{3})\\\\d{3}\",[7,10]],0,0,[\"804\\\\d{7}\",[10]]]],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1\\\\d|21)\\\\d{6,7}|(?:2[24-9]|4(?:0[24]|5\\\\d|7)|5(?:0[45]|1\\\\d|8)|6(?:1\\\\d|[237-9])|9(?:1\\\\d|[35-9]))\\\\d{5}|(?:23|4(?:[1-469]|8\\\\d)|5[23679]|6[4-6]|7[14]|9[04])\\\\d{7}\"],[\"8(?:22|[35-9]\\\\d)\\\\d{6}\",[9]],[\"1800\\\\d{6}\",[10]],[\"15(?:1[2-8]|[2-8]0|9[089])\\\\d{6}\",[10]],[\"700\\\\d{6}\",[9]],[\"88210[1-9]\\\\d{4}|8(?:[35-79]5\\\\d\\\\d|8(?:[013-9]\\\\d\\\\d|2(?:[01][1-9]|[2-9]\\\\d)))\\\\d{5}\",[10]],[\"818\\\\d{6}\",[9]],0,[\"76\\\\d{7}\",[9]],[\"18[59]0\\\\d{6}\",[10]]]],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\",0,0,0,0,0,[[\"153\\\\d{8,9}|29[1-9]\\\\d{5}|(?:2[0-8]|[3489]\\\\d)\\\\d{6}\",[8,11,12]],[\"55(?:4(?:[01]0|5[0-2])|57[0-289])\\\\d{4}|5(?:(?:[0-2][02-9]|[36]\\\\d|[49][2-9]|8[3-7])\\\\d|5(?:01|2\\\\d|3[0-3]|4[34]|5[0-25689]|6[6-8]|7[0-267]|8[7-9]|9[1-9]))\\\\d{5}\",[9]],[\"1(?:255|80[019]\\\\d{3})\\\\d{3}\",[7,10]],[\"1212\\\\d{4}|1(?:200|9(?:0[0-2]|19))\\\\d{6}\",[8,10]],0,[\"151\\\\d{8,9}\",[11,12]],[\"1599\\\\d{6}\",[10]],0,[\"7(?:38(?:[05]\\\\d|8[08])|8(?:33|55|77|81)\\\\d)\\\\d{4}|7(?:18|2[23]|3[237]|47|6[258]|7\\\\d|82|9[2-9])\\\\d{6}\",[9]],[\"1700\\\\d{6}\",[10]]]],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([25-8]\\\\d{5})$|0\",\"1624$1\",0,\"74576|(?:16|7[56])24\",[[\"1624(?:230|[5-8]\\\\d\\\\d)\\\\d{3}\"],[\"76245[06]\\\\d{4}|7(?:4576|[59]24\\\\d|624[0-4689])\\\\d{5}\"],[\"808162\\\\d{4}\"],[\"8(?:440[49]06|72299\\\\d)\\\\d{3}|(?:8(?:45|70)|90[0167])624\\\\d{4}\"],[\"70\\\\d{8}\"],0,[\"3440[49]06\\\\d{3}|(?:3(?:08162|3\\\\d{4}|45624|7(?:0624|2299))|55\\\\d{4})\\\\d{4}\"],0,[\"56\\\\d{8}\"]]],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\",0,0,0,0,0,[[\"2717(?:[2-7]\\\\d|95)\\\\d{4}|(?:271[0-689]|782[0-6])[2-7]\\\\d{5}|(?:170[24]|2(?:(?:[02][2-79]|90)\\\\d|80[13468])|(?:3(?:23|80)|683|79[1-7])\\\\d|4(?:20[24]|72[2-8])|552[1-7])\\\\d{6}|(?:11|33|4[04]|80)[2-7]\\\\d{7}|(?:342|674|788)(?:[0189][2-7]|[2-7]\\\\d)\\\\d{5}|(?:1(?:2[0-249]|3[0-25]|4[145]|[59][14]|6[014]|7[1257]|8[01346])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568]|9[14])|3(?:26|4[13]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[014-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|2[14]|3[134]|4[47]|5[15]|[67]1)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91))[2-7]\\\\d{6}|(?:1(?:2[35-8]|3[346-9]|4[236-9]|[59][0235-9]|6[235-9]|7[34689]|8[257-9])|2(?:1[134689]|3[24-8]|4[2-8]|5[25689]|6[2-4679]|7[3-79]|8[2-479]|9[235-9])|3(?:01|1[79]|2[1245]|4[5-8]|5[125689]|6[235-7]|7[157-9]|8[2-46-8])|4(?:1[14578]|2[5689]|3[2-467]|5[4-7]|6[35]|73|8[2689]|9[2389])|5(?:[16][146-9]|2[14-8]|3[1346]|4[14-69]|5[46]|7[2-4]|8[2-8]|9[246])|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])|7(?:1[013-9]|2[0235-9]|3[2679]|4[1-35689]|5[2-46-9]|[67][02-9]|8[013-7]|9[089])|8(?:1[1357-9]|2[235-8]|3[03-57-9]|4[0-24-9]|5\\\\d|6[2457-9]|7[1-6]|8[1256]|9[2-4]))\\\\d[2-7]\\\\d{5}\",[10]],[\"(?:61279|7(?:887[02-9]|9(?:313|79[07-9]))|8(?:079[04-9]|(?:84|91)7[02-8]))\\\\d{5}|(?:6(?:12|[2-47]1|5[17]|6[13]|80)[0189]|7(?:1(?:2[0189]|9[0-5])|2(?:[14][017-9]|8[0-59])|3(?:2[5-8]|[34][017-9]|9[016-9])|4(?:1[015-9]|[29][89]|39|8[389])|5(?:[15][017-9]|2[04-9]|9[7-9])|6(?:0[0-47]|1[0-257-9]|2[0-4]|3[19]|5[4589])|70[0289]|88[089]|97[02-8])|8(?:0(?:6[67]|7[02-8])|70[017-9]|84[01489]|91[0-289]))\\\\d{6}|(?:7(?:31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[0189]\\\\d|7[02-8])\\\\d{5}|(?:6(?:[09]\\\\d|1[04679]|2[03689]|3[05-9]|4[0489]|50|6[069]|7[07]|8[7-9])|7(?:0\\\\d|2[0235-79]|3[05-8]|40|5[0346-8]|6[6-9]|7[1-9]|8[0-79]|9[089])|8(?:0[01589]|1[0-57-9]|2[235-9]|3[03-57-9]|[45]\\\\d|6[02457-9]|7[1-69]|8[0-25-9]|9[02-9])|9\\\\d\\\\d)\\\\d{7}|(?:6(?:(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|8[124-6])\\\\d|7(?:[235689]\\\\d|4[0189]))|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-5])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]|881))[0189]\\\\d{5}\",[10]],[\"000800\\\\d{7}|1(?:600\\\\d{6}|80(?:0\\\\d{4,9}|3\\\\d{9}))\"],[\"186[12]\\\\d{9}\",[13]],0,0,[\"140\\\\d{7}\",[10]],0,0,[\"1860\\\\d{7}\",[11]]]],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]],0,0,0,0,0,0,[[\"37\\\\d{5}\"],[\"38\\\\d{5}\"]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1\\\\d{7}|(?:2[13-5]|3[02367]|4[023]|5[03]|6[026])\\\\d{6,7}\",[8,9]],[\"7[3-9]\\\\d{8}\",[10]]]],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])(?:[03-57]\\\\d{7}|[16]\\\\d{3}(?:\\\\d{4})?|[289]\\\\d{3}(?:\\\\d(?:\\\\d{3})?)?)|94(?:000[09]|(?:12\\\\d|30[0-2])\\\\d|2(?:121|[2689]0\\\\d)|4(?:111|40\\\\d))\\\\d{4}\",[6,7,10]],[\"9(?:(?:0[0-5]|[13]\\\\d|2[0-3])\\\\d\\\\d|9(?:[0-46]\\\\d\\\\d|5(?:10|5\\\\d)|8(?:[12]\\\\d|88)|9(?:0[0-3]|[19]\\\\d|21|69|77|8[7-9])))\\\\d{5}\",[10]],0,0,0,0,[\"96(?:0[12]|2[16-8]|3(?:08|[14]5|[23]|66)|4(?:0|80)|5[01]|6[89]|86|9[19])\",[4,5]]]],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"(?:4(?:1[0-24-69]|2[0-7]|[37][0-8]|4[0-24589]|5[0-68]|6\\\\d|8[0-36-8])|5(?:05|[156]\\\\d|2[02578]|3[0-579]|4[03-7]|7[0-2578]|8[0-35-9]|9[013-689])|872)\\\\d{4}\",[7]],[\"(?:38[589]\\\\d\\\\d|6(?:1[1-8]|2[0-6]|3[026-9]|4[014679]|5[0159]|6[0-69]|70|8[06-8]|9\\\\d)|7(?:5[057]|[6-9]\\\\d)|8(?:2[0-59]|[3-69]\\\\d|8[238]))\\\\d{4}\"],[\"80[0-8]\\\\d{4}\",[7]],[\"90(?:0\\\\d|1[5-79]|2[015-79]|3[135-79]|4[125-7]|5[25-79]|7[1-37]|8[0-35-7])\\\\d{3}\",[7]],0,[\"(?:689|8(?:7[18]|80)|95[48])\\\\d{4}\",[7]],[\"809\\\\d{4}\",[7]],0,[\"49[0-24-79]\\\\d{4}\",[7]]],\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|1\\\\d{8,10}|3(?:[0-8]\\\\d{7,10}|9\\\\d{7,8})|(?:43|55|70)\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?\",[6,7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[2-5])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1(?:44|[679])|[378]|43\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]|14\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\",[6,7,8,9,10,11]],[\"3[2-9]\\\\d{7,8}|(?:31|43)\\\\d{8}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],[\"3[2-8]\\\\d{9,10}\",[11,12]],0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"([0-24-8]\\\\d{5})$|0\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97\\\\d))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:464|652)\\\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\",[[\"8766060\\\\d{3}|(?:658(?:2(?:[0-8]\\\\d|9[0-46-9])|[3-9]\\\\d\\\\d)|876(?:52[35]|6(?:0[1-3579]|1[0235-9]|[23]\\\\d|40|5[06]|6[2-589]|7[0-25-9]|8[04]|9[4-9])|7(?:0[2-689]|[1-6]\\\\d|8[056]|9[45])|9(?:0[1-8]|1[02378]|[2-8]\\\\d|9[2-468])))\\\\d{4}\"],[\"(?:658295|876(?:2(?:0[1-9]|[13-9]\\\\d|2[013-9])|[348]\\\\d\\\\d|5(?:0[1-9]|[1-9]\\\\d)|6(?:4[89]|6[67])|7(?:0[07]|7\\\\d|8[1-47-9]|9[0-36-9])|9(?:[01]9|9[0579])))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"JO\":[\"962\",\"00\",\"(?:(?:[2689]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"87(?:000|90[01])\\\\d{3}|(?:2(?:6(?:2[0-35-9]|3[0-578]|4[24-7]|5[0-24-8]|[6-8][023]|9[0-3])|7(?:0[1-79]|10|2[014-7]|3[0-689]|4[019]|5[0-3578]))|32(?:0[1-69]|1[1-35-7]|2[024-7]|3\\\\d|4[0-3]|[5-7][023])|53(?:0[0-3]|[13][023]|2[0-59]|49|5[0-35-9]|6[15]|7[45]|8[1-6]|9[0-36-9])|6(?:2(?:[05]0|22)|3(?:00|33)|4(?:0[0-25]|1[2-7]|2[0569]|[38][07-9]|4[025689]|6[0-589]|7\\\\d|9[0-2])|5(?:[01][056]|2[034]|3[0-57-9]|4[178]|5[0-69]|6[0-35-9]|7[1-379]|8[0-68]|9[0239]))|87(?:20|7[078]|99))\\\\d{4}\",[8]],[\"7(?:[78][0-25-9]|9\\\\d)\\\\d{6}\",[9]],[\"80\\\\d{6}\",[8]],[\"9\\\\d{7}\",[8]],[\"70\\\\d{7}\",[9]],0,[\"8(?:10|8\\\\d)\\\\d{5}\",[8]],[\"74(?:66|77)\\\\d{5}\",[9]],0,[\"85\\\\d{6}\",[8]]]],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51)|9(?:80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[0459]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[26-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9]|9[29])|5(?:2|3(?:[045]|9[0-8])|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|3(?:[29]|60)|49|51|6(?:[0-24]|36|5[0-3589]|7[23]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3(?:[045]|9(?:[0-58]|6[4-9]|7[0-35689]))|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|60|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[2-57-9]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|7(?:2[2-468]|3[78])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[289][2-9]|5[3-9]|7[2-4679]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[257-9]\"],\"0$1\"]],\"0\",0,\"(000[259]\\\\d{6})$|(?:(?:003768)0?)|0\",\"$1\",0,0,[[\"(?:1(?:1[235-8]|2[3-6]|3[3-9]|4[2-6]|[58][2-8]|6[2-7]|7[2-9]|9[1-9])|(?:2[2-9]|[36][1-9])\\\\d|4(?:[2-578]\\\\d|6[02-8]|9[2-59])|5(?:[2-589]\\\\d|6[1-9]|7[2-8])|7(?:[25-9]\\\\d|3[4-9]|4[02-9])|8(?:[2679]\\\\d|3[2-9]|4[5-9]|5[1-9]|8[03-9])|9(?:[2-58]\\\\d|[679][1-9]))\\\\d{6}\",[9]],[\"[7-9]0[1-9]\\\\d{7}\",[10]],[\"00777(?:[01]|5\\\\d)\\\\d\\\\d|(?:00(?:7778|882[1245])|(?:120|800\\\\d)\\\\d\\\\d)\\\\d{4}|00(?:37|66|78)\\\\d{6,13}\"],[\"990\\\\d{6}\",[9]],[\"60\\\\d{7}\",[9]],0,[\"570\\\\d{6}\",[9]],[\"20\\\\d{8}\",[10]],[\"50[1-9]\\\\d{7}\",[10]]]],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4[245]|5[1-79]|6[01457-9])\\\\d{5,7}|(?:4[136]|5[08]|62)\\\\d{7}|(?:[24]0|66)\\\\d{6,7}\",[7,8,9]],[\"(?:1(?:0[0-8]|1[0-7]|2[014]|30)|7\\\\d\\\\d)\\\\d{6}\",[9]],[\"800[02-8]\\\\d{5,6}\",[9,10]],[\"900[02-9]\\\\d{5}\",[9]]]],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|[235-9]\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"312(?:5[0-79]\\\\d|9(?:[0-689]\\\\d|7[0-24-9]))\\\\d{3}|(?:3(?:1(?:2[0-46-8]|3[1-9]|47|[56]\\\\d)|2(?:22|3[0-479]|6[0-7])|4(?:22|5[6-9]|6\\\\d)|5(?:22|3[4-7]|59|6\\\\d)|6(?:22|5[35-7]|6\\\\d)|7(?:22|3[468]|4[1-9]|59|[67]\\\\d)|9(?:22|4[1-8]|6\\\\d))|6(?:09|12|2[2-4])\\\\d)\\\\d{5}\",[9]],[\"312(?:58\\\\d|973)\\\\d{3}|(?:2(?:0[0-35]|2\\\\d)|5[0-24-7]\\\\d|600|7(?:[07]\\\\d|55)|88[08]|9(?:12|9[05-9]))\\\\d{6}\",[9]],[\"800\\\\d{6,7}\"]]],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"23(?:4(?:[2-4]|[56]\\\\d)|[568]\\\\d\\\\d)\\\\d{4}|23[236-9]\\\\d{5}|(?:2[4-6]|3[2-6]|4[2-4]|[5-7][2-5])(?:(?:[237-9]|4[56]|5\\\\d)\\\\d{5}|6\\\\d{5,6})\",[8,9]],[\"(?:(?:1[28]|3[18]|9[67])\\\\d|6[016-9]|7(?:[07-9]|[16]\\\\d)|8(?:[013-79]|8\\\\d))\\\\d{6}|(?:1\\\\d|9[0-57-9])\\\\d{6}|(?:2[3-6]|3[2-6]|4[2-4]|[5-7][2-5])48\\\\d{5}\",[8,9]],[\"1800(?:1\\\\d|2[019])\\\\d{4}\",[10]],[\"1900(?:1\\\\d|2[09])\\\\d{4}\",[10]]]],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\",0,0,0,0,0,[[\"(?:[24]\\\\d|3[1-9]|50|65(?:02[12]|12[56]|22[89]|[3-5]00)|7(?:27\\\\d\\\\d|3100|5(?:02[12]|12[56]|22[89]|[34](?:00|81)|500))|8[0-5])\\\\d{3}\"],[\"(?:6200[01]|7(?:310[1-9]|5(?:02[03-9]|12[0-47-9]|22[0-7]|[34](?:0[1-9]|8[02-9])|50[1-9])))\\\\d{3}|(?:63\\\\d\\\\d|7(?:(?:[0146-9]\\\\d|2[0-689])\\\\d|3(?:[02-9]\\\\d|1[1-9])|5(?:[0-2][013-9]|[34][1-79]|5[1-9]|[6-9]\\\\d)))\\\\d{4}\",[8]],0,0,0,0,0,0,[\"30(?:0[01]\\\\d\\\\d|12(?:11|20))\\\\d\\\\d\",[8]]]],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]],0,0,0,0,0,0,[[\"7[4-7]\\\\d{5}\"],[\"[34]\\\\d{6}\"],0,[\"8\\\\d{6}\"]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"869$1\",0,\"869\",[[\"869(?:2(?:29|36)|302|4(?:6[015-9]|70)|56[5-7])\\\\d{4}\"],[\"869(?:48[89]|55[6-8]|66\\\\d|76[02-7])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|[2-7])\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:195|2)\\\\d|3[19]|4[159]|5[37]|6[17]|7[39]|85)\\\\d{6}\"],[\"19[1-3]\\\\d{7}\",[10]]]],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\",0,0,0,[[\"(?:2|3[1-3]|[46][1-4]|5[1-5])[1-9]\\\\d{6,7}|(?:3[1-3]|[46][1-4]|5[1-5])1\\\\d{2,3}\",[5,6,8,9,10]],[\"1(?:05(?:[0-8]\\\\d|9[0-6])|22[13]\\\\d)\\\\d{4,5}|1(?:0[0-46-9]|[16-9]\\\\d|2[013-9])\\\\d{6,7}\",[9,10]],[\"00(?:308\\\\d{6,7}|798\\\\d{7,9})|(?:00368|[38]0)\\\\d{7}\",[9,11,12,13,14]],[\"60[2-9]\\\\d{6}\",[9]],[\"50\\\\d{8,9}\",[10,11]],0,[\"1(?:5(?:22|33|44|66|77|88|99)|6(?:[07]0|44|6[0168]|88)|8(?:00|33|55|77|99))\\\\d{4}\",[8]],[\"15\\\\d{7,8}\",[9,10]],[\"70\\\\d{8}\",[10]]]],\"KW\":[\"965\",\"00\",\"18\\\\d{5}|(?:[2569]\\\\d|41)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[245]\"]]],0,0,0,0,0,0,[[\"2(?:[23]\\\\d\\\\d|4(?:[1-35-9]\\\\d|44)|5(?:0[034]|[2-46]\\\\d|5[1-3]|7[1-7]))\\\\d{4}\",[8]],[\"(?:41\\\\d\\\\d|5(?:(?:[05]\\\\d|1[0-7]|6[56])\\\\d|2(?:22|5[25])|7(?:55|77)|88[58])|6(?:(?:0[034679]|5[015-9]|6\\\\d)\\\\d|1(?:00|11|6[16])|2[26]2|3[36]3|4[46]4|7(?:0[013-9]|[67]\\\\d)|8[68]8|9(?:[069]\\\\d|3[039]))|9(?:(?:[04679]\\\\d|8[057-9])\\\\d|1(?:1[01]|99)|2(?:00|2\\\\d)|3(?:00|3[03])|5(?:00|5\\\\d)))\\\\d{4}\",[8]],[\"18\\\\d{5}\",[7]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"345$1\",0,\"345\",[[\"345(?:2(?:22|3[23]|44|66)|333|444|6(?:23|38|40)|7(?:30|4[35-79]|6[6-9]|77)|8(?:00|1[45]|4[89]|88)|9(?:14|4[035-9]))\\\\d{4}\"],[\"345(?:32[1-9]|42[0-4]|5(?:1[67]|2[5-79]|4[6-9]|50|76)|649|82[56]|9(?:1[679]|2[2-9]|3[06-9]|90))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:345976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"KZ\":[\"7\",\"810\",\"(?:33622|8\\\\d{8})\\\\d{5}|[78]\\\\d{9}\",[10,14],0,\"8\",0,0,0,0,\"33|7\",[[\"(?:33622|7(?:1(?:0(?:[23]\\\\d|4[0-3]|59|63)|1(?:[23]\\\\d|4[0-79]|59)|2(?:[23]\\\\d|59)|3(?:2\\\\d|3[0-79]|4[0-35-9]|59)|4(?:[24]\\\\d|3[013-9]|5[1-9]|97)|5(?:2\\\\d|3[1-9]|4[0-7]|59)|6(?:[2-4]\\\\d|5[19]|61)|72\\\\d|8(?:[27]\\\\d|3[1-46-9]|4[0-5]|59))|2(?:1(?:[23]\\\\d|4[46-9]|5[3469])|2(?:2\\\\d|3[0679]|46|5[12679])|3(?:[2-4]\\\\d|5[139])|4(?:2\\\\d|3[1-35-9]|59)|5(?:[23]\\\\d|4[0-8]|59|61)|6(?:2\\\\d|3[1-9]|4[0-4]|59)|7(?:[2379]\\\\d|40|5[279])|8(?:[23]\\\\d|4[0-3]|59)|9(?:2\\\\d|3[124578]|59))))\\\\d{5}\",[10]],[\"7(?:0[0-25-8]|47|6[0-4]|7[15-8]|85)\\\\d{7}\",[10]],[\"8(?:00|108\\\\d{3})\\\\d{7}\"],[\"809\\\\d{7}\",[10]],[\"808\\\\d{7}\",[10]],0,0,0,[\"751\\\\d{7}\",[10]]],\"8~10\"],\"LA\":[\"856\",\"00\",\"[23]\\\\d{9}|3\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[13]|[35-7][14]|41|8[1468])\\\\d{6}\",[8]],[\"(?:20(?:[23579]\\\\d|8[78])|30[24]\\\\d)\\\\d{6}|30\\\\d{7}\",[9,10]]]],\"LB\":[\"961\",\"00\",\"[27-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-6]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27-9]\"]]],\"0\",0,0,0,0,0,[[\"7(?:62|8[0-6]|9[04-9])\\\\d{4}|(?:[14-69]\\\\d|2(?:[14-69]\\\\d|[78][1-9])|7[2-57]|8[02-9])\\\\d{5}\"],[\"(?:(?:3|81)\\\\d|7(?:[01]\\\\d|6[013-9]|8[7-9]|9[1-3]))\\\\d{5}\"],0,[\"9[01]\\\\d{6}\",[8]],0,0,0,0,0,[\"80\\\\d{6}\",[8]]]],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-8]\\\\d{6})$|1\",\"758$1\",0,\"758\",[[\"758(?:234|4(?:30|5\\\\d|6[2-9]|8[0-2])|57[0-2]|(?:63|75)8)\\\\d{4}\"],[\"758(?:28[4-7]|384|4(?:6[01]|8[4-9])|5(?:1[89]|20|84)|7(?:1[2-9]|2\\\\d|3[0-3])|812)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"LI\":[\"423\",\"00\",\"[68]\\\\d{8}|(?:[2378]\\\\d|90)\\\\d{5}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2379]|8(?:0[09]|7)\",\"[2379]|8(?:0(?:02|9)|7)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"(1001)|0\",0,0,0,[[\"(?:2(?:01|1[27]|2[024]|3\\\\d|6[02-578]|96)|3(?:[24]0|33|7[0135-7]|8[048]|9[0269]))\\\\d{4}\",[7]],[\"(?:6(?:(?:4[5-9]|5[0-46-9])\\\\d|6(?:[024-6]\\\\d|[17]0|3[7-9]))\\\\d|7(?:[37-9]\\\\d|42|56))\\\\d{4}\"],[\"8002[28]\\\\d\\\\d|80(?:05\\\\d|9)\\\\d{4}\"],[\"90(?:02[258]|1(?:23|3[14])|66[136])\\\\d\\\\d\",[7]],0,[\"697(?:42|56|[78]\\\\d)\\\\d{4}\",[9]],[\"870(?:28|87)\\\\d\\\\d\",[7]]]],\"LK\":[\"94\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:12[2-9]|602|8[12]\\\\d|9(?:1\\\\d|22|9[245]))\\\\d{6}|(?:11|2[13-7]|3[1-8]|4[157]|5[12457]|6[35-7])[2-57]\\\\d{6}\"],[\"7(?:[0-25-8]\\\\d|4[0-4])\\\\d{6}\"],0,0,0,0,[\"1973\\\\d{5}\"]]],\"LR\":[\"231\",\"00\",\"(?:[2457]\\\\d|33|88)\\\\d{7}|(?:2\\\\d|[4-6])\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4[67]|[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-578]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2\\\\d{7}\",[8]],[\"(?:(?:(?:22|33)0|555|7(?:6[01]|7\\\\d)|88\\\\d)\\\\d|4(?:240|[67]))\\\\d{5}|[56]\\\\d{6}\",[7,9]],0,[\"332(?:02|[34]\\\\d)\\\\d{4}\",[9]]]],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]],0,0,0,0,0,0,[[\"2\\\\d{7}\"],[\"[56]\\\\d{7}\"],[\"800[1256]\\\\d{4}\"]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-7]\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(0-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(0-$1)\",1]],\"0\",0,\"[08]\",0,0,0,[[\"(?:3[1478]|4[124-6]|52)\\\\d{6}\"],[\"6\\\\d{7}\"],[\"80[02]\\\\d{5}\"],[\"9(?:0[0239]|10)\\\\d{5}\"],[\"70[05]\\\\d{5}\"],0,[\"70[67]\\\\d{5}\"],0,[\"[89]01\\\\d{5}\"],[\"808\\\\d{5}\"]]],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\",0,0,0,[[\"(?:35[013-9]|80[2-9]|90[89])\\\\d{1,8}|(?:2[2-9]|3[0-46-9]|[457]\\\\d|8[13-9]|9[2-579])\\\\d{2,9}\"],[\"6(?:[269][18]|5[1568]|7[189]|81)\\\\d{6}\",[9]],[\"800\\\\d{5}\",[8]],[\"90[015]\\\\d{5}\",[8]],0,0,0,0,[\"20(?:1\\\\d{5}|[2-689]\\\\d{1,7})\",[4,5,6,7,8,9,10]],[\"801\\\\d{5}\",[8]]]],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]],0,0,0,0,0,0,[[\"6\\\\d{7}\"],[\"2333[0-8]\\\\d{3}|2(?:[0-24-9]\\\\d\\\\d|3(?:0[07]|[14-9]\\\\d|2[02-9]|3[0-24-9]))\\\\d{4}\"],[\"80\\\\d{6}\"],[\"90\\\\d{6}\"],0,0,0,0,0,[\"81\\\\d{6}\"]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:0[56]|[1-6]\\\\d|7[124579]|8[124])|3(?:1\\\\d|2[2356])|4(?:[17]\\\\d|2[1-357]|5[2-4]|8[124])|5(?:[1347]\\\\d|2[1-469]|5[13-5]|8[1-4])|6(?:[1-479]\\\\d|5[2-57]|8[1-5])|7(?:[13]\\\\d|2[13-79])|8(?:[124]\\\\d|5[124]|84))\\\\d{6}\"],[\"9[1-6]\\\\d{7}\"]]],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-46-9]|3[3-9]|9)|8(?:0[89]|92)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:2(?:[0-25-79]\\\\d|3[1-578]|4[02-46-8]|8[0235-7])|3(?:[0-47]\\\\d|5[02-9]|6[02-8]|8[014-9]|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:[0167]\\\\d|2[0-467]|5[0-3]|8[0-7]))\\\\d{6}\"],[\"80[0-7]\\\\d{6}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"(?:592(?:4[0-2]|93)|80[89]\\\\d\\\\d)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"(?:[3489]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[389]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:870|9[2-47-9]\\\\d)\\\\d{5}\",[8]],[\"4(?:[469]\\\\d|5[1-9])\\\\d{5}|(?:3|6\\\\d)\\\\d{7}\"],[\"(?:800|90\\\\d)\\\\d{5}\",[8]]]],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:2[1-9]|3[1-79])\\\\d|5(?:33|5[257]))\\\\d{5}\"],[\"562\\\\d{5}|(?:6\\\\d|7[16-9])\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[056]\\\\d{5}\"],0,0,[\"803\\\\d{5}\"],0,[\"3[08]\\\\d{6}\"],[\"808\\\\d{5}\"]]],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:20[2-8]|3(?:[0-2][2-7]|3[24-7])|4(?:0[2-467]|1[2467])|5(?:0[2467]|1[24-7]|2[2-467]))\\\\d{5}\",[8]],[\"6(?:[07-9]\\\\d|3[024]|6[0-25])\\\\d{5}\",[8]],[\"80(?:[0-2578]|9\\\\d)\\\\d{5}\"],[\"9(?:4[1568]|5[178])\\\\d{5}\",[8]],0,0,[\"77[1-9]\\\\d{5}\",[8]],0,[\"78[1-49]\\\\d{5}\",[8]]]],\"MF\":[\"590\",\"00\",\"(?:590\\\\d|7090)\\\\d{5}|(?:69|80|9\\\\d)\\\\d{7}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|3[03-7]|5[0-268]|87)\\\\d{4}\"],[\"(?:69(?:0\\\\d\\\\d|1(?:2[2-9]|3[0-5])|4(?:0[89]|1[2-6]|9\\\\d)|6(?:1[016-9]|5[0-4]|[67]\\\\d))|7090[0-4])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],0,0,0,0,0,[\"9(?:(?:39[5-7]|76[018])\\\\d|475[0-6])\\\\d{4}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"([24-9]\\\\d{6})$|0\",\"20$1\",0,0,[[\"2072[29]\\\\d{4}|20(?:2\\\\d|4[47]|5[3467]|6[279]|7[356]|8[268]|9[2457])\\\\d{5}\"],[\"3[2-47-9]\\\\d{7}\"],0,0,0,0,0,0,[\"22\\\\d{7}\"]]],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\",0,0,0,0,0,[[\"(?:247|528|625)\\\\d{4}\"],[\"(?:(?:23|54)5|329|45[35-8])\\\\d{4}\"],0,0,0,0,0,0,[\"635\\\\d{4}\"]]],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2|34[47]|4(?:[37]7|5[47]|64)\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:2(?:62|77)0|3444)\\\\d|4[56]440)\\\\d{3}|(?:34|4[357])700\\\\d{3}|(?:2(?:[0-3]\\\\d|5[0-578]|6[01]|82)|3(?:1[3-68]|[23][2-68]|4[23568])|4(?:[23][2-68]|4[3-68]|5[2568]|6[25-8]|7[24-68]|8[4-68]))\\\\d{5}\"],[\"7(?:3555|(?:474|9[019]7)7)\\\\d{3}|7(?:[0-25-8]\\\\d\\\\d|3(?:[1-478]\\\\d|6[01])|4(?:2\\\\d|60|7[01578])|9(?:[2-4]\\\\d|5[01]|7[015]))\\\\d{4}\"],[\"800\\\\d{5}\"],[\"5\\\\d{7}\"],0,0,0,0,0,[\"8(?:0[1-9]|[1-9]\\\\d)\\\\d{5}\"]]],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]],0,0,0,0,0,0,[[\"2(?:07[0-8]|12[67])\\\\d{4}|(?:2(?:02|1[4-689])|4(?:0[0-4]|4[1-59]))\\\\d{5}\"],[\"2(?:0(?:01|79)|17\\\\d)\\\\d{4}|(?:5[0-3]|[679]\\\\d|8[2-59])\\\\d{6}\"],[\"80\\\\d{6}\"]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"4(?:[2-46]|5[3-5])|5|6(?:[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-5]|(?:60|86)[23]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|452|678|86\",\"[12]|452|6788|86\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:12|[28]\\\\d|3[56]|7[3-6]|9[0-6])\\\\d|4(?:2[29]|7[0-2]|83)|6)|2(?:2(?:00|8[34])|4(?:0\\\\d|22|7[0-2]|83)|51\\\\d\\\\d)|4(?:2(?:2\\\\d\\\\d|48[013])|3(?:20\\\\d|4(?:70|83)|56)|420\\\\d|5(?:2\\\\d|470))|6(?:0(?:[23]|88\\\\d)|(?:124|[56]2\\\\d)\\\\d|2472|3(?:20\\\\d|470)|4(?:2[04]\\\\d|472)|7(?:3\\\\d\\\\d|4[67]0|8(?:[01459]\\\\d|8))))\\\\d{4}|5(?:2(?:2\\\\d{5,6}|47[02]\\\\d{4})|(?:3472|4(?:2(?:1|86)|470)|522\\\\d|6(?:20\\\\d|483)|7(?:20\\\\d|48[01])|8(?:20\\\\d|47[02])|9(?:20\\\\d|470))\\\\d{4})|7(?:(?:0470|4(?:25\\\\d|470)|5(?:202|470|96\\\\d))\\\\d{4}|1(?:20\\\\d{4,5}|4(?:70|83)\\\\d{4}))|8(?:1(?:2\\\\d{5,6}|4(?:10|7[01]\\\\d)\\\\d{3})|2(?:2\\\\d{5,6}|(?:320|490\\\\d)\\\\d{3})|(?:3(?:2\\\\d\\\\d|470)|4[24-7]|5(?:(?:2\\\\d|51)\\\\d|4(?:[1-35-9]\\\\d|4[0-57-9]))|6[23])\\\\d{4})|(?:1[2-6]\\\\d|4(?:2[24-8]|3[2-7]|[46][2-6]|5[3-5])|5(?:[27][2-8]|3[2-68]|4[24-8]|5[23]|6[2-4]|8[24-7]|9[2-7])|6(?:[19]20|42[03-6]|(?:52|7[45])\\\\d)|7(?:[04][24-8]|[15][2-7]|22|3[2-4])|8(?:1[2-689]|2[2-8]|(?:[35]2|64)\\\\d))\\\\d{4}|25\\\\d{5,6}|(?:2[2-9]|6(?:1[2356]|[24][2-6]|3[24-6]|5[2-4]|6[2-8]|7[235-7]|8[245]|9[24])|8(?:3[24]|5[245]))\\\\d{4}\",[6,7,8,9]],[\"(?:17[01]|9(?:2(?:[0-4]|[56]\\\\d\\\\d)|(?:3(?:[0-36]|4\\\\d)|(?:6\\\\d|8[89]|9[4-8])\\\\d|7(?:3|40|[5-9]\\\\d))\\\\d|4(?:(?:[0245]\\\\d|[1379])\\\\d|88)|5[0-6])\\\\d)\\\\d{4}|9[69]1\\\\d{6}|9(?:[68]\\\\d|9[089])\\\\d{5}\",[7,8,9,10]],[\"80080(?:0[1-9]|2\\\\d)\\\\d{3}\",[10]],0,0,0,0,0,[\"1333\\\\d{4}\",[8]]]],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[5-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[12]2[1-3]\\\\d{5,6}|(?:(?:[12](?:1|27)|5[368])\\\\d\\\\d|7(?:0(?:[0-5]\\\\d|7[078]|80)|128))\\\\d{4}|[12](?:3[2-8]|4[2-68]|5[1-4689])\\\\d{6,7}\"],[\"(?:83[01]|92[0139])\\\\d{5}|(?:5[05]|6[069]|72|8[015689]|9[013-9])\\\\d{6}\",[8]],0,0,0,0,0,0,[\"712[0-79]\\\\d{4}|7(?:1[013-9]|[5-9]\\\\d)\\\\d{5}\",[8]]]],\"MO\":[\"853\",\"00\",\"0800\\\\d{3}|(?:28|[68]\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]],0,0,0,0,0,0,[[\"(?:28[2-9]|8(?:11|[2-57-9]\\\\d))\\\\d{5}\",[8]],[\"6800[0-79]\\\\d{3}|6(?:[235]\\\\d\\\\d|6(?:0[0-5]|[1-9]\\\\d)|8(?:0[1-9]|[14-8]\\\\d|2[5-9]|[39][0-4]))\\\\d{4}\",[8]],[\"0800\\\\d{3}\",[7]]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"670$1\",0,\"670\",[[\"670(?:2(?:3[3-7]|56|8[4-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MQ\":[\"596\",\"00\",\"(?:596\\\\d|7091)\\\\d{5}|(?:69|[89]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-79]|8(?:0[6-9]|[36])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:596(?:[03-7]\\\\d|1[05]|2[7-9]|8[0-39]|9[04-9])|80[6-9]\\\\d\\\\d|9(?:477[6-9]|767[4589]))\\\\d{4}\"],[\"(?:69[67]\\\\d\\\\d|7091[0-3])\\\\d{4}\"],[\"80[0-5]\\\\d{6}\"],[\"8[129]\\\\d{7}\"],0,0,0,0,[\"9(?:397[0-3]|477[0-5]|76(?:6\\\\d|7[0-367]))\\\\d{4}\"]]],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]],0,0,0,0,0,0,[[\"(?:25[08]|35\\\\d|45[1-7])\\\\d{5}\"],[\"[2-4][0-46-9]\\\\d{6}\"],[\"800\\\\d{5}\"]]],\"MS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|664|900)\\\\d{7}\",[10],0,\"1\",0,\"([34]\\\\d{6})$|1\",\"664$1\",0,\"664\",[[\"6644(?:1[0-3]|91)\\\\d{4}\"],[\"664(?:3(?:49|9[1-6])|49[2-6])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]],0,0,0,0,0,0,[[\"20(?:3[1-4]|6[059])\\\\d{4}|2(?:0[19]|[1-357]\\\\d|60)\\\\d{5}\"],[\"(?:7(?:210|[79]\\\\d\\\\d)|9(?:[29]\\\\d\\\\d|69[67]|8(?:1[1-3]|89|97)))\\\\d{4}\"],[\"800(?:02|[3467]\\\\d)\\\\d{3}\"],[\"5(?:0(?:0(?:37|43)|(?:6\\\\d|70|9[0168])\\\\d)|[12]\\\\d0[1-5])\\\\d{3}\"],0,0,[\"501\\\\d{5}\"],[\"7117\\\\d{4}\"],[\"3550\\\\d{4}\"]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[57]|8\\\\d\\\\d)\\\\d{7}|[2-468]\\\\d{6}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57]\"]],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,[[\"(?:2(?:[0346-8]\\\\d|1[0-8])|4(?:[013568]\\\\d|2[4-8]|71|90)|54(?:[3-5]\\\\d|71)|6\\\\d\\\\d|8(?:14|3[129]))\\\\d{4}\",[7,8]],[\"5(?:4(?:2[1-389]|7[1-9])|87[15-8])\\\\d{4}|(?:5(?:2[5-9]|4[3-689]|[57]\\\\d|8[0-689]|9[0-8])|7(?:0[0-6]|3[013]))\\\\d{5}\",[8]],[\"802\\\\d{7}|80[0-2]\\\\d{4}\",[7,10]],[\"30\\\\d{5}\",[7]],0,0,0,[\"219\\\\d{4}\",[7]],[\"3(?:20|9\\\\d)\\\\d{4}\",[7]]],\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[34679]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[[\"(?:3(?:0[0-4]|3[0-59])|6(?:[58][024689]|6[024-68]|7[02468]))\\\\d{4}\",[7]],[\"(?:46[46]|[79]\\\\d\\\\d)\\\\d{4}\",[7]],[\"800\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]],0,0,[\"4(?:0[01]|50)\\\\d{4}\",[7]]],\"00\"],\"MW\":[\"265\",\"00\",\"(?:[1289]\\\\d|31|77)\\\\d{7}|1\\\\d{6}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[137-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[2-9]|2[12]\\\\d\\\\d)\\\\d{5}\"],[\"111\\\\d{6}|(?:31|77|[89][89])\\\\d{7}\",[9]]]],\"MX\":[\"52\",\"0[09]\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:0[01]|2\\\\d|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[267][1-9]|3[1-8]|[45]\\\\d|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-36-9]|6[0-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1346][1-9]|[27]\\\\d|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[0-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69]\\\\d|7[12]|8[1-8]))\\\\d{7}\"],[\"(?:2(?:2\\\\d|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[267][1-9]|3[1-8]|[45]\\\\d|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-36-9]|6[0-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1346][1-9]|[27]\\\\d|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[0-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69]\\\\d|7[12]|8[1-8]))\\\\d{7}\"],[\"8(?:00|88)\\\\d{7}\"],[\"900\\\\d{7}\"],[\"500\\\\d{7}\"],0,0,0,0,[\"300\\\\d{7}\"]],\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[378][1-9]|53)|8\",\"1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1(?:[367]|80)\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"427[01]\\\\d{4}|(?:3(?:2[0-36-9]|3[0-368]|4[0-278]|5[0-24-8]|6[0-467]|7[1246-9]|8\\\\d|9[0-57])\\\\d|4(?:2[0-689]|[3-79]\\\\d|8[1-35689])|5(?:2[0-589]|[3468]\\\\d|5[0-489]|7[1-9]|9[23])|6(?:2[2-9]|3[1357-9]|[46]\\\\d|5[0-6]|7[0-35-9]|85|9[015-8])|7(?:[2579]\\\\d|3[03-68]|4[0-8]|6[5-9]|8[0-35-9])|8(?:[24][2-8]|3[2-5]|5[2-7]|6[2-589]|7[2-578]|[89][2-9])|9(?:0[57]|13|[25-7]\\\\d|[3489][0-8]))\\\\d{5}\",[8,9]],[\"1(?:1888[689]|4400|8(?:47|8[27])[0-4])\\\\d{4}|1(?:0(?:[23568]\\\\d|4[0-6]|7[016-9]|9[0-8])|1(?:[1-5]\\\\d\\\\d|6(?:0[5-9]|[1-9]\\\\d)|7(?:[0-4]\\\\d|5[0-7]))|(?:[269]\\\\d|[37][1-9]|4[235-9])\\\\d|5(?:31|9\\\\d\\\\d)|8(?:1[23]|[236]\\\\d|4[06]|5(?:46|[7-9])|7[016-9]|8[01]|9[0-8]))\\\\d{5}\",[9,10]],[\"1[378]00\\\\d{6}\",[10]],[\"1600\\\\d{6}\",[10]],0,0,0,0,[\"15(?:4(?:6[0-4]\\\\d|8(?:0[125]|[17]\\\\d|21|3[01]|4[01589]|5[014]|6[02]))|6(?:32[0-6]|78\\\\d))\\\\d{4}\",[10]]]],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-79]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"2(?:[1346]\\\\d|5[0-2]|[78][12]|93)\\\\d{5}\",[8]],[\"8[2-79]\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"64426\\\\d{3}|6(?:1(?:2[2-7]|3[01378]|4[0-4])|254|32[0237]|4(?:27|41|5[25])|52[236-8]|626|7(?:2[2-4]|30))\\\\d{4,5}|6(?:1(?:(?:0\\\\d|2[0189]|3[24-69]|4[5-9])\\\\d|17|69|7[014])|2(?:17|5[0-36-8]|69|70)|3(?:17|2[14-689]|34|6[289]|7[01]|81)|4(?:17|2[0-2]|4[06]|5[0137]|69|7[01])|5(?:17|2[0459]|69|7[01])|6(?:17|25|38|42|69|7[01])|7(?:17|2[569]|3[13]|6[89]|7[01]))\\\\d{4}\"],[\"(?:60|8[1245])\\\\d{7}\",[9]],[\"80\\\\d{7}\",[9]],[\"8701\\\\d{5}\",[9]],0,0,0,0,[\"8(?:3\\\\d\\\\d|86)\\\\d{5}\"]]],\"NC\":[\"687\",\"00\",\"(?:050|[2-57-9]\\\\d\\\\d)\\\\d{3}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[02-57-9]\"]]],0,0,0,0,0,0,[[\"(?:2[03-9]|3[0-5]|4[1-7]|88)\\\\d{4}\"],[\"(?:[579]\\\\d|8[0-79])\\\\d{4}\"],[\"050\\\\d{3}\"],[\"36\\\\d{4}\"]]],\"NE\":[\"227\",\"00\",\"[027-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[013]|7[0467]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:20|3[1-8]|4[13-5]|5[14]|6[14578]|7[1-578])|1(?:4[145]|5[14]|6[14-68]|7[169]|88))\\\\d{4}\"],[\"(?:23|7[0467]|[89]\\\\d)\\\\d{6}\"],[\"08\\\\d{6}\"],[\"09\\\\d{6}\"]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1[0-3]\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"[13]\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\",0,0,[[\"(?:1(?:06|17|28|39)|3[0-2]\\\\d)\\\\d{3}\"],[\"(?:14|3[58])\\\\d{4}\"]]],\"NG\":[\"234\",\"009\",\"(?:20|9\\\\d)\\\\d{8}|[78]\\\\d{9,13}\",[10,11,12,13,14],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"20[129]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"20(?:[1259]\\\\d|3[013-9]|4[1-8]|6[024-689]|7[1-79]|8[2-9])\\\\d{6}\",[10]],[\"(?:702[0-24-9]|819[01])\\\\d{6}|(?:7(?:0[13-9]|[12]\\\\d)|8(?:0[1-9]|1[0-8])|9(?:0[1-9]|1[1-6]))\\\\d{7}\",[10]],[\"800\\\\d{7,11}\"],0,0,0,[\"700\\\\d{7,11}\"]]],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]],0,0,0,0,0,0,[[\"2\\\\d{7}\"],[\"(?:5(?:5[0-7]|[78]\\\\d)|6(?:20|3[035]|4[045]|5[05]|77|8[1-9]|9[059])|(?:7[5-8]|8\\\\d)\\\\d)\\\\d{5}\"],[\"1800\\\\d{4}\"]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|8\\\\d{6,9}|9\\\\d{6,10}|1\\\\d{4,5}\",[5,6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-578]|91\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:[035]\\\\d|1[13-578]|6[124-8]|7[24]|8[0-467])|2(?:[0346]\\\\d|2[2-46-9]|5[125]|9[479])|3(?:[03568]\\\\d|1[3-8]|2[01]|4[1-8])|4(?:[0356]\\\\d|1[1-368]|7[58]|8[15-8]|9[23579])|5(?:[0358]\\\\d|[19][1-9]|2[1-57-9]|4[13-8]|6[126]|7[0-3578])|7\\\\d\\\\d)\\\\d{6}\",[9]],[\"(?:6[1-58]|970\\\\d)\\\\d{7}\",[9,11]],[\"800\\\\d{4,7}\",[7,8,9,10]],[\"90[069]\\\\d{4,7}\",[7,8,9,10]],0,0,[\"140(?:1[035]|2[0346]|3[03568]|4[0356]|5[0358]|8[458])|(?:140(?:1[16-8]|2[259]|3[124]|4[17-9]|5[124679]|7)|8[478]\\\\d{6})\\\\d\",[5,6,9]],[\"66\\\\d{7}\",[9]],[\"(?:85|91)\\\\d{7}\",[9]]]],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\",[[\"(?:2[1-4]|3[1-3578]|5[1-35-7]|6[1-4679]|7[0-8])\\\\d{6}\",[8]],[\"(?:4[015-8]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],[\"81[23]\\\\d{5}\",[8]],[\"(?:0[235-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"NP\":[\"977\",\"00\",\"(?:1\\\\d|9)\\\\d{9}|[1-9]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"1[01]|[2-8]|9(?:[1-59]|[67][2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"(?:1[0-6]\\\\d|99[02-6])\\\\d{5}|(?:2[13-79]|3[135-8]|4[146-9]|5[135-7]|6[13-9]|7[15-9]|8[1-46-9]|9[1-7])[2-6]\\\\d{5}\",[8]],[\"9(?:00|6[0-3]|7[024-6]|8[0-24-68])\\\\d{7}\",[10]],[\"1(?:66001|800\\\\d\\\\d)\\\\d{5}\",[11]]]],\"NR\":[\"674\",\"00\",\"(?:222|444|(?:55|8\\\\d)\\\\d|666|777|999)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[24-9]\"]]],0,0,0,0,0,0,[[\"444\\\\d{4}\"],[\"(?:222|55[3-9]|666|777|8\\\\d\\\\d|999)\\\\d{4}\"]]],\"NU\":[\"683\",\"00\",\"(?:[4-7]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,[[\"[47]\\\\d{3}\",[4]],[\"(?:[56]|888[1-9])\\\\d{3}\"]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"[1289]\\\\d{9}|50\\\\d{5}(?:\\\\d{2,3})?|[27-9]\\\\d{7,8}|(?:[34]\\\\d|6[0-35-9])\\\\d{6}|8\\\\d{4,6}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"8[1-79]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"50[036-8]|8|90\",\"50(?:[0367]|88)|8|90\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[589]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1|2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"240\\\\d{5}|(?:3[2-79]|[49][2-9]|6[235-9]|7[2-57-9])\\\\d{6}\",[8]],[\"2(?:[0-27-9]\\\\d|6)\\\\d{6,7}|2(?:1\\\\d|75)\\\\d{5}\",[8,9,10]],[\"508\\\\d{6,7}|80\\\\d{6,8}\",[8,9,10]],[\"(?:1[13-57-9]\\\\d{5}|50(?:0[08]|30|66|77|88))\\\\d{3}|90\\\\d{6,8}\",[7,8,9,10]],[\"70\\\\d{7}\",[9]],0,[\"8(?:1[16-9]|22|3\\\\d|4[045]|5[459]|6[235-9]|7[0-3579]|90)\\\\d{2,7}\"]],\"00\"],\"OM\":[\"968\",\"00\",\"(?:1505|[279]\\\\d{3}|500)\\\\d{4}|800\\\\d{5,6}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[179]\"]]],0,0,0,0,0,0,[[\"2[1-6]\\\\d{6}\",[8]],[\"(?:1505|90[1-9]\\\\d)\\\\d{4}|(?:7[126-9]|9[1-9])\\\\d{6}\",[8]],[\"8007\\\\d{4,5}|(?:500|800[05])\\\\d{4}\"],[\"900\\\\d{5}\",[8]]]],\"PA\":[\"507\",\"00\",\"(?:00800|8\\\\d{3})\\\\d{6}|[68]\\\\d{7}|[1-57-9]\\\\d{6}\",[7,8,10,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[68]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"(?:1(?:0\\\\d|1[479]|2[37]|3[0137]|4[17]|5[05]|6[058]|7[0167]|8[2358]|9[1389])|2(?:[0235-79]\\\\d|1[0-7]|4[013-9]|8[02-9])|3(?:[047-9]\\\\d|1[0-8]|2[0-5]|33|5[0-35]|6[068])|4(?:00|3[0-579]|4\\\\d|7[0-57-9])|5(?:[01]\\\\d|2[0-7]|[56]0|79)|7(?:0[09]|2[0-26-8]|3[03]|4[04]|5[05-9]|6[0156]|7[0-24-9]|8[4-9]|90)|8(?:09|2[89]|3\\\\d|4[0-24-689]|5[014]|8[02])|9(?:0[5-9]|1[0135-8]|2[036-9]|3[35-79]|40|5[0457-9]|6[05-9]|7[04-9]|8[35-8]|9\\\\d))\\\\d{4}\",[7]],[\"(?:1[16]1|21[89]|6\\\\d{3}|8(?:1[01]|7[23]))\\\\d{4}\",[7,8]],[\"800\\\\d{4,5}|(?:00800|800\\\\d)\\\\d{6}\"],[\"(?:8(?:22|55|60|7[78]|86)|9(?:00|81))\\\\d{4}\",[7]]]],\"PE\":[\"51\",\"00|19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"(?:(?:(?:4[34]|5[14])[0-8]|687)\\\\d|7(?:173|(?:3[0-8]|55)\\\\d)|8(?:10[05689]|6(?:0[06-9]|1[6-9]|29)|7(?:0[0569]|[56]0)))\\\\d{4}|(?:1[0-8]|4[12]|5[236]|6[1-7]|7[246]|8[2-4])\\\\d{6}\",[8]],[\"9\\\\d{8}\",[9]],[\"800\\\\d{5}\",[8]],[\"805\\\\d{5}\",[8]],[\"80[24]\\\\d{5}\",[8]],0,0,0,0,[\"801\\\\d{5}\",[8]]],\"00\",\" Anexo \"],\"PF\":[\"689\",\"00\",\"4\\\\d{5}(?:\\\\d{2})?|8\\\\d{7,8}\",[6,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4|8[7-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]],0,0,0,0,0,0,[[\"4(?:0[4-689]|9[4-68])\\\\d{5}\",[8]],[\"8[7-9]\\\\d{6}\",[8]],[\"80[0-5]\\\\d{6}\",[9]],0,0,0,[\"44\\\\d{4}\",[6]],0,[\"499\\\\d{5}\",[8]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,[[\"(?:(?:3[0-2]|4[257]|5[34]|9[78])\\\\d|64[1-9]|85[02-46-9])\\\\d{4}\",[7]],[\"(?:7\\\\d|8[1-38])\\\\d{6}\",[8]],[\"180\\\\d{4}\",[7]],0,0,0,0,[\"27[01]\\\\d{4}\",[7]],[\"2(?:0[0-57]|7[568])\\\\d{4}\",[7]]],\"00\"],\"PH\":[\"63\",\"00\",\"(?:[2-7]|9\\\\d)\\\\d{8}|2\\\\d{5}|(?:1800|8)\\\\d{7,9}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:(?:2[3-8]|3[2-68]|4[2-9]|5[2-6]|6[2-58]|7[24578])\\\\d{3}|88(?:22\\\\d\\\\d|42))\\\\d{4}|(?:2|8[2-8]\\\\d\\\\d)\\\\d{5}\",[6,8,9,10]],[\"(?:8(?:1[37]|9[5-8])|9(?:0[5-9]|1[0-24-9]|[235-7]\\\\d|4[2-9]|8[135-9]|9[1-9]))\\\\d{7}\",[10]],[\"1800\\\\d{7,9}\",[11,12,13]]]],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[06-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,7})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:(?:21|42)[2-9]|58[126])\\\\d{7}|(?:2[25]|4[0146-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\\\\d{6,7}|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8]))[2-9]\\\\d{5,6}\",[9,10]],[\"3(?:[0-247]\\\\d|3[0-79]|55|64)\\\\d{7}\",[10]],[\"800\\\\d{5}(?:\\\\d{3})?\",[8,11]],[\"900\\\\d{5}\",[8]],[\"122\\\\d{6}\",[9]],0,[\"(?:2(?:[125]|3[2358]|4[2-4]|9[2-8])|4(?:[0-246-9]|5[3479])|5(?:[1-35-7]|4[2-467])|6(?:0[468]|[1-8])|7(?:[14]|2[236])|8(?:[16]|2[2-689]|3[23578]|4[3478]|5[2356])|9(?:1|22|3[27-9]|4[2-6]|6[3569]|9[2-7]))111\\\\d{6}\",[11,12]]]],\"PL\":[\"48\",\"00\",\"(?:6|8\\\\d\\\\d)\\\\d{7}|[1-9]\\\\d{6}(?:\\\\d{2})?|[26]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|20|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-7]|8[1-79]|9[145]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"47\\\\d{7}|(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])(?:[02-9]\\\\d{6}|1(?:[0-8]\\\\d{5}|9\\\\d{3}(?:\\\\d{2})?))\",[7,9]],[\"2131[89]\\\\d{4}|21(?:1[013-5]|2\\\\d|3[2-9])\\\\d{5}|(?:45|5[0137]|6[069]|7[2389]|88)\\\\d{7}\",[9]],[\"800\\\\d{6,7}\",[9,10]],[\"70[01346-8]\\\\d{6}\",[9]],0,0,[\"804\\\\d{6}\",[9]],[\"64\\\\d{4,7}\",[6,7,8,9]],[\"39\\\\d{7}\",[9]],[\"801\\\\d{6}\",[9]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}|(?:708|8\\\\d\\\\d)\\\\d{6}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4[1-35-9]|5[0-47-9]|80[6-9]\\\\d\\\\d)\\\\d{4}\"],[\"(?:4[02-489]|5[02-9]|708(?:4[0-5]|5[0-6]))\\\\d{4}\"],[\"80[0-5]\\\\d{6}\",[9]],[\"8[129]\\\\d{7}\",[9]]]],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\",[[\"(?:787|939)[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:22[2-47-9]|42[45]|82[014-68]|92[3569])\\\\d{5}\",[8]],[\"5[69]\\\\d{7}\",[9]],[\"1800\\\\d{6}\",[10]],0,0,0,0,0,0,[\"1700\\\\d{6}\",[10]]]],\"PT\":[\"351\",\"00\",\"1693\\\\d{5}|(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"16|[236-9]\"]]],0,0,0,0,0,0,[[\"2(?:[12]\\\\d|3[1-689]|4[1-59]|[57][1-9]|6[1-35689]|8[1-69]|9[1256])\\\\d{6}\"],[\"6(?:[06]92(?:30|9\\\\d)|[35]92(?:[049]\\\\d|3[034]))\\\\d{3}|(?:(?:16|6[0356])93|9(?:[1-36]\\\\d\\\\d|480))\\\\d{5}\"],[\"80[02]\\\\d{6}\"],[\"(?:6(?:0[178]|4[68])\\\\d|76(?:0[1-57]|1[2-47]|2[237]))\\\\d{5}\"],[\"884[0-4689]\\\\d{5}\"],[\"600\\\\d{6}|6[06]92(?:0\\\\d|3[349]|49)\\\\d{3}\"],[\"70(?:38[01]|596|(?:7\\\\d|8[17])\\\\d)\\\\d{4}\"],[\"6(?:222\\\\d|89(?:00|88|99))\\\\d{4}\"],[\"30\\\\d{7}\"],[\"80(?:8\\\\d|9[1579])\\\\d{5}\"]]],\"PW\":[\"680\",\"01[12]\",\"(?:[24-8]\\\\d\\\\d|345|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:55|77)|345|488|5(?:35|44|87)|6(?:22|54|79)|7(?:33|47)|8(?:24|55|76)|900)\\\\d{4}\"],[\"(?:(?:46|83)[0-5]|(?:6[2-4689]|78)0)\\\\d{4}|(?:45|77|88)\\\\d{5}\"]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|9\\\\d{5,10}|(?:[2-46-8]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9(?:[5-79]|8[1-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"(?:[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36])\\\\d{5,7}|(?:2(?:2[4-68]|[4-68]\\\\d|7[15]|9[1-5])|3(?:18|3[167]|4[2357]|51|[67]\\\\d)|4(?:3[12]|5[13]|9[1-47])|5(?:[1-4]\\\\d|5[02-4])|6(?:3[1-3]|44|7[1-8])|7(?:4[0-4]|5\\\\d|6[1-578]|75|8[0-8])|858)\\\\d{5,6}\",[7,8,9]],[\"9(?:51|6[129]|7[1-6]|8[1-7]|9[1-5])\\\\d{6}\",[9]],[\"9800\\\\d{5,7}\",[9,10,11]],0,0,0,[\"[2-9]0\\\\d{4,7}\",[6,7,8,9]],0,[\"8700[0-4]\\\\d{4}\",[9]]]],\"QA\":[\"974\",\"00\",\"800\\\\d{4}|(?:2|800)\\\\d{6}|(?:0080|[3-7])\\\\d{7}\",[7,8,9,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[136]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[3-7]\"]]],0,0,0,0,0,0,[[\"4(?:1111|2022)\\\\d{3}|4(?:[04]\\\\d\\\\d|14[0-6]|999)\\\\d{4}\",[8]],[\"[35-7]\\\\d{7}\",[8]],[\"800\\\\d{4}|(?:0080[01]|800)\\\\d{6}\",[7,9,11]],0,0,0,0,[\"2[136]\\\\d{5}\",[7]]]],\"RE\":[\"262\",\"00\",\"709\\\\d{6}|(?:26|[689]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[26-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"26(?:2\\\\d\\\\d|3(?:0\\\\d|1[0-6]))\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:[06][0-6]|1[0-3]|2[0-2]|3[0-39]|4\\\\d|5[0-5]|7[0-37]|8[0-8]|9[0-479]))|7092[0-3])\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,[\"9(?:399[0-3]|479[0-6]|76(?:2[278]|3[0-37]))\\\\d{4}\"],[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[236-8]\\\\d|90)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[23][13-6]\\\\d{7}|(?:2(?:19\\\\d|[3-6]\\\\d9)|31\\\\d\\\\d)\\\\d\\\\d\"],[\"(?:630|702)0\\\\d{5}|(?:6(?:00|2\\\\d)|7(?:0[013-9]|1[0-3]|[2-7]\\\\d|8[03-8]|9[0-39]))\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"90[0136]\\\\d{6}\",[9]],0,0,[\"(?:37\\\\d|80[578])\\\\d{6}\",[9]],0,0,[\"801\\\\d{6}\",[9]]],0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:11[1-9]\\\\d|(?:2[389]|39)(?:0[2-9]|[2-9]\\\\d))\\\\d{3,8}|(?:1[02-9]|2[0-24-7]|3[0-8])[2-9]\\\\d{4,9}\",[7,8,9,10,11,12]],[\"6(?:[0-689]|7\\\\d)\\\\d{6,7}\",[8,9,10]],[\"800\\\\d{3,9}\"],[\"(?:78\\\\d|90[0169])\\\\d{3,7}\",[6,7,8,9,10]],0,0,[\"7[06]\\\\d{4,10}\"]]],\"RU\":[\"7\",\"810\",\"8\\\\d{13}|[347-9]\\\\d{9}\",[10,14],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[349]|8(?:[02-7]|1[1-8])\"],\"8 ($1)\",1],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"8\"],\"8 ($1)\"]],\"8\",0,0,0,0,\"3[04-689]|[489]\",[[\"(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15]|6[1-35-79]|7[1-37-9]))\\\\d{7}\",[10]],[\"9\\\\d{9}\",[10]],[\"8(?:0[04]|108\\\\d{3})\\\\d{7}\"],[\"80[39]\\\\d{7}\",[10]],[\"808\\\\d{7}\",[10]]],\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:06|2[23568]\\\\d)\\\\d{6}\"],[\"7[237-9]\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"900\\\\d{6}\",[9]]]],\"SA\":[\"966\",\"00\",\"(?:[15]\\\\d|800|92)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,0,0,0,0,[[\"1(?:1\\\\d|2[24-8]|3[35-8]|4[3-68]|6[2-5]|7[235-7])\\\\d{6}\",[9]],[\"579[01]\\\\d{5}|5(?:[013-689]\\\\d|7[0-8])\\\\d{6}\",[9]],[\"800\\\\d{7}\",[10]],[\"925\\\\d{6}\",[9]],0,0,0,0,0,[\"920\\\\d{6}\",[9]]]],\"SB\":[\"677\",\"0[01]\",\"[6-9]\\\\d{6}|[1-6]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"6[89]|7|8[4-9]|9(?:[1-8]|9[0-8])\"]]],0,0,0,0,0,0,[[\"(?:1[4-79]|[23]\\\\d|4[0-2]|5[03]|6[0-37])\\\\d{3}\",[5]],[\"48\\\\d{3}|(?:(?:6[89]|7[1-9]|8[4-9])\\\\d|9(?:1[2-9]|2[013-9]|3[0-2]|[46]\\\\d|5[0-46-9]|7[0-689]|8[0-79]|9[0-8]))\\\\d{4}\"],[\"1[38]\\\\d{3}\",[5]],0,0,0,0,0,[\"5[12]\\\\d{3}\",[5]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"(?:[2489]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]|9[57]\"]]],0,0,0,0,0,0,[[\"4[2-46]\\\\d{5}\"],[\"2[125-8]\\\\d{5}\"],[\"800[08]\\\\d{3}\"],[\"85\\\\d{5}\"],0,0,0,0,[\"971\\\\d{4}|(?:64|95)\\\\d{5}\"]],\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1(?:5\\\\d|8[35-7])\\\\d{6}\"],[\"(?:1[0-2]|9[0-3569])\\\\d{7}\"]]],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10,12],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44|9)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\",0,0,0,0,0,[[\"(?:(?:[12][136]|3[356]|4[0246]|6[03]|8\\\\d)\\\\d|90[1-9])\\\\d{4,6}|(?:1(?:2[0-35]|4[0-4]|5[0-25-9]|7[13-6]|[89]\\\\d)|2(?:2[0-7]|4[0136-8]|5[0138]|7[018]|8[01]|9[0-57])|3(?:0[0-4]|1\\\\d|2[0-25]|4[056]|7[0-2]|8[0-3]|9[023])|4(?:1[013-8]|3[0135]|5[14-79]|7[0-246-9]|8[0156]|9[0-689])|5(?:0[0-6]|[15][0-5]|2[0-68]|3[0-4]|4\\\\d|6[03-5]|7[013]|8[0-79]|9[01])|6(?:1[1-3]|2[0-4]|4[02-57]|5[0-37]|6[0-3]|7[0-2]|8[0247]|9[0-356])|9(?:1[0-68]|2\\\\d|3[02-5]|4[0-3]|5[0-4]|[68][01]|7[0135-8]))\\\\d{5,6}\",[7,8,9]],[\"7[02369]\\\\d{7}\",[9]],[\"20\\\\d{4,7}\",[6,7,8,9]],[\"649\\\\d{6}|99[1-59]\\\\d{4}(?:\\\\d{3})?|9(?:00|39|44)[1-8]\\\\d{3,6}\",[7,8,9,10]],[\"75[1-8]\\\\d{6}\",[9]],[\"(?:25[245]|67[3-68])\\\\d{9}\",[12]],[\"10[1-8]\\\\d{6}\",[9]],[\"74[02-9]\\\\d{6}\",[9]],0,[\"77[0-7]\\\\d{6}\",[9]]]],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8(?:0[1-9]|[1-9])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[[\"662[0-24-9]\\\\d{4}|6(?:[0-578]\\\\d|6[013-57-9]|9[0-35-9])\\\\d{5}\",[8]],[\"897[0-5]\\\\d{4}|(?:8(?:0[1-9]|[1-8]\\\\d|9[0-6])|9[0-8]\\\\d)\\\\d{5}\",[8]],[\"(?:18|8)00\\\\d{7}\",[10,11]],[\"1900\\\\d{7}\",[11]],0,0,[\"7000\\\\d{7}\",[11]],0,[\"(?:3[12]\\\\d|666)\\\\d{5}\",[8]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\",[[\"2(?:[0-57-9]\\\\d|6[4-9])\\\\d\\\\d\"],[\"[56]\\\\d{4}\",[5]],0,0,0,0,0,0,[\"262\\\\d\\\\d\",[5]]]],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:[1-357][2-8]|4[24-8])\\\\d{6}\",[8]],[\"65(?:[178]\\\\d|5[56]|6[01])\\\\d{4}|(?:[37][01]|4[0139]|51|6[489])\\\\d{6}\",[8]],[\"80\\\\d{4,6}\",[6,7,8]],[\"89[1-3]\\\\d{2,5}|90\\\\d{4,6}\"],0,0,0,0,[\"(?:59\\\\d\\\\d|8(?:1(?:[67]\\\\d|8[0-589])|2(?:0\\\\d|2[0-37-9]|8[0-2489])|3[389]\\\\d))\\\\d{4}\",[8]]],\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[489]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\",[[\"79\\\\d{6}\",[8]],[\"(?:4[015-8]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],[\"81[23]\\\\d{5}\",[8]],[\"(?:0[235-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:16|[2-9]\\\\d{3})|(?:(?:[3-5][1-8]\\\\d|819)\\\\d|601[1-5])\\\\d)\\\\d{4}|(?:2|[3-5][1-8])1[67]\\\\d{3}|[3-5][1-8]16\\\\d\\\\d\"],[\"909[1-9]\\\\d{5}|9(?:0[1-8]|1[0-24-9]|4[03-57-9]|5\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"9(?:00|[78]\\\\d)\\\\d{6}\",[9]],0,0,[\"96\\\\d{7}\",[9]],[\"9090\\\\d{3}\",[7]],[\"6(?:02|5[0-4]|9[0-6])\\\\d{6}\",[9]],[\"8[5-9]\\\\d{7}\",[9]]]],\"SL\":[\"232\",\"00\",\"(?:[237-9]\\\\d|66)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[236-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"22[2-4][2-9]\\\\d{4}\"],[\"(?:25|3[0-5]|66|7[1-9]|8[08]|9[09])\\\\d{6}\"]]],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\",0,0,[[\"0549(?:8[0157-9]|9\\\\d)\\\\d{4}\",[10]],[\"6[16]\\\\d{6}\",[8]],0,[\"7[178]\\\\d{6}\",[8]],0,0,0,0,[\"5[158]\\\\d{6}\",[8]]]],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d|93)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]],0,0,0,0,0,0,[[\"3(?:0(?:1[0-2]|80)|282|3(?:8[1-9]|9[3-9])|611)\\\\d{5}\"],[\"7(?:(?:[06-8]\\\\d|[19]0|21)\\\\d|5(?:0[01]|[19]0|2[25]|3[356]|[4-7]\\\\d|8[35]))\\\\d{5}\"],[\"800\\\\d{6}\"],[\"88[4689]\\\\d{6}\"],0,0,0,0,[\"(?:3(?:392|9[01]\\\\d)\\\\d|93(?:3[13]0|929))\\\\d{4}\"],[\"81[02468]\\\\d{6}\"]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|[1-5]\\\\d{6}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"[15]|2[0-79]|3[0-46-8]|4[0-7]\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"(?:2|90)4|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[0-35-9]|7[67]|9[2-9]\"]]],\"0\",0,0,0,0,0,[[\"(?:1\\\\d|2[0-79]|3[0-46-8]|4[0-7]|5[57-9])\\\\d{5}|(?:[134]\\\\d|8[125])\\\\d{4}\",[6,7]],[\"(?:(?:15|(?:3[59]|4[89]|6\\\\d|7[679]|8[08])\\\\d|9(?:0\\\\d|[2-9]))\\\\d|2(?:4\\\\d|8))\\\\d{5}|(?:[67]\\\\d\\\\d|904)\\\\d{5}\",[7,8,9]]]],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d|90)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-9]\"]]],0,0,0,0,0,0,[[\"(?:2[1-3]|3[0-7]|(?:4|68)\\\\d|5[2-58])\\\\d{4}\"],[\"(?:7[124-7]|8[1-9])\\\\d{5}\",[7]],[\"80\\\\d{5}\",[7]],[\"90\\\\d{5}\",[7]],0,0,0,0,[\"56\\\\d{4}\",[6]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1[89]\\\\d{7}\"],[\"(?:12|9[1257-9])\\\\d{7}\"]]],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]],0,0,0,0,0,0,[[\"22\\\\d{5}\"],[\"900[5-9]\\\\d{3}|9(?:0[1-9]|[89]\\\\d)\\\\d{4}\"]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|(?:80\\\\d|900)\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[[\"2(?:79(?:0[0347-9]|[1-9]\\\\d)|89(?:0[024589]|[1-9]\\\\d))\\\\d{3}|2(?:[1-69]\\\\d|[78][0-8])\\\\d{5}\",[8]],[\"[67]\\\\d{7}\",[8]],[\"800\\\\d{8}|80[01]\\\\d{4}\",[7,11]],[\"900\\\\d{4}(?:\\\\d{4})?\",[7,11]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"(5\\\\d{6})$|1\",\"721$1\",0,\"721\",[[\"7215(?:4[2-8]|8[239]|9[056])\\\\d{4}\"],[\"7215(?:1[02]|2\\\\d|5[034679]|8[014-8])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"21\\\\d{6,7}|(?:1(?:[14]\\\\d|[2356])|2[235]|3(?:[13]\\\\d|4)|4[134]|5[1-3])\\\\d{6}\"],[\"9[1-9]\\\\d{7}\",[9]]]],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]],0,0,0,0,0,0,[[\"[23][2-5]\\\\d{6}\",[8]],[\"7[6-9]\\\\d{6}\",[8]],[\"0800\\\\d{4}\",[8]],[\"900\\\\d{6}\",[9]],0,0,0,0,[\"70\\\\d{6}\",[8]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\",[[\"8\\\\d{3}\"]]],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-479]\\\\d{6})$|1\",\"649$1\",0,\"649\",[[\"649(?:266|712|9(?:4\\\\d|50))\\\\d{4}\"],[\"649(?:2(?:3[129]|4[1-79])|3\\\\d\\\\d|4[34][1-3])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"649(?:71[01]|966)\\\\d{4}\"]]],\"TD\":[\"235\",\"00|16\",\"(?:22|[689]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[26-9]\"]]],0,0,0,0,0,0,[[\"22(?:[37-9]0|5[0-5]|6[89])\\\\d{4}\"],[\"(?:[69]\\\\d|77|8[56])\\\\d{6}\"]],\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]],0,0,0,0,0,0,[[\"2(?:2[2-7]|3[23]|4[45]|55|6[67]|77)\\\\d{5}\"],[\"(?:7[0-29]|9[0-36-9])\\\\d{6}\"]]],\"TH\":[\"66\",\"00[1-9]\",\"(?:001800|[2-57]|[689]\\\\d)\\\\d{7}|1\\\\d{7,9}\",[8,9,10,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:1[0689]|2\\\\d|3[2-9]|4[2-5]|5[2-6]|7[3-7])\\\\d{6}\",[8]],[\"67(?:1[0-8]|2[4-7])\\\\d{5}|(?:14|6[1-6]|[89]\\\\d)\\\\d{7}\",[9]],[\"(?:001800\\\\d|1800)\\\\d{6}\",[10,13]],[\"1900\\\\d{6}\",[10]],0,0,0,0,[\"6[08]\\\\d{7}\",[9]]]],\"TJ\":[\"992\",\"810\",\"[0-57-9]\\\\d{8}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"44[02-479]|[34]7\"]],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[1245]|3[12])\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0-57-9]\"]]],0,0,0,0,0,0,[[\"(?:3(?:1[3-5]|2[245]|3[12]|4[24-7]|5[25]|72)|4(?:46|74|87))\\\\d{6}\"],[\"(?:33[03-9]|4(?:1[18]|4[02-479])|81[1-9])\\\\d{6}|(?:[09]\\\\d|1[0-27-9]|2[0-27]|[34]0|5[05]|7[01578]|8[078])\\\\d{7}\"]],\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7],0,0,0,0,0,0,0,[[\"(?:2[2-4]|[34]\\\\d)\\\\d{2,5}\"],[\"7[2-4]\\\\d{2,5}\"]]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"(?:2[1-5]|3[1-9]|4[1-4])\\\\d{5}\",[7]],[\"7[2-8]\\\\d{6}\",[8]],[\"80\\\\d{5}\",[7]],[\"90\\\\d{5}\",[7]],[\"70\\\\d{5}\",[7]]]],\"TM\":[\"993\",\"810\",\"(?:[1-6]\\\\d|71)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[67]\"],\"8 $1\"]],\"8\",0,0,0,0,0,[[\"(?:1(?:2\\\\d|3[1-9])|2(?:22|4[0-35-8])|3(?:22|4[03-9])|4(?:22|3[128]|4\\\\d|6[15])|5(?:22|5[7-9]|6[014-689]))\\\\d{5}\"],[\"(?:6\\\\d|71)\\\\d{6}\"]],\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]],0,0,0,0,0,0,[[\"81200\\\\d{3}|(?:3[0-2]|7\\\\d)\\\\d{6}\"],[\"3(?:001|[12]40)\\\\d{4}|(?:(?:[259]\\\\d|4[0-8])\\\\d|3(?:1[1-35]|6[0-4]|91))\\\\d{5}\"],[\"8010\\\\d{4}\"],[\"88\\\\d{6}\"],0,0,0,0,0,[\"8[12]10\\\\d{4}\"]]],\"TO\":[\"676\",\"00\",\"(?:0800|(?:[5-8]\\\\d\\\\d|999)\\\\d)\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-9]\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[0-8]|4[0-4]|50|6[09]|7[0-24-69]|8[05])\\\\d{3}\",[5]],[\"(?:5(?:4[0-5]|5[4-6])|6(?:[09]\\\\d|3[02]|8[15-9])|(?:7\\\\d|8[46-9])\\\\d|999)\\\\d{4}\",[7]],[\"0800\\\\d{3}\",[7]],0,0,0,0,0,[\"55[0-37-9]\\\\d{4}\",[7]]]],\"TR\":[\"90\",\"00\",\"4\\\\d{6}|8\\\\d{11,12}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12,13],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[01589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|61[06])\",\"5(?:[0-59]|61[06]1)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6,7})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"(?:2(?:[13][26]|[28][2468]|[45][268]|[67][246])|3(?:[13][28]|[24-6][2468]|[78][02468]|92)|4(?:[16][246]|[23578][2468]|4[26]))\\\\d{7}\",[10]],[\"561(?:011|61\\\\d)\\\\d{4}|5(?:0[15-7]|1[06]|24|[34]\\\\d|5[1-59]|9[46])\\\\d{7}\",[10]],[\"8(?:00\\\\d{7}(?:\\\\d{2,3})?|11\\\\d{7})\",[10,12,13]],[\"(?:8[89]8|900)\\\\d{7}\",[10]],[\"592(?:21[12]|461)\\\\d{4}\",[10]],0,[\"444\\\\d{4}\",[7]],[\"512\\\\d{7}\",[10]],[\"850\\\\d{7}\",[10]]]],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-46-8]\\\\d{6})$|1\",\"868$1\",0,\"868\",[[\"868(?:2(?:01|1[5-9]|[23]\\\\d|4[0-2])|6(?:0[7-9]|1[02-8]|2[1-9]|[3-69]\\\\d|7[0-79])|82[124])\\\\d{4}\"],[\"868(?:(?:2[5-9]|3\\\\d)\\\\d|4(?:3[0-6]|[6-9]\\\\d)|6(?:20|78|8\\\\d)|7(?:0[1-9]|1[02-9]|[2-9]\\\\d))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],[\"868619\\\\d{4}\"]]],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"2[02-9]\\\\d{3}\",[5]],[\"(?:7[01]\\\\d|90)\\\\d{4}\",[6,7]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[2-8]\\\\d|370|55[01]|7[1-9])\\\\d{6}|4(?:(?:0(?:0[1-9]|[2-48]\\\\d)|1[023]\\\\d)\\\\d{4,5}|(?:[239]\\\\d\\\\d|4(?:0[56]|12|49))\\\\d{5})|6(?:[01]\\\\d{7}|4(?:0[56]|12|24|4[09])\\\\d{4,5})|8(?:(?:2(?:3\\\\d|4[0-269]|[578]0|66)|36[24-9]|90\\\\d\\\\d)\\\\d{4}|4(?:0[56]|12|24|4[09])\\\\d{4,5})|(?:2(?:2(?:0\\\\d\\\\d|4(?:0[68]|[249]0|3[0-467]|5[0-25-9]|6[0235689]))|(?:3(?:[09]\\\\d|1[0-4])|(?:4\\\\d|5[0-49]|6[0-29]|7[0-5])\\\\d)\\\\d)|(?:(?:3[2-9]|5[2-8]|6[0-35-79]|8[7-9])\\\\d\\\\d|4(?:2(?:[089]\\\\d|7[1-9])|(?:3[0-4]|[78]\\\\d|9[01])\\\\d))\\\\d)\\\\d{3}\",[8,9]],[\"(?:40001[0-2]|9[0-8]\\\\d{4})\\\\d{3}\",[9]],[\"80[0-79]\\\\d{6}|800\\\\d{5}\",[8,9]],[\"20(?:[013-9]\\\\d\\\\d|2)\\\\d{4}\",[7,9]],[\"99\\\\d{7}\",[9]],0,[\"50[0-46-9]\\\\d{6}\",[9]],0,[\"7010(?:[0-2679]\\\\d|3[0-7]|8[0-5])\\\\d{5}|70\\\\d{8}\",[10,11]]],0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[25-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2[2-8]\\\\d{7}\"],[\"(?:6[125-9]|7[13-9])\\\\d{7}\"],[\"80[08]\\\\d{6}\"],[\"90\\\\d{7}\"],0,0,0,0,[\"41\\\\d{7}\"],[\"8(?:40|6[01])\\\\d{6}\"]]],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])\",\"3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|89|9[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3[1-8]|4[13-8]|5[1-7]|6[12459])\\\\d{7}\",[9]],[\"790\\\\d{6}|(?:39|50|6[36-8]|7[1-357]|9[1-9])\\\\d{7}\",[9]],[\"800[1-8]\\\\d{5,6}\"],[\"900[239]\\\\d{5,6}\"],0,0,0,0,[\"89[1-579]\\\\d{6}\",[9]]],\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"20(?:(?:240|30[67])\\\\d|6(?:00[0-2]|30[0-4]))\\\\d{3}|(?:20(?:[017]\\\\d|2[5-9]|3[1-4]|5[0-4]|6[15-9])|[34]\\\\d{3})\\\\d{5}\"],[\"72[48]0\\\\d{5}|7(?:[015-8]\\\\d|2[067]|36|4[0-8]|9[0189])\\\\d{6}\"],[\"800[1-3]\\\\d{5}\"],[\"90[1-3]\\\\d{6}\"]]],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}|3\\\\d{6}\",[10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"310\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:3052(?:0[0-8]|[1-9]\\\\d)|5056(?:[0-35-9]\\\\d|4[0-68]))\\\\d{4}|(?:2742|305[3-9]|472[247-9]|505[2-57-9]|983[2-47-9])\\\\d{6}|(?:2(?:0[1-35-9]|1[02-9]|2[03-57-9]|3[1459]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-47-9]|1[02-9]|2[0135-79]|3[0-24679]|4[167]|5[0-2]|6[01349]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|3[016]|4[0156]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-8]|3[0-247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[0168]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"305209\\\\d{4}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"0004\\\\d{2,9}|[1249]\\\\d{7}|(?:[49]\\\\d|80)\\\\d{5}\",[6,7,8,9,10,11,12,13],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[49]0|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[124]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3 $4\",[\"0\"]]],\"0\",0,0,0,0,0,[[\"(?:1(?:770|9(?:20|[89]7))|(?:2\\\\d|4[2-7])\\\\d\\\\d)\\\\d{4}\",[8]],[\"9[1-9]\\\\d{6}\",[8]],[\"0004\\\\d{2,9}|(?:405|80[05])\\\\d{4}\"],[\"90[0-8]\\\\d{4}\",[7]]],\"00\",\" int. \"],\"UZ\":[\"998\",\"00\",\"(?:20|33|[5-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-9]\"]]],0,0,0,0,0,0,[[\"(?:55\\\\d\\\\d|6(?:1(?:22|3[124]|4[1-4]|5[1-3578]|64)|2(?:22|3[0-57-9]|41)|5(?:22|3[3-7]|5[024-8])|[69]\\\\d\\\\d|7(?:[23]\\\\d|7[69]))|7(?:0(?:5[4-9]|6[0146]|7[124-6]|9[135-8])|[168]\\\\d\\\\d|2(?:22|3[13-57-9]|4[1-3579]|5[14])|3(?:2\\\\d|3[1578]|4[1-35-7]|5[1-57]|61)|4(?:2\\\\d|3[1-579]|7[1-79])|5(?:22|5[1-9]|6[1457])|9(?:22|5[1-9])))\\\\d{5}\"],[\"(?:(?:[25]0|33|8[78]|9[0-57-9])\\\\d{3}|6(?:1(?:2(?:2[01]|98)|35[0-4]|50\\\\d|61[23]|7(?:[01][017]|4\\\\d|55|9[5-9]))|2(?:(?:11|7\\\\d)\\\\d|2(?:[12]1|9[01379])|5(?:[126]\\\\d|3[0-4]))|5(?:19[01]|2(?:27|9[26])|(?:30|59|7\\\\d)\\\\d)|6(?:2(?:1[5-9]|2[0367]|38|41|52|60)|(?:3[79]|9[0-3])\\\\d|4(?:56|83)|7(?:[07]\\\\d|1[017]|3[07]|4[047]|5[057]|67|8[0178]|9[79]))|7(?:2(?:24|3[237]|4[5-9]|7[15-8])|5(?:7[12]|8[0589])|7(?:0\\\\d|[39][07])|9(?:0\\\\d|7[079])))|7(?:[07]\\\\d{3}|2(?:2(?:2[79]|95)|3(?:2[5-9]|6[0-6])|57\\\\d|7(?:0\\\\d|1[17]|2[27]|3[37]|44|5[057]|66|88))|3(?:2(?:1[0-6]|21|3[469]|7[159])|(?:33|9[4-6])\\\\d|5(?:0[0-4]|5[579]|9\\\\d)|7(?:[0-3579]\\\\d|4[0467]|6[67]|8[078]))|4(?:2(?:29|5[0257]|6[0-7]|7[1-57])|5(?:1[0-4]|8\\\\d|9[5-9])|7(?:0\\\\d|1[024589]|2[0-27]|3[0137]|[46][07]|5[01]|7[5-9]|9[079])|9(?:7[015-9]|[89]\\\\d))|5(?:112|2(?:0\\\\d|2[29]|[49]4)|3[1568]\\\\d|52[6-9]|7(?:0[01578]|1[017]|[23]7|4[047]|[5-7]\\\\d|8[78]|9[079]))|9(?:22[128]|3(?:2[0-4]|7\\\\d)|57[02569]|7(?:2[05-9]|3[37]|4\\\\d|60|7[2579]|87|9[07]))))\\\\d{4}\"]]],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11,12],0,0,0,0,0,0,\"06698\",[[\"06698\\\\d{1,6}\",[6,7,8,9,10,11]],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d{3}|89(?:2\\\\d|3[04]|4(?:[0-4]|[5-9]\\\\d\\\\d)|5[0-4]))\\\\d\\\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],[\"3[2-8]\\\\d{9,10}\",[11,12]],0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-7]\\\\d{6})$|1\",\"784$1\",0,\"784\",[[\"784(?:266|3(?:6[6-9]|7\\\\d|8[0-6])|4(?:38|5[0-36-8]|8[0-8])|5(?:55|7[0-2]|93)|638|784)\\\\d{4}\"],[\"784(?:4(?:3[0-5]|5[45]|89|9[0-8])|5(?:2[6-9]|3[0-4])|720)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"78451[0-2]\\\\d{4}\"]]],\"VE\":[\"58\",\"00\",\"[68]00\\\\d{7}|(?:[24]\\\\d|[59]0)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24-689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:12|3[457-9]|[467]\\\\d|[58][1-9]|9[1-6])|[4-6]00)\\\\d{7}\"],[\"4(?:1[24-8]|2[246])\\\\d{7}\"],[\"800\\\\d{7}\"],[\"90[01]\\\\d{7}\"],0,0,[\"501\\\\d{7}\"]]],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"([2-578]\\\\d{6})$|1\",\"284$1\",0,\"284\",[[\"284(?:229|4(?:22|9[45])|774|8(?:52|6[459]))\\\\d{4}\"],[\"284(?:245|3(?:0[0-3]|4[0-7]|68|9[34])|4(?:4[0-6]|68|9[69])|5(?:4[0-7]|68|9[69]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"([2-9]\\\\d{6})$|1\",\"340$1\",0,\"340\",[[\"340(?:2(?:0\\\\d|10|2[06-8]|4[49]|77)|3(?:32|44)|4(?:2[23]|44|7[34]|89)|5(?:1[34]|55)|6(?:2[56]|4[23]|77|9[023])|7(?:1[2-57-9]|2[57]|7\\\\d)|884|998)\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"52(?:3(?:[2-46-9][02-9]\\\\d|5(?:[02-46-9]\\\\d|5[0-46-9]))|4(?:[2-478][02-9]\\\\d|5(?:[034]\\\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\\\d)|9(?:[05-9]\\\\d|2[0-5]|49)))\\\\d{4}|52[34][2-9]1[02-9]\\\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[357-9]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"2(?:0[3-9]|1[0-689]|2[0-25-9]|[38][2-9]|4[2-8]|5[124-9]|6[0-39]|7[0-7]|9[0-4679])\\\\d{7}\",[10]],[\"(?:5(?:2[238]|59)|89[6-9]|99[013-9])\\\\d{6}|(?:3\\\\d|5[1689]|7[06-9]|8[1-8]|9[0-8])\\\\d{7}\",[9]],[\"1800\\\\d{4,6}|12(?:0[13]|28)\\\\d{4}\",[8,9,10]],[\"1900\\\\d{4,6}\",[8,9,10]],0,0,[\"(?:[17]99|80\\\\d)\\\\d{4}|69\\\\d{5,6}\",[7,8]],0,[\"672\\\\d{6}\",[9]]]],\"VU\":[\"678\",\"00\",\"[57-9]\\\\d{6}|(?:[238]\\\\d|48)\\\\d{3}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]]],0,0,0,0,0,0,[[\"(?:38[0-8]|48[4-9])\\\\d\\\\d|(?:2[02-9]|3[4-7]|88)\\\\d{3}\",[5]],[\"(?:[58]\\\\d|7[013-7])\\\\d{5}\",[7]],[\"81[18]\\\\d\\\\d\",[5]],0,0,0,[\"(?:3[03]|900\\\\d)\\\\d{3}\"],0,[\"9(?:0[1-9]|1[01])\\\\d{4}\",[7]]]],\"WF\":[\"681\",\"00\",\"(?:40|72|8\\\\d{4})\\\\d{4}|[89]\\\\d{5}\",[6,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[47-9]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]]],0,0,0,0,0,0,[[\"72\\\\d{4}\",[6]],[\"(?:72|8[23])\\\\d{4}\",[6]],[\"80[0-5]\\\\d{6}\",[9]],0,0,[\"[48]0\\\\d{4}\",[6]],0,0,[\"9[23]\\\\d{4}\",[6]]]],\"WS\":[\"685\",\"0\",\"(?:[2-6]|8\\\\d{5})\\\\d{4}|[78]\\\\d{6}|[68]\\\\d{5}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-5]|6[1-9]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[68]\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"6[1-9]\\\\d{3}|(?:[2-5]|60)\\\\d{4}\",[5,6]],[\"(?:7[1-35-7]|8(?:[3-7]|9\\\\d{3}))\\\\d{5}\",[7,10]],[\"800\\\\d{3}\",[6]]]],\"XK\":[\"383\",\"00\",\"2\\\\d{7,8}|3\\\\d{7,11}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2|39\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7,10})\",\"$1 $2\",[\"3\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"38\\\\d{6,10}|(?:2[89]|39)(?:0\\\\d{5,6}|[1-9]\\\\d{5})\"],[\"4[3-9]\\\\d{6}\",[8]],[\"800\\\\d{5}\",[8]],[\"900\\\\d{5}\",[8]]]],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7(?:[24-6]|8[0-7])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"78[0-7]\\\\d{4}|17\\\\d{6}|(?:[12][2-68]|3[2358]|4[2-58]|5[2-6]|6[3-58]|7[24-6])\\\\d{5}\",[7,8]],[\"7[01378]\\\\d{7}\",[9]]]],\"YT\":[\"262\",\"00\",\"7093\\\\d{5}|(?:80|9\\\\d)\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"269(?:0[0-467]|15|5[0-4]|6\\\\d|[78]0)\\\\d{4}\"],[\"(?:639(?:0[0-79]|1[019]|[267]\\\\d|3[09]|40|5[05-9]|9[04-79])|7093[5-7])\\\\d{4}\"],[\"80\\\\d{7}\"],0,0,0,0,0,[\"9(?:(?:39|47)8[01]|769\\\\d)\\\\d{4}\"]]],\"ZA\":[\"27\",\"00\",\"[1-79]\\\\d{8}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:0330|4302)|52087)0\\\\d{3}|(?:1[0-8]|2[1-378]|3[1-69]|4\\\\d|5[1346-8])\\\\d{7}\",[9]],[\"(?:1(?:3492[0-25]|4495[0235]|549(?:20|5[01]))|4[34]492[01])\\\\d{3}|8[1-4]\\\\d{3,7}|(?:2[27]|47|54)4950\\\\d{3}|(?:1(?:049[2-4]|9[12]\\\\d\\\\d)|(?:50[0-2]|6\\\\d\\\\d|7(?:[0-46-9]\\\\d|5[0-4]))\\\\d\\\\d|8(?:5\\\\d{3}|7(?:08[67]|158|28[5-9]|310)))\\\\d{4}|(?:1[6-8]|28|3[2-69]|4[025689]|5[36-8])4920\\\\d{3}|(?:12|[2-5]1)492\\\\d{4}\",[5,6,7,8,9]],[\"80\\\\d{7}\",[9]],[\"(?:86[2-9]|9[0-2]\\\\d)\\\\d{6}\",[9]],0,0,[\"861\\\\d{6,7}\",[9,10]],0,[\"87(?:08[0-589]|15[0-79]|28[0-4]|31[1-9])\\\\d{4}|87(?:[02][0-79]|1[0-46-9]|3[02-9]|[4-9]\\\\d)\\\\d{5}\",[9]],[\"860\\\\d{6}\",[9]]]],\"ZM\":[\"260\",\"00\",\"800\\\\d{6}|(?:21|[579]\\\\d|63)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[579]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"21[1-8]\\\\d{6}\"],[\"(?:[59][5-8]|7[5-9])\\\\d{7}\"],[\"800\\\\d{6}\"],0,0,0,0,0,[\"63\\\\d{7}\"]]],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:3\\\\d|9)\\\\d|[4-8])|2(?:(?:(?:0(?:2[014]|5)|(?:2[0157]|31|84|9)\\\\d\\\\d|[56](?:[14]\\\\d\\\\d|20)|7(?:[089]|2[03]|[35]\\\\d\\\\d))\\\\d|4(?:2\\\\d\\\\d|8))\\\\d|1(?:2|[39]\\\\d{4}))|3(?:(?:123|(?:29\\\\d|92)\\\\d)\\\\d\\\\d|7(?:[19]|[56]\\\\d))|5(?:0|1[2-478]|26|[37]2|4(?:2\\\\d{3}|83)|5(?:25\\\\d\\\\d|[78])|[689]\\\\d)|6(?:(?:[16-8]21|28|52[013])\\\\d\\\\d|[39])|8(?:[1349]28|523)\\\\d\\\\d)\\\\d{3}|(?:4\\\\d\\\\d|9[2-9])\\\\d{4,5}|(?:(?:2(?:(?:(?:0|8[146])\\\\d|7[1-7])\\\\d|2(?:[278]\\\\d|92)|58(?:2\\\\d|3))|3(?:[26]|9\\\\d{3})|5(?:4\\\\d|5)\\\\d\\\\d)\\\\d|6(?:(?:(?:[0-246]|[78]\\\\d)\\\\d|37)\\\\d|5[2-8]))\\\\d\\\\d|(?:2(?:[569]\\\\d|8[2-57-9])|3(?:[013-59]\\\\d|8[37])|6[89]8)\\\\d{3}\"],[\"7(?:[1278]\\\\d|3[1-9])\\\\d{6}\",[9]],[\"80(?:[01]\\\\d|20|8[0-8])\\\\d{3}\",[7]],0,0,0,0,0,[\"86(?:1[12]|22|30|44|55|77|8[368])\\\\d{6}\",[10]]]]},\"nonGeographic\":{\"800\":[\"800\",0,\"(?:00|[1-9]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"\\\\d\"]]],0,0,0,0,0,0,[0,0,[\"(?:00|[1-9]\\\\d)\\\\d{6}\"]]],\"808\":[\"808\",0,\"[1-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[1-9]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"[1-9]\\\\d{7}\"]]],\"870\":[\"870\",0,\"7\\\\d{11}|[235-7]\\\\d{8}\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]|774[45])\\\\d{8}|7[6-8]\\\\d{7}\"],0,0,0,0,0,0,[\"2\\\\d{8}\",[9]]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"6\\\\d{9}|[0-36-9]\\\\d{8}\",[9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[0-37-9]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{5,6})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[0,[\"6\\\\d{9}|[0-36-9]\\\\d{8}\"]]],\"882\":[\"882\",0,\"[13]\\\\d{6}(?:\\\\d{2,5})?|[19]\\\\d{7}|(?:[25]\\\\d\\\\d|4)\\\\d{7}(?:\\\\d{2})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"49\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1[36]|9\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"16\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|23|3(?:[15]|4[57])|4|51\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[1-35]\"]]],0,0,0,0,0,0,[0,[\"342\\\\d{4}|(?:337|49)\\\\d{6}|(?:3(?:2|47|7\\\\d{3})|50\\\\d{3})\\\\d{7}\",[7,8,9,10,12]],0,0,0,[\"348[57]\\\\d{7}\",[11]],0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|(?:345\\\\d|9[89])\\\\d{6}|(?:10|2(?:3|85\\\\d)|3(?:[15]|[69]\\\\d\\\\d)|4[15-8]|51)\\\\d{8}\"]]],\"883\":[\"883\",0,\"(?:[1-4]\\\\d|51)\\\\d{6,10}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2,8})\",\"$1 $2 $3\",[\"[14]|2[24-689]|3[02-689]|51[24-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"21\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"51[13]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[235]\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"(?:2(?:00\\\\d\\\\d|10)|(?:370[1-9]|51\\\\d0)\\\\d)\\\\d{7}|51(?:00\\\\d{5}|[24-9]0\\\\d{4,7})|(?:1[0-79]|2[24-689]|3[02-689]|4[0-4])0\\\\d{5,9}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"[1359]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1359]\"]]],0,0,0,0,0,0,[0,0,0,[\"[1359]\\\\d{8}\"]]]}}", "const objectConstructor = {}.constructor;\r\n\r\nexport default function isObject(object) {\r\n  return object !== undefined && object !== null && object.constructor === objectConstructor;\r\n}\r\n", "import isObject from './helpers/isObject.js'\r\n\r\n// Extracts the following properties from function arguments:\r\n// * input `text`\r\n// * `options` object\r\n// * `metadata` JSON\r\nexport default function normalizeArguments(args) {\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}", "// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')", "// https://stackoverflow.com/a/46971044/970769\r\n// \"Breaking changes in Typescript 2.1\"\r\n// \"Extending built-ins like Error, Array, and Map may no longer work.\"\r\n// \"As a recommendation, you can manually adjust the prototype immediately after any super(...) calls.\"\r\n// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\nexport default class ParseError extends Error {\r\n  constructor(code) {\r\n    super(code)\r\n    // Set the prototype explicitly.\r\n    // Any subclass of FooError will have to manually set the prototype as well.\r\n    Object.setPrototypeOf(this, ParseError.prototype)\r\n    this.name = this.constructor.name\r\n  }\r\n}", "// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\n//\r\n// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc \"tags\".\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/381\r\nexport default function(a, b) {\r\n    a = a.split('-')\r\n    b = b.split('-')\r\n    var pa = a[0].split('.')\r\n    var pb = b[0].split('.')\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i])\r\n        var nb = Number(pb[i])\r\n        if (na > nb) return 1\r\n        if (nb > na) return -1\r\n        if (!isNaN(na) && isNaN(nb)) return 1\r\n        if (isNaN(na) && !isNaN(nb)) return -1\r\n    }\r\n    if (a[1] && b[1]) {\r\n        return a[1] > b[1] ? 1 : (a[1] < b[1] ? -1 : 0)\r\n    }\r\n    return !a[1] && b[1] ? 1 : (a[1] && !b[1] ? -1 : 0)\r\n}", "import compare from './tools/semver-compare.js'\r\nimport isObject from './helpers/isObject.js'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\nconst CALLING_CODE_REG_EXP = /^\\d+$/\r\n\r\n/**\r\n * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\t// The test case could be found by searching for \"nonGeographical\".\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\t// Supports just passing `callingCode` as the first argument.\r\n\t\tif (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {\r\n\t\t\tcallingCode = countryCode\r\n\t\t\tcountryCode = null\r\n\t\t}\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\t// In that metadata, there was no concept of \"non-geographic\" metadata\r\n\t\t\t// so metadata for `001` country code was stored along with other countries.\r\n\t\t\t// The test case can be found by searching for:\r\n\t\t\t// \"should work around `nonGeographic` metadata not existing\".\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\treturn this.selectNumberingPlan(callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\t// Is always present.\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\t// Is only present when a country supports multiple IDD prefixes.\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\t// \"possible length\" data is always present in Google's metadata.\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`\r\n\t\t\t// when `national_prefix_formatting_rule` is not present.\r\n\t\t\t// So, `true` or `false` are returned explicitly here, so that\r\n\t\t\t// `0` number isn't returned.\r\n\t\t\t? true\r\n\t\t\t: false\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to `country_calling_codes` in `1.0.18`.\r\n\t// For that reason, it's not used in this detection algorithm.\r\n\t// Instead, it detects by `countries: {}` property existence.\r\n\tif (!isObject(metadata) || !isObject(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${isObject(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + typeOf(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst typeOf = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries.hasOwnProperty(country)\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tconst { version } = metadata\r\n\tif (typeof version === 'number') {\r\n\t\tthis.v1 = version === 1\r\n\t\tthis.v2 = version === 2\r\n\t\tthis.v3 = version === 3\r\n\t\tthis.v4 = version === 4\r\n\t} else {\r\n\t\tif (!version) {\r\n\t\t\tthis.v1 = true\r\n\t\t} else if (compare(version, V3) === -1) {\r\n\t\t\tthis.v2 = true\r\n\t\t} else if (compare(version, V4) === -1) {\r\n\t\t\tthis.v3 = true\r\n\t\t} else {\r\n\t\t\tthis.v4 = true\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }", "import { VALID_DIGITS } from '../../constants.js'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n/**\r\n * Helper method for constructing regular expressions for parsing. Creates\r\n * an expression that captures up to max_length digits.\r\n * @return {string} RegEx pattern to capture extension digits.\r\n */\r\nconst getExtensionDigitsPattern = (maxLength) => `([${VALID_DIGITS}]{1,${maxLength}})`\r\n\r\n/**\r\n * Helper initialiser method to create the regular-expression pattern to match\r\n * extensions.\r\n * Copy-pasted from Google's `libphonenumber`:\r\n * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766\r\n * @return {string} RegEx pattern to capture extensions.\r\n */\r\nexport default function createExtensionPattern(purpose) {\r\n\t// We cap the maximum length of an extension based on the ambiguity of the way\r\n\t// the extension is prefixed. As per ITU, the officially allowed length for\r\n\t// extensions is actually 40, but we don't support this since we haven't seen real\r\n\t// examples and this introduces many false interpretations as the extension labels\r\n\t// are not standardized.\r\n\t/** @type {string} */\r\n\tvar extLimitAfterExplicitLabel = '20';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterLikelyLabel = '15';\r\n\t/** @type {string} */\r\n\tvar extLimitAfterAmbiguousChar = '9';\r\n\t/** @type {string} */\r\n\tvar extLimitWhenNotSure = '6';\r\n\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsBetweenNumberAndExtLabel = \"[ \\u00A0\\\\t,]*\";\r\n\t// Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.\r\n\t/** @type {string} */\r\n\tvar possibleCharsAfterExtLabel = \"[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*\";\r\n\t/** @type {string} */\r\n\tvar optionalExtnSuffix = \"#?\";\r\n\r\n\t// Here the extension is called out in more explicit way, i.e mentioning it obvious\r\n\t// patterns like \"ext.\".\r\n\t/** @type {string} */\r\n\tvar explicitExtLabels =\r\n\t  \"(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|\\u0434\\u043E\\u0431|anexo)\";\r\n\t// One-character symbols that can be used to indicate an extension, and less\r\n\t// commonly used or more ambiguous extension labels.\r\n\t/** @type {string} */\r\n\tvar ambiguousExtLabels = \"(?:[x\\uFF58#\\uFF03~\\uFF5E]|int|\\uFF49\\uFF4E\\uFF54)\";\r\n\t// When extension is not separated clearly.\r\n\t/** @type {string} */\r\n\tvar ambiguousSeparator = \"[- ]+\";\r\n\t// This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching\r\n\t// comma as extension label may have it.\r\n\t/** @type {string} */\r\n\tvar possibleSeparatorsNumberExtLabelNoComma = \"[ \\u00A0\\\\t]*\";\r\n\t// \",,\" is commonly used for auto dialling the extension when connected. First\r\n\t// comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do\r\n\t// not repeat it here. Semi-colon works in Iphone and Android also to pop up a\r\n\t// button with the extension number following.\r\n\t/** @type {string} */\r\n\tvar autoDiallingAndExtLabelsFound = \"(?:,{2}|;)\";\r\n\r\n\t/** @type {string} */\r\n\tvar rfcExtn = RFC3966_EXTN_PREFIX\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel);\r\n\t/** @type {string} */\r\n\tvar explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterExplicitLabel)\r\n\t     + optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels\r\n\t     + possibleCharsAfterExtLabel\r\n\t+ getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar americanStyleExtnWithSuffix = ambiguousSeparator\r\n\t+ getExtensionDigitsPattern(extLimitWhenNotSure) + \"#\";\r\n\r\n\t/** @type {string} */\r\n\tvar autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t     + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel\r\n\t     + getExtensionDigitsPattern(extLimitAfterLikelyLabel)\r\n\t+ optionalExtnSuffix;\r\n\t/** @type {string} */\r\n\tvar onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma\r\n\t    + \"(?:,)+\" + possibleCharsAfterExtLabel\r\n\t    + getExtensionDigitsPattern(extLimitAfterAmbiguousChar)\r\n\t    + optionalExtnSuffix;\r\n\r\n\t// The first regular expression covers RFC 3966 format, where the extension is added\r\n\t// using \";ext=\". The second more generic where extension is mentioned with explicit\r\n\t// labels like \"ext:\". In both the above cases we allow more numbers in extension than\r\n\t// any other extension labels. The third one captures when single character extension\r\n\t// labels or less commonly used labels are used. In such cases we capture fewer\r\n\t// extension digits in order to reduce the chance of falsely interpreting two\r\n\t// numbers beside each other as a number + extension. The fourth one covers the\r\n\t// special case of American numbers where the extension is written with a hash\r\n\t// at the end, such as \"- 503#\". The fifth one is exclusively for extension\r\n\t// autodialling formats which are used when dialling and in this case we accept longer\r\n\t// extensions. The last one is more liberal on the number of commas that acts as\r\n\t// extension labels, so we have a strict cap on the number of digits in such extensions.\r\n\treturn rfcExtn + \"|\"\r\n\t       + explicitExtn + \"|\"\r\n\t       + ambiguousExtn + \"|\"\r\n\t       + americanStyleExtnWithSuffix + \"|\"\r\n\t       + autoDiallingExtn + \"|\"\r\n\t       + onlyCommasExtn;\r\n}", "import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from '../constants.js'\r\n\r\nimport createExtensionPattern from './extension/createExtensionPattern.js'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nexport const VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// This regular expression isn't present in Google's `libphonenumber`\r\n// and is only used to determine whether the phone number being input\r\n// is too short for it to even consider it a \"valid\" number.\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nconst VALID_PHONE_NUMBER_START_REG_EXP = new RegExp(\r\n\t'^' +\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){1,2}' +\r\n\t'$'\r\n, 'i')\r\n\r\nexport const VALID_PHONE_NUMBER_WITH_EXTENSION =\r\n\tVALID_PHONE_NUMBER +\r\n\t// Phone number extensions\r\n\t'(?:' + createExtensionPattern() + ')?'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER_WITH_EXTENSION +\r\n\t'$'\r\n, 'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number) {\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}\r\n\r\n// This is just a way to differentiate between a really invalid phone\r\n// number like \"abcde\" and a valid phone number that a user has just\r\n// started inputting, like \"+1\" or \"1\": both these cases would be\r\n// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this\r\n// library can provide a more detailed error message — whether it's\r\n// really \"not a number\", or is it just a start of a valid phone number.\r\nexport function isViablePhoneNumberStart(number) {\r\n\treturn VALID_PHONE_NUMBER_START_REG_EXP.test(number)\r\n}", "import createExtensionPattern from './createExtensionPattern.js'\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + createExtensionPattern() + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport default function extractExtension(number) {\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst numberWithoutExtension = number.slice(0, start)\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length) {\r\n\t\tif (matches[i]) {\r\n\t\t\treturn {\r\n\t\t\t\tnumber: numberWithoutExtension,\r\n\t\t\t\text: matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}", "// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS = {\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character) {\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}", "import { parseDigit } from './helpers/parseDigits.js'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '+7800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses next character while parsing phone number digits (including a `+`)\r\n * from text: discards everything except `+` and digits, and `+` is only allowed\r\n * at the start of a phone number.\r\n * For example, is used in `react-phone-number-input` where it uses\r\n * [`input-format`](https://gitlab.com/catamphetamine/input-format).\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string?} prevParsedCharacters - Previous parsed characters.\r\n * @param  {function?} emitEvent - An optional \"emit event\" function.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, prevParsedCharacters, emitEvent) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (prevParsedCharacters) {\r\n\t\t\t// `emitEvent` argument was added to this `export`ed function on Dec 26th, 2023.\r\n\t\t\t// Any 3rd-party code that used to `import` and call this function before that\r\n\t\t\t// won't be passing any `emitEvent` argument.\r\n\t\t\t//\r\n\t\t\t// The addition of the `emitEvent` argument was to fix the slightly-weird behavior\r\n\t\t\t// of parsing an input string when the user inputs something like `\"2+7\"\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/437\r\n\t\t\t//\r\n\t\t\t// If the parser encounters an unexpected `+` in a string being parsed\r\n\t\t\t// then it simply discards that out-of-place `+` and any following characters.\r\n\t\t\t//\r\n\t\t\tif (typeof emitEvent === 'function') {\r\n\t\t\t\temitEvent('end')\r\n\t\t\t}\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}", "// Deprecated. Import from 'metadata.js' directly instead.\r\nexport { getCountryCallingCode as default } from './metadata.js'", "/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport default function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b) {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}", "import mergeArrays from './mergeArrays.js'\r\n\r\nexport default function checkNumberLength(nationalNumber, metadata) {\r\n\treturn checkNumberLengthForType(nationalNumber, undefined, metadata)\r\n}\r\n\r\n// Checks whether a number is possible for the country based on its length.\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata) {\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\t// Metadata before version `1.0.18` didn't contain `possible_lengths`.\r\n\tif (!possible_lengths) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE') {\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE')) {\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\t\tif (mobile_type) {\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths) {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// } else {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info) {\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length) {\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length) {\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length) {\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}", "import Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\n/**\r\n * Checks if a phone number is \"possible\" (basically just checks its length).\r\n *\r\n * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function isPossiblePhoneNumber(input, options, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\t// Old metadata (< 1.0.18) had no \"possible length\" data.\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, metadata) { //, isInternational) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}", "/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport default function matchesEntirely(text, regular_expression) {\r\n\t// If assigning the `''` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}", "import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES = [\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returns an empty object — `{}` —\r\n\t// that means that the phone number is malformed,\r\n\t// so it can't possibly be valid.\r\n\tif (!input.country && !input.countryCallingCode) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.\r\n\t\t// For example, for \"US\" country.\r\n\t\t// Old metadata (< `1.0.18`) had a specific \"types\" data structure\r\n\t\t// that happened to be `undefined` for `MOBILE` in that case.\r\n\t\t// Newer metadata (>= `1.0.18`) has another data structure that is\r\n\t\t// not `undefined` for `MOBILE` in that case (it's just an empty array).\r\n\t\t// So this `if` is just for backwards compatibility with old metadata.\r\n\t\tif (!metadata.type('MOBILE')) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const type of NON_FIXED_LINE_PHONE_TYPES) {\r\n\t\tif (isNumberTypeEqualTo(nationalNumber, type, metadata)) {\r\n\t\t\treturn type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isNumberTypeEqualTo(nationalNumber, type, metadata) {\r\n\ttype = metadata.type(type)\r\n\tif (!type || !type.pattern()) {\r\n\t\treturn false\r\n\t}\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0) {\r\n\t\treturn false\r\n\t}\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}", "import Metadata from './metadata.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * isValid(phoneNumberInstance, { ..., v2: true }, metadata)\r\n *\r\n * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)\r\n * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes()) {\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n}", "import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Returns a list of countries that the phone number could potentially belong to.\r\n * @param  {string} callingCode — Calling code.\r\n * @param  {string} nationalNumber — National (significant) number.\r\n * @param  {object} metadata — Metadata.\r\n * @return {string[]} A list of possible countries.\r\n */\r\nexport default function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\tlet possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn []\r\n\t}\r\n\treturn possibleCountries.filter((country) => {\r\n\t\treturn couldNationalNumberBelongToCountry(nationalNumber, country, metadata)\r\n\t})\r\n}\r\n\r\nfunction couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {\r\n\tconst _metadata = new Metadata(metadata)\r\n\t_metadata.selectNumberingPlan(country)\r\n\tif (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {\r\n\t\treturn true\r\n\t}\r\n\treturn false\r\n}", "import Metadata from '../metadata.js'\r\nimport { VALID_DIGITS } from '../constants.js'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\nexport default function stripIddPrefix(number, country, callingCode, metadata) {\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\t// Check if the number is IDD-prefixed.\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\t// If there're any digits after an IDD prefix,\r\n\t// then those digits are a country calling code.\r\n\t// Since no country code starts with a `0`,\r\n\t// the code below validates that the next digit (if present) is not `0`.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {\r\n\t\tif (matchedGroups[1] === '0') {\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}", "/**\r\n * Strips any national prefix (such as 0, 1) present in a\r\n * (possibly incomplete) number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.\r\n */\r\nexport default function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {\r\n\tif (number && metadata.numberingPlan.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\t\t// If a `national_prefix_for_parsing` has any \"capturing groups\"\r\n\t\t\t// then it means that the national (significant) number is equal to\r\n\t\t\t// those \"capturing groups\" transformed via `national_prefix_transform_rule`,\r\n\t\t\t// and nothing could be said about the actual national prefix:\r\n\t\t\t// what is it and was it even there.\r\n\t\t\t// If a `national_prefix_for_parsing` doesn't have any \"capturing groups\",\r\n\t\t\t// then everything it matches is a national prefix.\r\n\t\t\t// To determine whether `national_prefix_for_parsing` matched any\r\n\t\t\t// \"capturing groups\", the value of the result of calling `.exec()`\r\n\t\t\t// is looked at, and if it has non-undefined values where there're\r\n\t\t\t// \"capturing groups\" in the regular expression, then it means\r\n\t\t\t// that \"capturing groups\" have been matched.\r\n\t\t\t// It's not possible to tell whether there'll be any \"capturing gropus\"\r\n\t\t\t// before the matching process, because a `national_prefix_for_parsing`\r\n\t\t\t// could exhibit both behaviors.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tconst hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]\r\n\t\t\tif (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// If there's more than one captured group,\r\n\t\t\t\t// then carrier code is the second one.\r\n\t\t\t\tif (capturedGroupsCount > 1) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If there're no \"capturing groups\",\r\n\t\t\t// or if there're \"capturing groups\" but no\r\n\t\t\t// `national_prefix_transform_rule`,\r\n\t\t\t// then just strip the national prefix from the number,\r\n\t\t\t// and possibly a carrier code.\r\n\t\t\t// Seems like there could be more.\r\n\t\t\telse {\r\n\t\t\t\t// `prefixBeforeNationalNumber` is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regular expression.\r\n\t\t\t\t// There seem to be no guarantees that it's just a national prefix.\r\n\t\t\t\t// For example, if there's a carrier code, it's gonna be a\r\n\t\t\t\t// part of `prefixBeforeNationalNumber` too.\r\n\t\t\t\tconst prefixBeforeNationalNumber = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(prefixBeforeNationalNumber.length)\r\n\t\t\t\t// If there's at least one captured group,\r\n\t\t\t\t// then carrier code is the first one.\r\n\t\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Tries to guess whether a national prefix was present in the input.\r\n\t\t\t// This is not something copy-pasted from Google's library:\r\n\t\t\t// they don't seem to have an equivalent for that.\r\n\t\t\t// So this isn't an \"officially approved\" way of doing something like that.\r\n\t\t\t// But since there seems no other existing method, this library uses it.\r\n\t\t\tlet nationalPrefix\r\n\t\t\tif (hasCapturedGroups) {\r\n\t\t\t\tconst possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1])\r\n\t\t\t\tconst possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup)\r\n\t\t\t\t// Example: an Argentinian (AR) phone number `0111523456789`.\r\n\t\t\t\t// `prefixMatch[0]` is `01115`, and `$1` is `11`,\r\n\t\t\t\t// and the rest of the phone number is `23456789`.\r\n\t\t\t\t// The national number is transformed via `9$1` to `91123456789`.\r\n\t\t\t\t// National prefix `0` is detected being present at the start.\r\n\t\t\t\t// if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {\r\n\t\t\t\tif (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {\r\n\t\t\t\t\tnationalPrefix = metadata.numberingPlan.nationalPrefix()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tnationalPrefix = prefixMatch[0]\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tnationalPrefix,\r\n\t\t\t\tcarrierCode\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}", "import extractNationalNumberFromPossiblyIncompleteNumber from './extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\n\r\n/**\r\n * Strips national prefix and carrier code from a complete phone number.\r\n * The difference from the non-\"FromCompleteNumber\" function is that\r\n * it won't extract national prefix if the resultant number is too short\r\n * to be a complete number for the selected phone numbering plan.\r\n * @param  {string} number — Complete phone number digits.\r\n * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.\r\n * @return {object} `{ nationalNumber: string, carrierCode: string? }`.\r\n */\r\nexport default function extractNationalNumber(number, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tcarrierCode,\r\n\t\tnationalNumber\r\n\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\tnumber,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (nationalNumber !== number) {\r\n\t\tif (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {\r\n\t\t\t// Don't strip the national prefix.\r\n\t\t\treturn { nationalNumber: number }\r\n\t\t}\r\n\t\t// Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t\t// Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature.\r\n\t\tif (metadata.possibleLengths()) {\r\n\t\t\t// The number remaining after stripping the national prefix and carrier code\r\n\t\t\t// should be long enough to have a possible length for the country.\r\n\t\t\t// Otherwise, don't strip the national prefix and carrier code,\r\n\t\t\t// since the original number could be a valid number.\r\n\t\t\t// This check has been copy-pasted \"as is\" from Google's original library:\r\n\t\t\t// https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250\r\n\t\t\t// It doesn't check for the \"possibility\" of the original `number`.\r\n\t\t\t// I guess it's fine not checking that one. It works as is anyway.\r\n\t\t\tif (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {\r\n\t\t\t\t// Don't strip the national prefix.\r\n\t\t\t\treturn { nationalNumber: number }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn { nationalNumber, carrierCode }\r\n}\r\n\r\n// In some countries, the same digit could be a national prefix\r\n// or a leading digit of a valid phone number.\r\n// For example, in Russia, national prefix is `8`,\r\n// and also `800 555 35 35` is a valid number\r\n// in which `8` is not a national prefix, but the first digit\r\n// of a national (significant) number.\r\n// Same's with Belarus:\r\n// `82004910060` is a valid national (significant) number,\r\n// but `2004910060` is not.\r\n// To support such cases (to prevent the code from always stripping\r\n// national prefix), a condition is imposed: a national prefix\r\n// is not extracted when the original number is \"viable\" and the\r\n// resultant number is not, a \"viable\" national number being the one\r\n// that matches `national_number_pattern`.\r\nfunction shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {\r\n\t// The equivalent in Google's code is:\r\n\t// https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004\r\n\tif (matchesEntirely(nationalNumberBefore, metadata.nationalNumberPattern()) &&\r\n\t\t!matchesEntirely(nationalNumberAfter, metadata.nationalNumberPattern())) {\r\n\t\treturn false\r\n\t}\r\n\t// This \"is possible\" national number (length) check has been commented out\r\n\t// because it's superceded by the (effectively) same check done in the\r\n\t// `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.\r\n\t// In other words, why run the same check twice if it could only be run once.\r\n\t// // Check the national (significant) number length after extracting national prefix and carrier code.\r\n\t// // Fixes a minor \"weird behavior\" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57\r\n\t// // (Legacy generated metadata (before `1.0.18`) didn't support the \"possible lengths\" feature).\r\n\t// if (metadata.possibleLengths()) {\r\n\t// \tif (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&\r\n\t// \t\t!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {\r\n\t// \t\treturn false\r\n\t// \t}\r\n\t// }\r\n\treturn true\r\n}\r\n\r\nfunction isPossibleIncompleteNationalNumber(nationalNumber, metadata) {\r\n\tswitch (checkNumberLength(nationalNumber, metadata)) {\r\n\t\tcase 'TOO_SHORT':\r\n\t\tcase 'INVALID_LENGTH':\r\n\t\t// This library ignores \"local-only\" phone numbers (for simplicity).\r\n\t\t// See the readme for more info on what are \"local-only\" phone numbers.\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\treturn false\r\n\t\tdefault:\r\n\t\t\treturn true\r\n\t}\r\n}", "import Metadata from '../metadata.js'\r\nimport matchesEntirely from './matchesEntirely.js'\r\nimport extractNationalNumber from './extractNationalNumber.js'\r\nimport checkNumberLength from './checkNumberLength.js'\r\nimport getCountryCallingCode from '../getCountryCallingCode.js'\r\n\r\n/**\r\n * Sometimes some people incorrectly input international phone numbers\r\n * without the leading `+`. This function corrects such input.\r\n * @param  {string} number — Phone number digits.\r\n * @param  {string?} country\r\n * @param  {string?} callingCode\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCode: string?, number: string }`.\r\n */\r\nexport default function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tconst countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode\r\n\tif (number.indexOf(countryCallingCode) === 0) {\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(country, callingCode)\r\n\t\tconst possibleShorterNumber = number.slice(countryCallingCode.length)\r\n\t\tconst {\r\n\t\t\tnationalNumber: possibleShorterNationalNumber,\r\n\t\t} = extractNationalNumber(\r\n\t\t\tpossibleShorterNumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tconst {\r\n\t\t\tnationalNumber\r\n\t\t} = extractNationalNumber(\r\n\t\t\tnumber,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\t// If the number was not valid before but is valid now,\r\n\t\t// or if it was too long before, we consider the number\r\n\t\t// with the country calling code stripped to be a better result\r\n\t\t// and keep that instead.\r\n\t\t// For example, in Germany (+49), `49` is a valid area code,\r\n\t\t// so if a number starts with `49`, it could be both a valid\r\n\t\t// national German number or an international number without\r\n\t\t// a leading `+`.\r\n\t\tif (\r\n\t\t\t(\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t\t&&\r\n\t\t\t\tmatchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern())\r\n\t\t\t)\r\n\t\t\t||\r\n\t\t\tcheckNumberLength(nationalNumber, metadata) === 'TOO_LONG'\r\n\t\t) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: possibleShorterNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn { number }\r\n}", "import stripIddPrefix from './stripIddPrefix.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport Metadata from '../metadata.js'\r\nimport { MAX_LENGTH_COUNTRY_CODE } from '../constants.js'\r\n\r\n/**\r\n * Converts a phone number digits (possibly with a `+`)\r\n * into a calling code and the rest phone number digits.\r\n * The \"rest phone number digits\" could include\r\n * a national prefix, carrier code, and national\r\n * (significant) number.\r\n * @param  {string} number — Phone number digits (possibly with a `+`).\r\n * @param  {string} [country] — Default country.\r\n * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).\r\n * @param  {object} metadata\r\n * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`\r\n * @example\r\n * // Returns `{ countryCallingCode: \"1\", number: \"2133734253\" }`.\r\n * extractCountryCallingCode('2133734253', 'US', null, metadata)\r\n * extractCountryCallingCode('2133734253', null, '1', metadata)\r\n * extractCountryCallingCode('+12133734253', null, null, metadata)\r\n * extractCountryCallingCode('+12133734253', 'RU', null, metadata)\r\n */\r\nexport default function extractCountryCallingCode(\r\n\tnumber,\r\n\tcountry,\r\n\tcallingCode,\r\n\tmetadata\r\n) {\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tlet isNumberWithIddPrefix\r\n\r\n\t// If this is not an international phone number,\r\n\t// then either extract an \"IDD\" prefix, or extract a\r\n\t// country calling code from a number by autocorrecting it\r\n\t// by prepending a leading `+` in cases when it starts\r\n\t// with the country calling code.\r\n\t// https://wikitravel.org/en/International_dialling_prefix\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(number, country, callingCode, metadata)\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tisNumberWithIddPrefix = true\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\t// Check to see if the number starts with the country calling code\r\n\t\t\t// for the default country. If so, we remove the country calling code,\r\n\t\t\t// and do some checks on the validity of the number before and after.\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst {\r\n\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\t\tnumber,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcallingCode,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\t\t\t\tif (countryCallingCode) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tcountryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',\r\n\t\t\t\t\t\tcountryCallingCode,\r\n\t\t\t\t\t\tnumber: shorterNumber\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\t// No need to set it to `UNSPECIFIED`. It can be just `undefined`.\r\n\t\t\t\t// countryCallingCodeSource: 'UNSPECIFIED',\r\n\t\t\t\tnumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n\r\n// The possible values for the returned `countryCallingCodeSource` are:\r\n//\r\n// Copy-pasted from:\r\n// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto\r\n//\r\n// // The source from which the country_code is derived. This is not set in the\r\n// // general parsing method, but in the method that parses and keeps raw_input.\r\n// // New fields could be added upon request.\r\n// enum CountryCodeSource {\r\n//  // Default value returned if this is not set, because the phone number was\r\n//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will\r\n//  // return false if this is the case.\r\n//  UNSPECIFIED = 0;\r\n//\r\n//  // The country_code is derived based on a phone number with a leading \"+\",\r\n//  // e.g. the French number \"+33 1 42 68 53 00\".\r\n//  FROM_NUMBER_WITH_PLUS_SIGN = 1;\r\n//\r\n//  // The country_code is derived based on a phone number with a leading IDD,\r\n//  // e.g. the French number \"011 33 1 42 68 53 00\", as it is dialled from US.\r\n//  FROM_NUMBER_WITH_IDD = 5;\r\n//\r\n//  // The country_code is derived based on a phone number without a leading\r\n//  // \"+\", e.g. the French number \"33 1 42 68 53 00\" when defaultCountry is\r\n//  // supplied as France.\r\n//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;\r\n//\r\n//  // The country_code is derived NOT based on the phone number itself, but\r\n//  // from the defaultCountry parameter provided in the parsing function by the\r\n//  // clients. This happens mostly for numbers written in the national format\r\n//  // (without country code). For example, this would be set when parsing the\r\n//  // French number \"01 42 68 53 00\", when defaultCountry is supplied as\r\n//  // France.\r\n//  FROM_DEFAULT_COUNTRY = 20;\r\n// }", "import { VALID_PUNCTUATION } from '../constants.js'\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport default function applyInternationalSeparatorStyle(formattedNumber) {\r\n\treturn formattedNumber.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}", "import applyInternationalSeparatorStyle from './applyInternationalSeparatorStyle.js'\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly. Therefore, we use `\\d`, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport default function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\t{\r\n\t\tuseInternationalFormat,\r\n\t\twithNationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tmetadata\r\n\t}\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalFormat\r\n\t\t\t? format.internationalFormat()\r\n\t\t\t: (\r\n\t\t\t\t// This library doesn't use `domestic_carrier_code_formatting_rule`,\r\n\t\t\t\t// because that one is only used when formatting phone numbers\r\n\t\t\t\t// for dialing from a mobile phone, and this is not a dialing library.\r\n\t\t\t\t// carrierCode && format.domesticCarrierCodeFormattingRule()\r\n\t\t\t\t// \t// First, replace the $CC in the formatting rule with the desired carrier code.\r\n\t\t\t\t// \t// Then, replace the $FG in the formatting rule with the first group\r\n\t\t\t\t// \t// and the carrier code combined in the appropriate way.\r\n\t\t\t\t// \t? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))\r\n\t\t\t\t// \t: (\r\n\t\t\t\t// \t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t// \t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t// \t\t\t: format.format()\r\n\t\t\t\t// \t)\r\n\t\t\t\twithNationalPrefix && format.nationalPrefixFormattingRule()\r\n\t\t\t\t\t? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t\t\t: format.format()\r\n\t\t\t)\r\n\t)\r\n\tif (useInternationalFormat) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}", "import Metadata from '../metadata.js'\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX_REG_EXP = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport default function getIddPrefix(country, callingCode, metadata) {\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.selectNumberingPlan(country, callingCode)\r\n\tif (countryMetadata.defaultIDDPrefix()) {\r\n\t\treturn countryMetadata.defaultIDDPrefix()\r\n\t}\r\n\tif (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n}\r\n", "import isViablePhoneNumber from './isViablePhoneNumber.js'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text) {\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';')) {\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name) {\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext }) {\r\n\tif (!number) {\r\n\t\treturn ''\r\n\t}\r\n\tif (number[0] !== '+') {\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}", "// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\nimport Metadata, { getCountryCallingCode } from './metadata.js'\r\nimport getIddPrefix from './helpers/getIddPrefix.js'\r\nimport { formatRFC3966 } from './helpers/RFC3966.js'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n/**\r\n * Formats a phone number.\r\n *\r\n * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)\r\n * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)\r\n *\r\n * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)\r\n * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)\r\n *\r\n * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.\r\n * @param  {string} format\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\t// For reference, here's Google's IDD formatter:\r\n\t\t// https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546\r\n\t\t// Not saying that this IDD formatter replicates it 1:1, but it seems to work.\r\n\t\t// Who would even need to format phone numbers in IDD format anyway?\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst formattedNumber = formatIDD(\r\n\t\t\t\tnationalNumber,\r\n\t\t\t\tinput.carrierCode,\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\toptions.fromCountry,\r\n\t\t\t\tmetadata\r\n\t\t\t)\r\n\t\t\treturn addExtension(formattedNumber, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\nfunction formatNationalNumber(number, carrierCode, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tuseInternationalFormat: formatAs === 'INTERNATIONAL',\r\n\t\t\twithNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && (options && options.nationalPrefix === false) ? false : true,\r\n\t\t\tcarrierCode,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n}\r\n\r\nexport function chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits.\r\n\t\t// The test case for \"else path\" could be found by searching for\r\n\t\t// \"format.leadingDigitsPatterns().length === 0\".\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDD(\r\n\tnationalNumber,\r\n\tcarrierCode,\r\n\tcountryCallingCode,\r\n\tfromCountry,\r\n\tmetadata\r\n) {\r\n\tconst fromCountryCallingCode = getCountryCallingCode(fromCountry, metadata.metadata)\r\n\t// When calling within the same country calling code.\r\n\tif (fromCountryCallingCode === countryCallingCode) {\r\n\t\tconst formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata)\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (countryCallingCode === '1') {\r\n\t\t\treturn countryCallingCode + ' ' + formattedNumber\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formattedNumber\r\n\t}\r\n\tconst iddPrefix = getIddPrefix(fromCountry, undefined, metadata.metadata)\r\n\tif (iddPrefix) {\r\n\t\treturn `${iddPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata)}`\r\n\t}\r\n}", "import Metadata, { validateMetadata } from './metadata.js'\r\nimport isPossibleNumber from './isPossible.js'\r\nimport isValidNumber from './isValid.js'\r\n// import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport getNumberType from './helpers/getNumberType.js'\r\nimport getPossibleCountriesForNumber from './helpers/getPossibleCountriesForNumber.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport isObject from './helpers/isObject.js'\r\nimport formatNumber from './format.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\t/**\r\n\t * @param  {string} countryOrCountryCallingCode\r\n\t * @param  {string} nationalNumber\r\n\t * @param  {object} metadata — Metadata JSON\r\n\t * @return {PhoneNumber}\r\n\t */\r\n\tconstructor(countryOrCountryCallingCode, nationalNumber, metadata) {\r\n\t\t// Validate `countryOrCountryCallingCode` argument.\r\n\t\tif (!countryOrCountryCallingCode) {\r\n\t\t\tthrow new TypeError('First argument is required')\r\n\t\t}\r\n\t\tif (typeof countryOrCountryCallingCode !== 'string') {\r\n\t\t\tthrow new TypeError('First argument must be a string')\r\n\t\t}\r\n\r\n\t\t// In case of public API use: `constructor(number, metadata)`.\r\n\t\t// Transform the arguments from `constructor(number, metadata)` to\r\n\t\t// `constructor(countryOrCountryCallingCode, nationalNumber, metadata)`.\r\n\t\tif (typeof countryOrCountryCallingCode === 'string') {\r\n\t\t\tif (countryOrCountryCallingCode[0] === '+' && !nationalNumber) {\r\n\t\t\t\tthrow new TypeError('`metadata` argument not passed')\r\n\t\t\t}\r\n\t\t\tif (isObject(nationalNumber) && isObject(nationalNumber.countries)) {\r\n\t\t\t\tmetadata = nationalNumber\r\n\t\t\t\tconst e164Number = countryOrCountryCallingCode\r\n\t\t\t\tif (!E164_NUMBER_REGEXP.test(e164Number)) {\r\n\t\t\t\t\tthrow new Error('Invalid `number` argument passed: must consist of a \"+\" followed by digits')\r\n\t\t\t\t}\r\n\t\t\t\tconst { countryCallingCode, number } = extractCountryCallingCode(e164Number, undefined, undefined, metadata)\r\n\t\t\t\tnationalNumber = number\r\n\t\t\t\tcountryOrCountryCallingCode = countryCallingCode\r\n\t\t\t\tif (!nationalNumber) {\r\n\t\t\t\t\tthrow new Error('Invalid `number` argument passed: too short')\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `nationalNumber` argument.\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument is required')\r\n\t\t}\r\n\t\tif (typeof nationalNumber !== 'string') {\r\n\t\t\tthrow new TypeError('`nationalNumber` argument must be a string')\r\n\t\t}\r\n\r\n\t\t// Validate `metadata` argument.\r\n\t\tvalidateMetadata(metadata)\r\n\r\n\t\t// Initialize properties.\r\n\t\tconst { country, countryCallingCode } = getCountryAndCountryCallingCode(\r\n\t\t\tcountryOrCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t)\r\n\t\tthis.country = country\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\t// Exclude `metadata` property output from `PhoneNumber.toString()`\r\n\t\t// so that it doesn't clutter the console output of Node.js.\r\n\t\t// Previously, when Node.js did `console.log(new PhoneNumber(...))`,\r\n\t\t// it would output the whole internal structure of the `metadata` object.\r\n\t\tthis.getMetadata = () => metadata\r\n\t}\r\n\r\n\tsetExt(ext) {\r\n\t\tthis.ext = ext\r\n\t}\r\n\r\n\tgetPossibleCountries() {\r\n\t\tif (this.country) {\r\n\t\t\treturn [this.country]\r\n\t\t}\r\n\t\treturn getPossibleCountriesForNumber(\r\n\t\t\tthis.countryCallingCode,\r\n\t\t\tthis.nationalNumber,\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.getMetadata())\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,\r\n\t// but later it was found out that it doesn't include the possible `TOO_SHORT` result\r\n\t// returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,\r\n\t// so eventually I simply commented out this method from the `PhoneNumber` class\r\n\t// and just left the `validatePhoneNumberLength()` function, even though that one would require\r\n\t// and additional step to also validate the actual country / calling code of the phone number.\r\n\t// validateLength() {\r\n\t// \tconst metadata = new Metadata(this.getMetadata())\r\n\t// \tmetadata.selectNumberingPlan(this.countryCallingCode)\r\n\t// \tconst result = checkNumberLength(this.nationalNumber, metadata)\r\n\t// \tif (result !== 'IS_POSSIBLE') {\r\n\t// \t\treturn result\r\n\t// \t}\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.getMetadata())\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.getMetadata()\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)\r\n\r\nfunction getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {\r\n\tlet country\r\n\tlet countryCallingCode\r\n\r\n\tconst metadata = new Metadata(metadataJson)\r\n\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t// Also store the country code as `.country`.\r\n\tif (isCountryCode(countryOrCountryCallingCode)) {\r\n\t\tcountry = countryOrCountryCallingCode\r\n\t\tmetadata.selectNumberingPlan(country)\r\n\t\tcountryCallingCode = metadata.countryCallingCode()\r\n\t} else {\r\n\t\tcountryCallingCode = countryOrCountryCallingCode\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tif (metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\tcountry = '001'\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode\r\n\t}\r\n}\r\n\r\nconst E164_NUMBER_REGEXP = /^\\+\\d+$/", "import Metadata from '../metadata.js'\r\nimport getNumberType from './getNumberType.js'\r\n\r\nexport default function getCountryByNationalNumber(nationalPhoneNumber, {\r\n\tcountries,\r\n\tdefaultCountry,\r\n\tmetadata\r\n}) {\r\n\t// Re-create `metadata` because it will be selecting a `country`.\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// const matchingCountries = []\r\n\r\n\tfor (const country of countries) {\r\n\t\tmetadata.country(country)\r\n\t\t// \"Leading digits\" patterns are only defined for about 20% of all countries.\r\n\t\t// By definition, matching \"leading digits\" is a sufficient but not a necessary\r\n\t\t// condition for a phone number to belong to a country.\r\n\t\t// The point of \"leading digits\" check is that it's the fastest one to get a match.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits\r\n\t\t// I'd suppose that \"leading digits\" patterns are mutually exclusive for different countries\r\n\t\t// because of the intended use of that feature.\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\t// If both the `defaultCountry` and the \"main\" one match the phone number,\r\n\t\t\t// don't prefer the `defaultCountry` over the \"main\" one.\r\n\t\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/154\r\n\t\t\treturn country\r\n\t\t\t// // If the `defaultCountry` is among the `matchingCountries` then return it.\r\n\t\t\t// if (defaultCountry) {\r\n\t\t\t// \tif (country === defaultCountry) {\r\n\t\t\t// \t\treturn country\r\n\t\t\t// \t}\r\n\t\t\t// \tmatchingCountries.push(country)\r\n\t\t\t// } else {\r\n\t\t\t// \treturn country\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\r\n\t// // Return the first (\"main\") one of the `matchingCountries`.\r\n\t// if (matchingCountries.length > 0) {\r\n\t// \treturn matchingCountries[0]\r\n\t// }\r\n}", "import getCountryByNationalNumber from './getCountryByNationalNumber.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default function getCountryByCallingCode(callingCode, {\r\n\tnationalNumber: nationalPhoneNumber,\r\n\tdefaultCountry,\r\n\tmetadata\r\n}) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn getCountryByNationalNumber(nationalPhoneNumber, {\r\n\t\tcountries: possibleCountries,\r\n\t\tdefaultCountry,\r\n\t\tmetadata: metadata.metadata\r\n\t})\r\n}", "// When phone numbers are written in `RFC3966` format — `\"tel:+12133734253\"` —\r\n// they can have their \"calling code\" part written separately in a `phone-context` parameter.\r\n// Example: `\"tel:12133734253;phone-context=+1\"`.\r\n// This function parses the full phone number from the local number and the `phone-context`\r\n// when the `phone-context` contains a `+` sign.\r\n\r\nimport {\r\n  VALID_DIGITS,\r\n  // PLUS_CHARS\r\n} from '../constants.js'\r\n\r\nexport const PLUS_SIGN = '+'\r\n\r\nconst RFC3966_VISUAL_SEPARATOR_ = '[\\\\-\\\\.\\\\(\\\\)]?'\r\n\r\nconst RFC3966_PHONE_DIGIT_ = '(' + '[' + VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')'\r\n\r\nconst RFC3966_GLOBAL_NUMBER_DIGITS_ =\r\n\t'^' +\r\n\t'\\\\' +\r\n\tPLUS_SIGN +\r\n\tRFC3966_PHONE_DIGIT_ +\r\n\t'*' +\r\n\t'[' + VALID_DIGITS +  ']' +\r\n\tRFC3966_PHONE_DIGIT_ +\r\n\t'*' +\r\n\t'$'\r\n\r\n/**\r\n * Regular expression of valid global-number-digits for the phone-context\r\n * parameter, following the syntax defined in RFC3966.\r\n */\r\nconst RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g')\r\n\r\n// In this port of Google's library, we don't accept alpha characters in phone numbers.\r\n// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS\r\nconst ALPHANUM_ = VALID_DIGITS\r\n\r\nconst RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*'\r\n\r\nconst VALID_ALPHA_ = 'a-zA-Z'\r\nconst RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\\\-)*[' + ALPHANUM_ + '])*'\r\n\r\nconst RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\\\.)*' + RFC3966_TOPLABEL_ + '\\\\.?$'\r\n\r\n/**\r\n * Regular expression of valid domainname for the phone-context parameter,\r\n * following the syntax defined in RFC3966.\r\n */\r\nconst RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g')\r\n\r\nexport const RFC3966_PREFIX_ = 'tel:'\r\nexport const RFC3966_PHONE_CONTEXT_ = ';phone-context='\r\nexport const RFC3966_ISDN_SUBADDRESS_ = ';isub='\r\n\r\n/**\r\n * Extracts the value of the phone-context parameter of `numberToExtractFrom`,\r\n * following the syntax defined in RFC3966.\r\n *\r\n * @param {string} numberToExtractFrom\r\n * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.\r\n */\r\nexport default function extractPhoneContext(numberToExtractFrom) {\r\n\tconst indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_)\r\n\t// If no phone-context parameter is present\r\n\tif (indexOfPhoneContext < 0) {\r\n\t\treturn null\r\n\t}\r\n\r\n\tconst phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length\r\n\t// If phone-context parameter is empty\r\n\tif (phoneContextStart >= numberToExtractFrom.length) {\r\n\t\treturn ''\r\n\t}\r\n\r\n\tconst phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart)\r\n\t// If phone-context is not the last parameter\r\n\tif (phoneContextEnd >= 0) {\r\n\t\treturn numberToExtractFrom.substring(phoneContextStart, phoneContextEnd)\r\n\t} else {\r\n\t\treturn numberToExtractFrom.substring(phoneContextStart)\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns whether the value of phoneContext follows the syntax defined in RFC3966.\r\n *\r\n * @param {string|null} phoneContext\r\n * @return {boolean}\r\n */\r\nexport function isPhoneContextValid(phoneContext) {\r\n\tif (phoneContext === null) {\r\n\t\treturn true\r\n\t}\r\n\r\n\tif (phoneContext.length === 0) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Does phone-context value match pattern of global-number-digits or domainname.\r\n\treturn RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) ||\r\n\t\tRFC3966_DOMAINNAME_PATTERN_.test(phoneContext)\r\n}", "import extractPhoneContext, {\r\n\tisPhoneContextValid,\r\n\tPLUS_SIGN,\r\n\tRFC3966_PREFIX_,\r\n\tRFC3966_PHONE_CONTEXT_,\r\n\tRFC3966_ISDN_SUBADDRESS_\r\n} from './extractPhoneContext.js'\r\n\r\nimport ParseError from '../ParseError.js'\r\n\r\n/**\r\n * @param  {string} numberToParse\r\n * @param  {string} nationalNumber\r\n * @return {}\r\n */\r\nexport default function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, {\r\n\textractFormattedPhoneNumber\r\n}) {\r\n\tconst phoneContext = extractPhoneContext(numberToParse)\r\n\tif (!isPhoneContextValid(phoneContext)) {\r\n\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t}\r\n\r\n\tlet phoneNumberString\r\n\r\n\tif (phoneContext === null) {\r\n\t\t// Extract a possible number from the string passed in.\r\n\t\t// (this strips leading characters that could not be the start of a phone number)\r\n\t\tphoneNumberString = extractFormattedPhoneNumber(numberToParse) || ''\r\n\t} else {\r\n\t\tphoneNumberString = ''\r\n\r\n\t\t// If the phone context contains a phone number prefix, we need to capture\r\n\t\t// it, whereas domains will be ignored.\r\n\t\tif (phoneContext.charAt(0) === PLUS_SIGN) {\r\n\t\t\tphoneNumberString += phoneContext\r\n\t\t}\r\n\r\n\t\t// Now append everything between the \"tel:\" prefix and the phone-context.\r\n\t\t// This should include the national number, an optional extension or\r\n\t\t// isdn-subaddress component. Note we also handle the case when \"tel:\" is\r\n\t\t// missing, as we have seen in some of the phone number inputs.\r\n\t\t// In that case, we append everything from the beginning.\r\n\t\tconst indexOfRfc3966Prefix = numberToParse.indexOf(RFC3966_PREFIX_)\r\n\t\tlet indexOfNationalNumber\r\n\t\t// RFC 3966 \"tel:\" prefix is preset at this stage because\r\n\t\t// `isPhoneContextValid()` requires it to be present.\r\n\t\t/* istanbul ignore else */\r\n\t\tif (indexOfRfc3966Prefix >= 0) {\r\n\t\t\tindexOfNationalNumber = indexOfRfc3966Prefix + RFC3966_PREFIX_.length\r\n\t\t} else {\r\n\t\t\tindexOfNationalNumber = 0\r\n\t\t}\r\n\t\tconst indexOfPhoneContext = numberToParse.indexOf(RFC3966_PHONE_CONTEXT_)\r\n\t\tphoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext)\r\n\t}\r\n\r\n\t// Delete the isdn-subaddress and everything after it if it is present.\r\n\t// Note extension won't appear at the same time with isdn-subaddress\r\n\t// according to paragraph 5.3 of the RFC3966 spec.\r\n\tconst indexOfIsdn = phoneNumberString.indexOf(RFC3966_ISDN_SUBADDRESS_)\r\n\tif (indexOfIsdn > 0) {\r\n\t\tphoneNumberString = phoneNumberString.substring(0, indexOfIsdn)\r\n\t}\r\n\t// If both phone context and isdn-subaddress are absent but other\r\n\t// parameters are present, the parameters are left in nationalNumber.\r\n\t// This is because we are concerned about deleting content from a potential\r\n\t// number string when there is no strong evidence that the number is\r\n\t// actually written in RFC3966.\r\n\r\n\tif (phoneNumberString !== '') {\r\n\t\treturn phoneNumberString\r\n\t}\r\n}", "// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN\r\n} from './constants.js'\r\n\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport isViablePhoneNumber, { isViablePhoneNumberStart } from './helpers/isViablePhoneNumber.js'\r\nimport extractExtension from './helpers/extension/extractExtension.js'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber.js'\r\nimport getCountryCallingCode from './getCountryCallingCode.js'\r\nimport { isPossibleNumber } from './isPossible.js'\r\n// import { parseRFC3966 } from './helpers/RFC3966.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport matchesEntirely from './helpers/matchesEntirely.js'\r\nimport extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractNationalNumber from './helpers/extractNationalNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\nimport extractFormattedPhoneNumberFromPossibleRfc3966NumberUri from './helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// A trailing `#` is sometimes used when writing phone numbers with extensions in US.\r\n// Example: \"+1 (645) 123 1234-910#\" number has extension \"910\".\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + '#' + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// Examples:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\n\r\n/**\r\n * Parses a phone number.\r\n *\r\n * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)\r\n * parse('123456789', { defaultCountry: 'RU' }, metadata)\r\n * parse('123456789', undefined, metadata)\r\n *\r\n * @param  {string} input\r\n * @param  {object} [options]\r\n * @param  {object} metadata\r\n * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).\r\n */\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext, error } = parseInput(text, options.v2, options.extract)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tif (error === 'TOO_SHORT') {\r\n\t\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t\t}\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcountryCallingCodeSource,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\tphoneNumber.__countryCallingCodeSource = countryCallingCodeSource\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\t// isInternational: countryCallingCode !== undefined\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.\r\n * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nfunction extractFormattedPhoneNumber(text, extract, throwOnError) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (throwOnError) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\tif (extract === false) {\r\n\t\treturn text\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.\r\n * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2, extract) {\r\n\t// // Parse RFC 3966 phone number URI.\r\n\t// if (text && text.indexOf('tel:') === 0) {\r\n\t// \treturn parseRFC3966(text)\r\n\t// }\r\n\t// let number = extractFormattedPhoneNumber(text, extract, v2)\r\n\tlet number = extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(text, {\r\n\t\textractFormattedPhoneNumber: (text) => extractFormattedPhoneNumber(text, extract, v2)\r\n\t})\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\tif (!isViablePhoneNumber(number)) {\r\n\t\tif (isViablePhoneNumberStart(number)) {\r\n\t\t\treturn { error: 'TOO_SHORT' }\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst withExtensionStripped = extractExtension(number)\r\n\tif (withExtensionStripped.ext) {\r\n\t\treturn withExtensionStripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, nationalNumber, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone: nationalNumber\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber — Example: \"(213) 373-4253\".\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\t// Extract calling code from phone number.\r\n\tlet { countryCallingCodeSource, countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tparseIncompletePhoneNumber(formattedPhoneNumber),\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// Choose a country by `countryCallingCode`.\r\n\tlet country\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.selectNumberingPlan(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is passed in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` is `undefined`.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn {\r\n\t\t\tcountryCallingCodeSource,\r\n\t\t\tcountryCallingCode\r\n\t\t}\r\n\t}\r\n\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = extractNationalNumber(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tmetadata\r\n\t)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = getCountryByCallingCode(countryCallingCode, {\r\n\t\tnationalNumber,\r\n\t\tdefaultCountry,\r\n\t\tmetadata\r\n\t})\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcountryCallingCodeSource,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}", "import parse from './parse.js'\r\n\r\nexport default function parsePhoneNumberWithError(text, options, metadata) {\r\n\treturn parse(text, { ...options, v2: true }, metadata)\r\n}", "import parsePhoneNumberWithError from './parsePhoneNumberWithError_.js'\r\nimport ParseError from './ParseError.js'\r\nimport { isSupportedCountry } from './metadata.js'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumberWithError(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n", "import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber_ from './parsePhoneNumber_.js'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n", "import parsePhoneNumberWithError_ from './parsePhoneNumberWithError_.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function parsePhoneNumberWithError() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberWithError_(text, options, metadata)\r\n}", "import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\n\r\nexport default function isValidPhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isValid() || false\r\n}", "import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumber from './parsePhoneNumber_.js'\r\n\r\nexport default function isPossiblePhoneNumber() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\tconst phoneNumber = parsePhoneNumber(text, options, metadata)\r\n\treturn phoneNumber && phoneNumber.isPossible() || false\r\n}", "import normalizeArguments from './normalizeArguments.js'\r\nimport parsePhoneNumberWithError from './parsePhoneNumberWithError_.js'\r\nimport ParseError from './ParseError.js'\r\nimport Metadata from './metadata.js'\r\nimport checkNumberLength from './helpers/checkNumberLength.js'\r\n\r\nexport default function validatePhoneNumberLength() {\r\n\tlet { text, options, metadata } = normalizeArguments(arguments)\r\n\toptions = {\r\n\t\t...options,\r\n\t\textract: false\r\n\t}\r\n\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\tconst phoneNumber = parsePhoneNumberWithError(text, options, metadata)\r\n\t\tmetadata = new Metadata(metadata)\r\n\t\tmetadata.selectNumberingPlan(phoneNumber.countryCallingCode)\r\n\t\tconst result = checkNumberLength(phoneNumber.nationalNumber, metadata)\r\n\t\tif (result !== 'IS_POSSIBLE') {\r\n\t\t\treturn result\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\treturn error.message\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}", "// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\r\n\r\nclass Node {\r\n  constructor(key, value, next = null, prev = null) {\r\n    this.key = key;\r\n    this.value = value;\r\n    this.next = next;\r\n    this.prev = prev;\r\n  }\r\n}\r\n\r\nexport default class LRUCache {\r\n  //set default limit of 10 if limit is not passed.\r\n  constructor(limit = 10) {\r\n    this.size = 0;\r\n    this.limit = limit;\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.cache = {};\r\n  }\r\n\r\n  // Write Node to head of LinkedList\r\n  // update cache with Node key and Node reference\r\n  put(key, value){\r\n    this.ensureLimit();\r\n\r\n    if(!this.head){\r\n      this.head = this.tail = new Node(key, value);\r\n    }else{\r\n      const node = new Node(key, value, this.head);\r\n      this.head.prev = node;\r\n      this.head = node;\r\n    }\r\n\r\n    //Update the cache map\r\n    this.cache[key] = this.head;\r\n    this.size++;\r\n  }\r\n\r\n  // Read from cache map and make that node as new Head of LinkedList\r\n  get(key){\r\n    if(this.cache[key]){\r\n      const value = this.cache[key].value;\r\n\r\n      // node removed from it's position and cache\r\n      this.remove(key)\r\n      // write node again to the head of LinkedList to make it most recently used\r\n      this.put(key, value);\r\n\r\n      return value;\r\n    }\r\n\r\n    console.log(`Item not available in cache for key ${key}`);\r\n  }\r\n\r\n  ensureLimit(){\r\n    if(this.size === this.limit){\r\n      this.remove(this.tail.key)\r\n    }\r\n  }\r\n\r\n  remove(key){\r\n    const node = this.cache[key];\r\n\r\n    if(node.prev !== null){\r\n      node.prev.next = node.next;\r\n    }else{\r\n      this.head = node.next;\r\n    }\r\n\r\n    if(node.next !== null){\r\n      node.next.prev = node.prev;\r\n    }else{\r\n      this.tail = node.prev\r\n    }\r\n\r\n    delete this.cache[key];\r\n    this.size--;\r\n  }\r\n\r\n  clear() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.size = 0;\r\n    this.cache = {};\r\n  }\r\n\r\n  // // Invokes the callback function with every node of the chain and the index of the node.\r\n  // forEach(fn) {\r\n  //   let node = this.head;\r\n  //   let counter = 0;\r\n  //   while (node) {\r\n  //     fn(node, counter);\r\n  //     node = node.next;\r\n  //     counter++;\r\n  //   }\r\n  // }\r\n\r\n  // // To iterate over LRU with a 'for...of' loop\r\n  // *[Symbol.iterator]() {\r\n  //   let node = this.head;\r\n  //   while (node) {\r\n  //     yield node;\r\n  //     node = node.next;\r\n  //   }\r\n  // }\r\n}", "import LRUCache from './LRUCache.js'\r\n\r\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n// that use-case won't have a lot of benefit.\r\nexport default class RegExpCache {\r\n\tconstructor(size) {\r\n\t\tthis.cache = new LRUCache(size)\r\n\t}\r\n\r\n\tgetPatternForRegExp(pattern) {\r\n\t\tlet regExp = this.cache.get(pattern)\r\n\t\tif (!regExp) {\r\n\t\t\tregExp = new RegExp('^' + pattern)\r\n\t\t\tthis.cache.put(pattern, regExp)\r\n\t\t}\r\n\t\treturn regExp\r\n\t}\r\n}", "/** Returns a regular expression quantifier with an upper and lower limit. */\r\nexport function limit(lower, upper)\r\n{\r\n\tif ((lower < 0) || (upper <= 0) || (upper < lower)) {\r\n\t\tthrow new TypeError()\r\n\t}\r\n\treturn `{${lower},${upper}}`\r\n}\r\n\r\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\r\nexport function trimAfterFirstMatch(regexp, string)\r\n{\r\n\tconst index = string.search(regexp)\r\n\r\n\tif (index >= 0) {\r\n\t\treturn string.slice(0, index)\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\nexport function startsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring) === 0\r\n}\r\n\r\nexport function endsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length\r\n}\r\n", "// Javascript doesn't support UTF-8 regular expressions.\r\n// So mimicking them here.\r\n\r\n// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\r\n\r\nconst _pZ = '\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\nexport const pZ = `[${_pZ}]`\r\nexport const PZ = `[^${_pZ}]`\r\n\r\nexport const _pN = '\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\n// const pN = `[${_pN}]`\r\n\r\nconst _pNd = '\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\nexport const pNd = `[${_pNd}]`\r\n\r\nexport const _pL = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\r\nconst pL = `[${_pL}]`\r\nconst pL_regexp = new RegExp(pL)\r\n\r\nconst _pSc = '\\u0024\\u00A2-\\u00A5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\r\nconst pSc = `[${_pSc}]`\r\nconst pSc_regexp = new RegExp(pSc)\r\n\r\nconst _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26'\r\nconst pMn = `[${_pMn}]`\r\nconst pMn_regexp = new RegExp(pMn)\r\n\r\nconst _InBasic_Latin = '\\u0000-\\u007F'\r\nconst _InLatin_1_Supplement = '\\u0080-\\u00FF'\r\nconst _InLatin_Extended_A = '\\u0100-\\u017F'\r\nconst _InLatin_Extended_Additional = '\\u1E00-\\u1EFF'\r\nconst _InLatin_Extended_B = '\\u0180-\\u024F'\r\nconst _InCombining_Diacritical_Marks = '\\u0300-\\u036F'\r\n\r\nconst latinLetterRegexp = new RegExp\r\n(\r\n\t'[' +\r\n\t_InBasic_Latin +\r\n\t_InLatin_1_Supplement +\r\n\t_InLatin_Extended_A +\r\n\t_InLatin_Extended_Additional +\r\n\t_InLatin_Extended_B +\r\n\t_InCombining_Diacritical_Marks +\r\n\t']'\r\n)\r\n\r\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\r\nexport function isLatinLetter(letter)\r\n{\r\n\t// Combining marks are a subset of non-spacing-mark.\r\n\tif (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn latinLetterRegexp.test(letter)\r\n}\r\n\r\nexport function isInvalidPunctuationSymbol(character)\r\n{\r\n\treturn character === '%' || pSc_regexp.test(character)\r\n}", "import parsePhoneNumber from '../parsePhoneNumber.js'\r\n\r\n/**\r\n * Matches a phone number object against a phone number string.\r\n * @param  {string} phoneNumberString\r\n * @param  {PhoneNumber} phoneNumber\r\n * @param  {object} metadata — Metadata JSON\r\n * @return {'INVALID_NUMBER'|'NO_MATCH'|'SHORT_NSN_MATCH'|'NSN_MATCH'|'EXACT_MATCH'}\r\n */\r\nexport default function matchPhoneNumberStringAgainstPhoneNumber(phoneNumberString, phoneNumber, metadata) {\r\n\t// Parse `phoneNumberString`.\r\n\tlet phoneNumberStringContainsCallingCode = true\r\n\tlet parsedPhoneNumber = parsePhoneNumber(phoneNumberString, metadata)\r\n\tif (!parsedPhoneNumber) {\r\n\t\t// If `phoneNumberString` didn't contain a country calling code\r\n\t\t// then substitute it with the `phoneNumber`'s country calling code.\r\n\t\tphoneNumberStringContainsCallingCode = false\r\n\t\tparsedPhoneNumber = parsePhoneNumber(phoneNumberString, { defaultCallingCode: phoneNumber.countryCallingCode }, metadata)\r\n\t}\r\n\tif (!parsedPhoneNumber) {\r\n\t\treturn 'INVALID_NUMBER'\r\n\t}\r\n\r\n\t// Check that the extensions match.\r\n\tif (phoneNumber.ext) {\r\n\t\tif (parsedPhoneNumber.ext !== phoneNumber.ext) {\r\n\t\t\treturn 'NO_MATCH'\r\n\t\t}\r\n\t} else {\r\n\t\tif (parsedPhoneNumber.ext) {\r\n\t\t\treturn 'NO_MATCH'\r\n\t\t}\r\n\t}\r\n\r\n\t// Check that country calling codes match.\r\n\tif (phoneNumberStringContainsCallingCode) {\r\n\t\tif (phoneNumber.countryCallingCode !== parsedPhoneNumber.countryCallingCode) {\r\n\t\t\treturn 'NO_MATCH'\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if the whole numbers match.\r\n\tif (phoneNumber.number === parsedPhoneNumber.number) {\r\n\t\tif (phoneNumberStringContainsCallingCode) {\r\n\t\t\treturn 'EXACT_MATCH'\r\n\t\t} else {\r\n\t\t\treturn 'NSN_MATCH'\r\n\t\t}\r\n\t}\r\n\r\n\t// Check if one national number is a \"suffix\" of the other.\r\n\tif (\r\n\t\tphoneNumber.nationalNumber.indexOf(parsedPhoneNumber.nationalNumber) === 0 ||\r\n\t\tparsedPhoneNumber.nationalNumber.indexOf(phoneNumber.nationalNumber) === 0\r\n\t) {\r\n\t\t// \"A SHORT_NSN_MATCH occurs if there is a difference because of the\r\n\t\t//  presence or absence of an 'Italian leading zero', the presence or\r\n\t\t//  absence of an extension, or one NSN being a shorter variant of the\r\n\t\t//  other.\"\r\n\t\treturn 'SHORT_NSN_MATCH'\r\n\t}\r\n\r\n\treturn 'NO_MATCH'\r\n}", "import isValidNumber from '../isValid.js'\r\nimport parseDigits from '../helpers/parseDigits.js'\r\nimport matchPhoneNumberStringAgainstPhoneNumber from './matchPhoneNumberStringAgainstPhoneNumber.js'\r\nimport Metadata from '../metadata.js'\r\nimport getCountryByCallingCode from '../helpers/getCountryByCallingCode.js'\r\nimport { chooseFormatForNumber } from '../format.js'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util.js'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(phoneNumber, { candidate, metadata })\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(phoneNumber, { candidate, defaultCountry, metadata })\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata)\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\t// Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata })\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(phoneNumber, { candidate, defaultCountry, metadata, regExpCache })\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata) ||\r\n\t\t\tcontainsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) ||\r\n\t\t\t!isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata })\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tphoneNumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and are grouped in the same way\r\n\t * that we would have formatted it, or as a single block.\r\n\t * For example, a US number written as \"650 2530000\" is not accepted\r\n\t * at this leniency level, whereas \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(phoneNumber, { candidate, defaultCountry, metadata, regExpCache })\r\n\t{\r\n\t\tif (\r\n\t\t\t!phoneNumber.isValid() ||\r\n\t\t\t!containsOnlyValidXChars(phoneNumber, candidate, metadata) ||\r\n\t\t\tcontainsMoreThanOneSlashInNationalNumber(phoneNumber, candidate) ||\r\n\t\t\t!isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata })\r\n\t\t)\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tphoneNumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsAreExactlyPresent,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(phoneNumber, candidate, metadata)\r\n{\r\n\t// The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n\t// national significant number or (2) an extension sign, in which case they always precede the\r\n\t// extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n\t// have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n\t// or 'X'. We ignore the character if it appears as the last character of the string.\r\n\tfor (let index = 0; index < candidate.length - 1; index++)\r\n\t{\r\n\t\tconst charAtIndex = candidate.charAt(index)\r\n\r\n\t\tif (charAtIndex === 'x' || charAtIndex === 'X')\r\n\t\t{\r\n\t\t\tconst charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n\t\t\tif (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n\t\t\t{\r\n\t\t\t\t// This is the carrier code case, in which the 'X's always precede the national\r\n\t\t\t\t// significant number.\r\n\t\t\t\tindex++\r\n\t\t\t\tif (matchPhoneNumberStringAgainstPhoneNumber(candidate.substring(index), phoneNumber, metadata) !== 'NSN_MATCH')\r\n\t\t\t\t{\r\n\t\t\t\t\treturn false\r\n\t\t\t\t}\r\n\t\t\t\t// This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t\t\t\t// extension number.\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tconst ext = parseDigits(candidate.substring(index))\r\n\t\t\t\tif (ext) {\r\n\t\t\t\t\tif (phoneNumber.ext !== ext)  {\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (phoneNumber.ext) {\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(phoneNumber, { defaultCountry, metadata: _metadata })\r\n{\r\n\t// First, check how we deduced the country code. If it was written in international format, then\r\n\t// the national prefix is not required.\r\n\tif (phoneNumber.__countryCallingCodeSource !== 'FROM_DEFAULT_COUNTRY')\r\n\t{\r\n\t\treturn true\r\n\t}\r\n\r\n\tconst metadata = new Metadata(_metadata)\r\n\tmetadata.selectNumberingPlan(phoneNumber.countryCallingCode)\r\n\r\n\tconst phoneNumberRegion = phoneNumber.country || getCountryByCallingCode(phoneNumber.countryCallingCode, {\r\n\t\tnationalNumber: phoneNumber.nationalNumber,\r\n\t\tdefaultCountry,\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Check if a national prefix should be present when formatting this number.\r\n\tconst nationalNumber = phoneNumber.nationalNumber\r\n\tconst format = chooseFormatForNumber(metadata.numberingPlan.formats(), nationalNumber)\r\n\r\n\t// To do this, we check that a national prefix formatting rule was present\r\n\t// and that it wasn't just the first-group symbol ($1) with punctuation.\r\n\tif (format.nationalPrefixFormattingRule())\r\n\t{\r\n\t\tif (metadata.numberingPlan.nationalPrefixIsOptionalWhenFormattingInNationalFormat())\r\n\t\t{\r\n\t\t\t// The national-prefix is optional in these cases, so we don't need to check if it was present.\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\tif (!format.usesNationalPrefix())\r\n\t\t{\r\n\t\t\t// National Prefix not needed for this number.\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\treturn Boolean(phoneNumber.nationalPrefix)\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(phoneNumber, candidate)\r\n{\r\n\tconst firstSlashInBodyIndex = candidate.indexOf('/')\r\n\tif (firstSlashInBodyIndex < 0)\r\n\t{\r\n\t\t// No slashes, this is okay.\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Now look for a second one.\r\n\tconst secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n\tif (secondSlashInBodyIndex < 0)\r\n\t{\r\n\t\t// Only one slash, this is okay.\r\n\t\treturn false\r\n\t}\r\n\r\n\t// If the first slash is after the country calling code, this is permitted.\r\n\tconst candidateHasCountryCode =\r\n\t\t\tphoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITH_PLUS_SIGN' ||\r\n\t\t\tphoneNumber.__countryCallingCodeSource === 'FROM_NUMBER_WITHOUT_PLUS_SIGN'\r\n\r\n\tif (candidateHasCountryCode && parseDigits(candidate.substring(0, firstSlashInBodyIndex)) === phoneNumber.countryCallingCode)\r\n\t{\r\n\t\t// Any more slashes and this is illegal.\r\n\t\treturn candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid(\r\n\tnumber,\r\n\tcandidate,\r\n\tmetadata,\r\n\tcheckGroups,\r\n\tregExpCache\r\n) {\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tconst normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n\tlet formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n\tif (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n\t\treturn true\r\n\t}\r\n\r\n\t// If this didn't pass, see if there are any alternate formats that match, and try them instead.\r\n\tconst alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\r\n\tif (alternateFormats) {\r\n\t\tfor (const alternateFormat of alternateFormats.numberFormats()) {\r\n\t\t\tif (alternateFormat.leadingDigitsPatterns().length > 0) {\r\n\t\t\t\t// There is only one leading digits pattern for alternate formats.\r\n\t\t\t\tconst leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0])\r\n\t\t\t\tif (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\r\n\t\t\t\t\t// Leading digits don't match; try another one.\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tformattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n\t\t\tif (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\r\nfunction getNationalNumberGroups(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n) {\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tif (formattingPattern) {\r\n\t\t// We format the NSN only, and split that according to the separator.\r\n\t\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\t\treturn util.formatNsnUsingPattern(nationalSignificantNumber,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tformattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n\t// This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\r\n\tconst rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n\t// We remove the extension part from the formatted string before splitting it into different\r\n\t// groups.\r\n\tlet endIndex = rfc3966Format.indexOf(';')\r\n\tif (endIndex < 0) {\r\n\t\tendIndex = rfc3966Format.length\r\n\t}\r\n\r\n\t// The country-code will have a '-' following it.\r\n\tconst startIndex = rfc3966Format.indexOf('-') + 1\r\n\treturn rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tconst candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n\t// Set this to the last group, skipping it if the number has an extension.\r\n\tlet candidateNumberGroupIndex =\r\n\t\t\tnumber.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n\t// First we check if the national significant number is formatted as a block.\r\n\t// We use contains and not equals, since the national significant number may be present with\r\n\t// a prefix such as a national number prefix, or the country code itself.\r\n\tif (candidateGroups.length == 1\r\n\t\t\t|| candidateGroups[candidateNumberGroupIndex].contains(\r\n\t\t\t\t\tutil.getNationalSignificantNumber(number)))\r\n\t{\r\n\t\treturn true\r\n\t}\r\n\r\n\t// Starting from the end, go through in reverse, excluding the first group, and check the\r\n\t// candidate and number groups are the same.\r\n\tlet formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n\twhile (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n\t{\r\n\t\tif (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tformattedNumberGroupIndex--\r\n\t\tcandidateNumberGroupIndex--\r\n\t}\r\n\r\n\t// Now check the first group. There may be a national prefix at the start, so we only check\r\n\t// that the candidate group ends with the formatted number group.\r\n\treturn (candidateNumberGroupIndex >= 0\r\n\t\t\t&& endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n\tthrow new Error('This part of code hasn\\'t been ported')\r\n\r\n\tlet fromIndex = 0\r\n\tif (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n\t{\r\n\t\t// First skip the country code if the normalized candidate contained it.\r\n\t\tconst countryCode = String(number.getCountryCode())\r\n\t\tfromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n\t}\r\n\r\n\t// Check each group of consecutive digits are not broken into separate groupings in the\r\n\t// {@code normalizedCandidate} string.\r\n\tfor (let i = 0; i < formattedNumberGroups.length; i++)\r\n\t{\r\n\t\t// Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n\t\t// doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n\t\tfromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n\t\tif (fromIndex < 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Moves {@code fromIndex} forward.\r\n\t\tfromIndex += formattedNumberGroups[i].length()\r\n\t\tif (i == 0 && fromIndex < normalizedCandidate.length())\r\n\t\t{\r\n\t\t\t// We are at the position right after the NDC. We get the region used for formatting\r\n\t\t\t// information based on the country code in the phone number, rather than the number itself,\r\n\t\t\t// as we do not need to distinguish between different countries with the same country\r\n\t\t\t// calling code and this is faster.\r\n\t\t\tconst region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\t\t\tif (util.getNddPrefixForRegion(region, true) != null\r\n\t\t\t\t\t&& Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n\t\t\t\t// This means there is no formatting symbol after the NDC. In this case, we only\r\n\t\t\t\t// accept the number if there is no formatting symbol at all in the number, except\r\n\t\t\t\t// for extensions. This is only important for countries with national prefixes.\r\n\t\t\t\tconst nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\t\t\t\treturn startsWith\r\n\t\t\t\t(\r\n\t\t\t\t\tnormalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n\t\t\t\t\t nationalSignificantNumber\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// The check here makes sure that we haven't mistakenly already used the extension to\r\n\t// match the last group of the subscriber number. Note the extension cannot have\r\n\t// formatting in-between digits.\r\n\treturn normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}", "import { trimAfterFirstMatch } from './util.js'\r\n\r\n// Regular expression of characters typically used to start a second phone number for the purposes\r\n// of parsing. This allows us to strip off parts of the number that are actually the start of\r\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\r\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\r\n// extension so that the first number is parsed correctly.\r\n//\r\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\r\n//\r\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\r\n\r\nexport default function parsePreCandidate(candidate)\r\n{\r\n\t// Check for extra numbers at the end.\r\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\r\n\t// from split notations (+41 79 123 45 67 / 68).\r\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\r\n}", "// Matches strings that look like dates using \"/\" as a separator.\r\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\r\nconst SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/\r\n\r\n// Matches timestamps.\r\n// Examples: \"2012-01-02 08:00\".\r\n// Note that the reg-ex does not include the\r\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\r\nconst TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/\r\nconst TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/\r\n\r\nexport default function isValidPreCandidate(candidate, offset, text)\r\n{\r\n\t// Skip a match that is more likely to be a date.\r\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Skip potential time-stamps.\r\n\tif (TIME_STAMPS.test(candidate))\r\n\t{\r\n\t\tconst followingText = text.slice(offset + candidate.length)\r\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}", "// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\nimport { PLUS_CHARS } from '../constants.js'\r\nimport { limit } from './util.js'\r\n\r\nimport {\r\n\tisLatinLetter,\r\n\tisInvalidPunctuationSymbol\r\n} from './utf-8.js'\r\n\r\nconst OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'\r\nconst CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D'\r\nconst NON_PARENS = `[^${OPENING_PARENS}${CLOSING_PARENS}]`\r\n\r\nexport const LEAD_CLASS = `[${OPENING_PARENS}${PLUS_CHARS}]`\r\n\r\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\r\nconst LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS)\r\n\r\n// Limit on the number of pairs of brackets in a phone number.\r\nconst BRACKET_PAIR_LIMIT = limit(0, 3)\r\n\r\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\r\nconst MATCHING_BRACKETS_ENTIRE = new RegExp\r\n(\r\n\t'^'\r\n\t+ \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\"\r\n\t+ NON_PARENS + \"+\"\r\n\t+ \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT\r\n\t+ NON_PARENS + \"*\"\r\n\t+ '$'\r\n)\r\n\r\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\r\nconst PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/\r\n\r\nexport default function isValidCandidate(candidate, offset, text, leniency)\r\n{\r\n\t// Check the candidate doesn't contain any formatting\r\n\t// which would indicate that it really isn't a phone number.\r\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\r\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\r\n\tif (leniency !== 'POSSIBLE')\r\n\t{\r\n\t\t// If the candidate is not at the start of the text,\r\n\t\t// and does not start with phone-number punctuation,\r\n\t\t// check the previous character.\r\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate))\r\n\t\t{\r\n\t\t\tconst previousChar = text[offset - 1]\r\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\r\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lastCharIndex = offset + candidate.length\r\n\t\tif (lastCharIndex < text.length)\r\n\t\t{\r\n\t\t\tconst nextChar = text[lastCharIndex]\r\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}", "/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber.js'\r\n\r\nimport {\r\n  MAX_LENGTH_FOR_NSN,\r\n  MAX_LENGTH_COUNTRY_CODE,\r\n  VALID_PUNCTUATION\r\n} from './constants.js'\r\n\r\nimport createExtensionPattern from './helpers/extension/createExtensionPattern.js'\r\n\r\nimport RegExpCache from './findNumbers/RegExpCache.js'\r\n\r\nimport {\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n} from './findNumbers/util.js'\r\n\r\nimport {\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n} from './findNumbers/utf-8.js'\r\n\r\nimport Leniency from './findNumbers/Leniency.js'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate.js'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate.js'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate.js'\r\n\r\nimport { isSupportedCountry } from './metadata.js'\r\n\r\nimport parsePhoneNumber from './parsePhoneNumber.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nconst EXTN_PATTERNS_FOR_MATCHING = createExtensionPattern('matching')\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /**\r\n   * @param {string} text — the character sequence that we will search, null for no text.\r\n   * @param {'POSSIBLE'|'VALID'|'STRICT_GROUPING'|'EXACT_GROUPING'} [options.leniency] — The leniency to use when evaluating candidate phone numbers. See `source/findNumbers/Leniency.js` for more details.\r\n   * @param {number} [options.maxTries] — The maximum number of invalid numbers to try before giving up on the text. This is to cover degenerate cases where the text has a lot of false positives in it. Must be >= 0.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      v2: options.v2,\r\n      defaultCallingCode: options.defaultCallingCode,\r\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\r\n      leniency: options.leniency || (options.extended ? 'POSSIBLE' : 'VALID'),\r\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n    // Validate `leniency`.\r\n\t\tif (!options.leniency) {\r\n\t\t\tthrow new TypeError('`leniency` is required')\r\n\t\t}\r\n    if (options.leniency !== 'POSSIBLE' && options.leniency !== 'VALID') {\r\n      throw new TypeError(`Invalid \\`leniency\\`: \"${options.leniency}\". Supported values: \"POSSIBLE\", \"VALID\".`)\r\n    }\r\n\r\n    // Validate `maxTries`.\r\n\t\tif (options.maxTries < 0) {\r\n\t\t\tthrow new TypeError('`maxTries` must be `>= 0`')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t// The degree of phone number validation.\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency) {\r\n\t\t\tthrow new TypeError(`Unknown leniency: \"${options.leniency}\"`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n\r\n    /** The iteration tristate. */\r\n    this.state = 'NOT_READY'\r\n\r\n    /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n    this.searchIndex = 0\r\n\r\n    // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n    // countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n    // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n    // that use-case won't have a lot of benefit.\r\n    this.regExpCache = new RegExpCache(32)\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() {\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null) {\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text)) {\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: match.phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n            const { phoneNumber } = match\r\n\r\n            const result = {\r\n              startsAt: match.startsAt,\r\n              endsAt: match.endsAt,\r\n              phone: phoneNumber.nationalNumber\r\n            }\r\n\r\n            if (phoneNumber.country) {\r\n              /* istanbul ignore if */\r\n              if (USE_NON_GEOGRAPHIC_COUNTRY_CODE && country === '001') {\r\n                result.countryCallingCode = phoneNumber.countryCallingCode\r\n              } else {\r\n                result.country = phoneNumber.country\r\n              }\r\n            } else {\r\n              result.countryCallingCode = phoneNumber.countryCallingCode\r\n            }\r\n\r\n            if (phoneNumber.ext) {\r\n              result.ext = phoneNumber.ext\r\n            }\r\n\r\n            return result\r\n          }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `substring`\r\n   * if the substring itself does not qualify as a match.\r\n   */\r\n  extractInnerMatch(substring, offset, text) {\r\n    for (const innerMatchPattern of INNER_MATCHES) {\r\n      let isFirstMatch = true\r\n      let candidateMatch\r\n      const innerMatchRegExp = new RegExp(innerMatchPattern, 'g')\r\n      while (this.maxTries > 0 && (candidateMatch = innerMatchRegExp.exec(substring)) !== null) {\r\n        if (isFirstMatch) {\r\n          // We should handle any group before this one too.\r\n          const candidate = trimAfterFirstMatch(\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            substring.slice(0, candidateMatch.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(candidate, offset, text)\r\n\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const candidate = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidateMatch[1])\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a `candidate` start index,\r\n        // therefore resort to using this kind of an approximation.\r\n        // (`groupMatcher` is called `candidateInSubstringMatch` in this javascript port)\r\n        // https://stackoverflow.com/questions/15934353/get-index-of-each-capture-in-a-javascript-regex\r\n        const candidateIndexGuess = substring.indexOf(candidate, candidateMatch.index)\r\n\r\n        const match = this.parseAndVerify(candidate, offset + candidateIndexGuess, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parse` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text) {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const phoneNumber = parsePhoneNumber(\r\n      candidate,\r\n      {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry,\r\n        defaultCallingCode: this.options.defaultCallingCode\r\n      },\r\n      this.metadata\r\n    )\r\n\r\n    if (!phoneNumber) {\r\n      return\r\n    }\r\n\r\n    if (!phoneNumber.isPossible()) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(phoneNumber, {\r\n      candidate,\r\n      defaultCountry: this.options.defaultCountry,\r\n      metadata: this.metadata,\r\n      regExpCache: this.regExpCache\r\n    })) {\r\n      return {\r\n        startsAt: offset,\r\n        endsAt: offset + candidate.length,\r\n        phoneNumber\r\n      }\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}", "import PhoneNumberMatcher from '../PhoneNumberMatcher.js'\r\nimport normalizeArguments from '../normalizeArguments.js'\r\n\r\nexport default function findNumbers() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\tconst results = []\r\n\twhile (matcher.hasNext()) {\r\n\t\tresults.push(matcher.next())\r\n\t}\r\n\treturn results\r\n}", "import normalizeArguments from '../normalizeArguments.js'\r\nimport PhoneNumberMatcher from '../PhoneNumberMatcher.js'\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport default function searchNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n", "import PhoneNumberMatcher from './PhoneNumberMatcher.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function findPhoneNumbersInText() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\tconst matcher = new PhoneNumberMatcher(text, { ...options, v2: true }, metadata)\r\n\tconst results = []\r\n\twhile (matcher.hasNext()) {\r\n\t\tresults.push(matcher.next())\r\n\t}\r\n\treturn results\r\n}", "import PhoneNumberMatcher from './PhoneNumberMatcher.js'\r\nimport normalizeArguments from './normalizeArguments.js'\r\n\r\nexport default function searchPhoneNumbersInText() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\tconst matcher = new PhoneNumberMatcher(text, { ...options, v2: true }, metadata)\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "// This \"state\" object simply holds the state of the \"AsYouType\" parser:\r\n//\r\n// * `country?: string`\r\n// * `callingCode?: string`\r\n// * `digits: string`\r\n// * `international: boolean`\r\n// * `missingPlus: boolean`\r\n// * `IDDPrefix?: string`\r\n// * `carrierCode?: string`\r\n// * `nationalPrefix?: string`\r\n// * `nationalSignificantNumber?: string`\r\n// * `nationalSignificantNumberMatchesInput: boolean`\r\n// * `complexPrefixBeforeNationalSignificantNumber?: string`\r\n//\r\n// `state.country` and `state.callingCode` aren't required to be in sync.\r\n// For example, `state.country` could be `\"AR\"` and `state.callingCode` could be `undefined`.\r\n// So `state.country` and `state.callingCode` are totally independent.\r\n//\r\nexport default class AsYouTypeState {\r\n\tconstructor({ onCountryChange, onCallingCodeChange }) {\r\n\t\tthis.onCountryChange = onCountryChange\r\n\t\tthis.onCallingCodeChange = onCallingCodeChange\r\n\t}\r\n\r\n\treset({ country, callingCode }) {\r\n\t\tthis.international = false\r\n\t\tthis.missingPlus = false\r\n\t\tthis.IDDPrefix = undefined\r\n\t\tthis.callingCode = undefined\r\n\t\tthis.digits = ''\r\n\t\tthis.resetNationalSignificantNumber()\r\n\t\tthis.initCountryAndCallingCode(country, callingCode)\r\n\t}\r\n\r\n\tresetNationalSignificantNumber() {\r\n\t\tthis.nationalSignificantNumber = this.getNationalDigits()\r\n\t\tthis.nationalSignificantNumberMatchesInput = true\r\n\t\tthis.nationalPrefix = undefined\r\n\t\tthis.carrierCode = undefined\r\n\t\tthis.complexPrefixBeforeNationalSignificantNumber = undefined\r\n\t}\r\n\r\n\tupdate(properties) {\r\n\t\tfor (const key of Object.keys(properties)) {\r\n\t\t\tthis[key] = properties[key]\r\n\t\t}\r\n\t}\r\n\r\n\tinitCountryAndCallingCode(country, callingCode) {\r\n\t\tthis.setCountry(country)\r\n\t\tthis.setCallingCode(callingCode)\r\n\t}\r\n\r\n\tsetCountry(country) {\r\n\t\tthis.country = country\r\n\t\tthis.onCountryChange(country)\r\n\t}\r\n\r\n\tsetCallingCode(callingCode) {\r\n\t\tthis.callingCode = callingCode\r\n\t\tthis.onCallingCodeChange(callingCode, this.country)\r\n\t}\r\n\r\n\tstartInternationalNumber(country, callingCode) {\r\n\t\t// Prepend the `+` to parsed input.\r\n\t\tthis.international = true\r\n\t\t// If a default country was set then reset it\r\n\t\t// because an explicitly international phone\r\n\t\t// number is being entered.\r\n\t\tthis.initCountryAndCallingCode(country, callingCode)\r\n\t}\r\n\r\n\tappendDigits(nextDigits) {\r\n\t\tthis.digits += nextDigits\r\n\t}\r\n\r\n\tappendNationalSignificantNumberDigits(nextDigits) {\r\n\t\tthis.nationalSignificantNumber += nextDigits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the part of `this.digits` that corresponds to the national number.\r\n\t * Basically, all digits that have been input by the user, except for the\r\n\t * international prefix and the country calling code part\r\n\t * (if the number is an international one).\r\n\t * @return {string}\r\n\t */\r\n\tgetNationalDigits() {\r\n\t\tif (this.international) {\r\n\t\t\treturn this.digits.slice(\r\n\t\t\t\t(this.IDDPrefix ? this.IDDPrefix.length : 0) +\r\n\t\t\t\t(this.callingCode ? this.callingCode.length : 0)\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n\r\n\tgetDigitsWithoutInternationalPrefix() {\r\n\t\tif (this.international) {\r\n\t\t\tif (this.IDDPrefix) {\r\n\t\t\t\treturn this.digits.slice(this.IDDPrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.digits\r\n\t}\r\n}", "// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function countOccurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times) {\r\n\tif (times < 1) {\r\n\t\treturn ''\r\n\t}\r\n\tlet result = ''\r\n\twhile (times > 1) {\r\n\t\tif (times & 1) {\r\n\t\t\tresult += string\r\n\t\t}\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\treturn result + string\r\n}\r\n\r\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\r\n\tif (string[cutBeforeIndex] === ')') {\r\n\t\tcutBeforeIndex++\r\n\t}\r\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex))\r\n}\r\n\r\nexport function closeNonPairedParens(template, cut_before) {\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\tconst opening_braces = countOccurences('(', retained_template)\r\n\tconst closing_braces = countOccurences(')', retained_template)\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length) {\r\n\t\tif (template[cut_before] === ')') {\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\nexport function stripNonPairedParens(string) {\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length) {\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces) {\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\treturn cleared_string\r\n}\r\n\r\nexport function populateTemplateWithDigits(template, position, digits) {\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for `digits` it is safe.\r\n\t// for (const digit of digits)\r\n\tfor (const digit of digits.split('')) {\r\n\t\t// If there is room for more digits in current `template`,\r\n\t\t// then set the next digit in the `template`,\r\n\t\t// and return the formatted digits so far.\r\n\t\t// If more digits are entered than the current format could handle.\r\n\t\tif (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tposition = template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\ttemplate = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t}\r\n\treturn [template, position]\r\n}", "import checkNumberLength from './helpers/checkNumberLength.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\nimport formatNationalNumberUsingFormat from './helpers/formatNationalNumberUsingFormat.js'\r\n\r\nexport default function formatCompleteNumber(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\tif (matcher.test(state.nationalSignificantNumber)) {\r\n\t\treturn formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(\r\n\t\t\tstate,\r\n\t\t\tformat,\r\n\t\t\t{\r\n\t\t\t\tmetadata,\r\n\t\t\t\tshouldTryNationalPrefixFormattingRule,\r\n\t\t\t\tgetSeparatorAfterNationalPrefix\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport function canFormatCompleteNumber(nationalSignificantNumber, metadata) {\r\n\treturn checkNumberLength(nationalSignificantNumber, metadata) === 'IS_POSSIBLE'\r\n}\r\n\r\nfunction formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {\r\n\tmetadata,\r\n\tshouldTryNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\t// `format` has already been checked for `nationalPrefix` requirement.\r\n\r\n\tconst {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode\r\n\t} = state\r\n\r\n\t// Format the number with using `national_prefix_formatting_rule`.\r\n\t// If the resulting formatted number is a valid formatted number, then return it.\r\n\t//\r\n\t// Google's AsYouType formatter is different in a way that it doesn't try\r\n\t// to format using the \"national prefix formatting rule\", and instead it\r\n\t// simply prepends a national prefix followed by a \" \" character.\r\n\t// This code does that too, but as a fallback.\r\n\t// The reason is that \"national prefix formatting rule\" may use parentheses,\r\n\t// which wouldn't be included has it used the simpler Google's way.\r\n\t//\r\n\tif (shouldTryNationalPrefixFormattingRule(format)) {\r\n\t\tconst formattedNumber = formatNationalNumber(state, format, {\r\n\t\t\tuseNationalPrefixFormattingRule: true,\r\n\t\t\tgetSeparatorAfterNationalPrefix,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\tif (formattedNumber) {\r\n\t\t\treturn formattedNumber\r\n\t\t}\r\n\t}\r\n\r\n\t// Format the number without using `national_prefix_formatting_rule`.\r\n\treturn formatNationalNumber(state, format, {\r\n\t\tuseNationalPrefixFormattingRule: false,\r\n\t\tgetSeparatorAfterNationalPrefix,\r\n\t\tmetadata\r\n\t})\r\n}\r\n\r\nfunction formatNationalNumber(state, format, {\r\n\tmetadata,\r\n\tuseNationalPrefixFormattingRule,\r\n\tgetSeparatorAfterNationalPrefix\r\n}) {\r\n\tlet formattedNationalNumber = formatNationalNumberUsingFormat(\r\n\t\tstate.nationalSignificantNumber,\r\n\t\tformat,\r\n\t\t{\r\n\t\t\tcarrierCode: state.carrierCode,\r\n\t\t\tuseInternationalFormat: state.international,\r\n\t\t\twithNationalPrefix: useNationalPrefixFormattingRule,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t)\r\n\tif (!useNationalPrefixFormattingRule) {\r\n\t\tif (state.nationalPrefix) {\r\n\t\t\t// If a national prefix was extracted, then just prepend it,\r\n\t\t\t// followed by a \" \" character.\r\n\t\t\tformattedNationalNumber = state.nationalPrefix +\r\n\t\t\t\tgetSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t} else if (state.complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\tformattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber +\r\n\t\t\t\t' ' +\r\n\t\t\t\tformattedNationalNumber\r\n\t\t}\r\n\t}\r\n\tif (isValidFormattedNationalNumber(formattedNationalNumber, state)) {\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n}\r\n\r\n// Check that the formatted phone number contains exactly\r\n// the same digits that have been input by the user.\r\n// For example, when \"0111523456789\" is input for `AR` country,\r\n// the extracted `this.nationalSignificantNumber` is \"91123456789\",\r\n// which means that the national part of `this.digits` isn't simply equal to\r\n// `this.nationalPrefix` + `this.nationalSignificantNumber`.\r\n//\r\n// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`\r\n// being formatted via `metadata[country].national_prefix_transform_rule`.\r\n// For example, for `VI` country, it prepends `340` to the national number,\r\n// and if this check hasn't been implemented, then there would be a bug\r\n// when `340` \"area coude\" is \"duplicated\" during input for `VI` country:\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n//\r\n// So, all these \"gotchas\" are filtered out.\r\n//\r\n// In the original Google's code, the comments say:\r\n// \"Check that we didn't remove nor add any extra digits when we matched\r\n// this formatting pattern. This usually happens after we entered the last\r\n// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\r\n// formatted but AYTF should retain all the number entered and not change\r\n// in order to match a format (of same leading digits and length) display\r\n// in that way.\"\r\n// \"If it's the same (i.e entered number and format is same), then it's\r\n// safe to return this in formatted number as nothing is lost / added.\"\r\n// Otherwise, don't use this format.\r\n// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\r\n// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\r\n//\r\nfunction isValidFormattedNationalNumber(formattedNationalNumber, state) {\r\n\treturn parseDigits(formattedNationalNumber) === state.getNationalDigits()\r\n}", "export default class PatternParser {\r\n\tparse(pattern) {\r\n\t\tthis.context = [{\r\n\t\t\tor: true,\r\n\t\t\tinstructions: []\r\n\t\t}]\r\n\r\n\t\tthis.parsePattern(pattern)\r\n\r\n\t\tif (this.context.length !== 1) {\r\n\t\t\tthrow new Error('Non-finalized contexts left when pattern parse ended')\r\n\t\t}\r\n\r\n\t\tconst { branches, instructions } = this.context[0]\r\n\r\n\t\tif (branches) {\r\n\t\t\treturn {\r\n\t\t\t\top: '|',\r\n\t\t\t\targs: branches.concat([\r\n\t\t\t\t\texpandSingleElementArray(instructions)\r\n\t\t\t\t])\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* istanbul ignore if */\r\n\t\tif (instructions.length === 0) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tif (instructions.length === 1) {\r\n\t\t\treturn instructions[0]\r\n\t\t}\r\n\r\n\t\treturn instructions\r\n\t}\r\n\r\n\tstartContext(context) {\r\n\t\tthis.context.push(context)\r\n\t}\r\n\r\n\tendContext() {\r\n\t\tthis.context.pop()\r\n\t}\r\n\r\n\tgetContext() {\r\n\t\treturn this.context[this.context.length - 1]\r\n\t}\r\n\r\n\tparsePattern(pattern) {\r\n\t\tif (!pattern) {\r\n\t\t\tthrow new Error('Pattern is required')\r\n\t\t}\r\n\r\n\t\tconst match = pattern.match(OPERATOR)\r\n\t\tif (!match) {\r\n\t\t\tif (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {\r\n\t\t\t\tthrow new Error(`Illegal characters found in a pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tthis.getContext().instructions = this.getContext().instructions.concat(\r\n\t\t\t\tpattern.split('')\r\n\t\t\t)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst operator = match[1]\r\n\t\tconst before = pattern.slice(0, match.index)\r\n\t\tconst rightPart = pattern.slice(match.index + operator.length)\r\n\r\n\t\tswitch (operator) {\r\n\t\t\tcase '(?:':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\tor: true,\r\n\t\t\t\t\tinstructions: [],\r\n\t\t\t\t\tbranches: []\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ')':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\")\" operator must be preceded by \"(?:\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tif (this.getContext().instructions.length === 0) {\r\n\t\t\t\t\tthrow new Error('No instructions found after \"|\" operator in an \"or\" group')\r\n\t\t\t\t}\r\n\t\t\t\tconst { branches } = this.getContext()\r\n\t\t\t\tbranches.push(\r\n\t\t\t\t\texpandSingleElementArray(\r\n\t\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '|',\r\n\t\t\t\t\targs: branches\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '|':\r\n\t\t\t\tif (!this.getContext().or) {\r\n\t\t\t\t\tthrow new Error('\"|\" operator can only be used inside \"or\" groups')\r\n\t\t\t\t}\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\t// The top-level is an implicit \"or\" group, if required.\r\n\t\t\t\tif (!this.getContext().branches) {\r\n\t\t\t\t\t// `branches` are not defined only for the root implicit \"or\" operator.\r\n\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\tif (this.context.length === 1) {\r\n\t\t\t\t\t\tthis.getContext().branches = []\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new Error('\"branches\" not found in an \"or\" group context')\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis.getContext().branches.push(\r\n\t\t\t\t\texpandSingleElementArray(\r\n\t\t\t\t\t\tthis.getContext().instructions\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t\tthis.getContext().instructions = []\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase '[':\r\n\t\t\t\tif (before) {\r\n\t\t\t\t\tthis.parsePattern(before)\r\n\t\t\t\t}\r\n\t\t\t\tthis.startContext({\r\n\t\t\t\t\toneOfSet: true\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\tcase ']':\r\n\t\t\t\tif (!this.getContext().oneOfSet) {\r\n\t\t\t\t\tthrow new Error('\"]\" operator must be preceded by \"[\" operator')\r\n\t\t\t\t}\r\n\t\t\t\tthis.endContext()\r\n\t\t\t\tthis.getContext().instructions.push({\r\n\t\t\t\t\top: '[]',\r\n\t\t\t\t\targs: parseOneOfSet(before)\r\n\t\t\t\t})\r\n\t\t\t\tbreak\r\n\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Unknown operator: ${operator}`)\r\n\t\t}\r\n\r\n\t\tif (rightPart) {\r\n\t\t\tthis.parsePattern(rightPart)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction parseOneOfSet(pattern) {\r\n\tconst values = []\r\n\tlet i = 0\r\n\twhile (i < pattern.length) {\r\n\t\tif (pattern[i] === '-') {\r\n\t\t\tif (i === 0 || i === pattern.length - 1) {\r\n\t\t\t\tthrow new Error(`Couldn't parse a one-of set pattern: ${pattern}`)\r\n\t\t\t}\r\n\t\t\tconst prevValue = pattern[i - 1].charCodeAt(0) + 1\r\n\t\t\tconst nextValue = pattern[i + 1].charCodeAt(0) - 1\r\n\t\t\tlet value = prevValue\r\n\t\t\twhile (value <= nextValue) {\r\n\t\t\t\tvalues.push(String.fromCharCode(value))\r\n\t\t\t\tvalue++\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalues.push(pattern[i])\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn values\r\n}\r\n\r\nconst ILLEGAL_CHARACTER_REGEXP = /[\\(\\)\\[\\]\\?\\:\\|]/\r\n\r\nconst OPERATOR = new RegExp(\r\n\t// any of:\r\n\t'(' +\r\n\t\t// or operator\r\n\t\t'\\\\|' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group start\r\n\t\t'\\\\(\\\\?\\\\:' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// or group end\r\n\t\t'\\\\)' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set start\r\n\t\t'\\\\[' +\r\n\t\t// or\r\n\t\t'|' +\r\n\t\t// one-of set end\r\n\t\t'\\\\]' +\r\n\t')'\r\n)\r\n\r\nfunction expandSingleElementArray(array) {\r\n\tif (array.length === 1) {\r\n\t\treturn array[0]\r\n\t}\r\n\treturn array\r\n}", "import PatternParser from './AsYouTypeFormatter.PatternParser.js'\r\n\r\nexport default class PatternMatcher {\r\n\tconstructor(pattern) {\r\n\t\tthis.matchTree = new PatternParser().parse(pattern)\r\n\t}\r\n\r\n\tmatch(string, { allowOverflow } = {}) {\r\n\t\tif (!string) {\r\n\t\t\tthrow new Error('String is required')\r\n\t\t}\r\n\t\tconst result = match(string.split(''), this.matchTree, true)\r\n\t\tif (result && result.match) {\r\n\t\t\tdelete result.matchedChars\r\n\t\t}\r\n\t\tif (result && result.overflow) {\r\n\t\t\tif (!allowOverflow) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result\r\n\t}\r\n}\r\n\r\n/**\r\n * Matches `characters` against a pattern compiled into a `tree`.\r\n * @param  {string[]} characters\r\n * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.\r\n * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.\r\n * @return {object} See the `*.d.ts` file for the description of the result object.\r\n */\r\nfunction match(characters, tree, last) {\r\n\t// If `tree` is a string, then `tree` is a single character.\r\n\t// That's because when a pattern is parsed, multi-character-string parts\r\n\t// of a pattern are compiled into arrays of single characters.\r\n\t// I still wrote this piece of code for a \"general\" hypothetical case\r\n\t// when `tree` could be a string of several characters, even though\r\n\t// such case is not possible with the current implementation.\r\n\tif (typeof tree === 'string') {\r\n\t\tconst characterString = characters.join('')\r\n\t\tif (tree.indexOf(characterString) === 0) {\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (characters.length === tree.length) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tmatch: true,\r\n\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// `tree` is always a single character.\r\n\t\t\t// If `tree.indexOf(characterString) === 0`\r\n\t\t\t// then `characters.length === tree.length`.\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn {\r\n\t\t\t\tpartialMatch: true,\r\n\t\t\t\t// matchedChars: characters\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (characterString.indexOf(tree) === 0) {\r\n\t\t\tif (last) {\r\n\t\t\t\t// The `else` path is not possible because `tree` is always a single character.\r\n\t\t\t\t// The `else` case for `characters.length > tree.length` would be\r\n\t\t\t\t// `characters.length <= tree.length` which means `characters.length <= 1`.\r\n\t\t\t\t// `characters` array can't be empty, so that means `characters === [tree]`,\r\n\t\t\t\t// which would also mean `tree.indexOf(characterString) === 0` and that'd mean\r\n\t\t\t\t// that the `if (tree.indexOf(characterString) === 0)` condition before this\r\n\t\t\t\t// `if` condition would be entered, and returned from there, not reaching this code.\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (characters.length > tree.length) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn {\r\n\t\t\t\tmatch: true,\r\n\t\t\t\tmatchedChars: characters.slice(0, tree.length)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\r\n\tif (Array.isArray(tree)) {\r\n\t\tlet restCharacters = characters.slice()\r\n\t\tlet i = 0\r\n\t\twhile (i < tree.length) {\r\n\t\t\tconst subtree = tree[i]\r\n\t\t\tconst result = match(restCharacters, subtree, last && (i === tree.length - 1))\r\n\t\t\tif (!result) {\r\n\t\t\t\treturn\r\n\t\t\t} else if (result.overflow) {\r\n\t\t\t\treturn result\r\n\t\t\t} else if (result.match) {\r\n\t\t\t\t// Continue with the next subtree with the rest of the characters.\r\n\t\t\t\trestCharacters = restCharacters.slice(result.matchedChars.length)\r\n\t\t\t\tif (restCharacters.length === 0) {\r\n\t\t\t\t\tif (i === tree.length - 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t\t// matchedChars: characters\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ti++\r\n\t\t}\r\n\t\t// If `last` then overflow has already been checked\r\n\t\t// by the last element of the `tree` array.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (last) {\r\n\t\t\treturn {\r\n\t\t\t\toverflow: true\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tmatch: true,\r\n\t\t\tmatchedChars: characters.slice(0, characters.length - restCharacters.length)\r\n\t\t}\r\n\t}\r\n\r\n\tswitch (tree.op) {\r\n\t\tcase '|':\r\n\t\t\tlet partialMatch\r\n\t\t\tfor (const branch of tree.args) {\r\n\t\t\t\tconst result = match(characters, branch, last)\r\n\t\t\t\tif (result) {\r\n\t\t\t\t\tif (result.overflow) {\r\n\t\t\t\t\t\treturn result\r\n\t\t\t\t\t} else if (result.match) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: result.matchedChars\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t/* istanbul ignore else */\r\n\t\t\t\t\t\tif (result.partialMatch) {\r\n\t\t\t\t\t\t\tpartialMatch = true\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error(`Unsupported match result:\\n${JSON.stringify(result, null, 2)}`)\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (partialMatch) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpartialMatch: true,\r\n\t\t\t\t\t// matchedChars: ...\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Not even a partial match.\r\n\t\t\treturn\r\n\r\n\t\tcase '[]':\r\n\t\t\tfor (const char of tree.args) {\r\n\t\t\t\tif (characters[0] === char) {\r\n\t\t\t\t\tif (characters.length === 1) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\t\tmatchedChars: characters\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (last) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\toverflow: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tmatch: true,\r\n\t\t\t\t\t\tmatchedChars: [char]\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// No character matches.\r\n\t\t\treturn\r\n\r\n\t\t/* istanbul ignore next */\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unsupported instruction tree: ${tree}`)\r\n\t}\r\n}", "import {\r\n\tDIGIT_PLACEHOLDER,\r\n\tcountOccurences,\r\n\trepeat,\r\n\tcutAndStripNonPairedParens,\r\n\tcloseNonPairedParens,\r\n\tstripNonPairedParens,\r\n\tpopulateTemplateWithDigits\r\n} from './AsYouTypeFormatter.util.js'\r\n\r\nimport formatCompleteNumber, {\r\n\tcanFormatCompleteNumber\r\n} from './AsYouTypeFormatter.complete.js'\r\n\r\nimport PatternMatcher from './AsYouTypeFormatter.PatternMatcher.js'\r\n\r\nimport parseDigits from './helpers/parseDigits.js'\r\nexport { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.util.js'\r\nimport { FIRST_GROUP_PATTERN } from './helpers/formatNationalNumberUsingFormat.js'\r\nimport { VALID_PUNCTUATION } from './constants.js'\r\nimport applyInternationalSeparatorStyle from './helpers/applyInternationalSeparatorStyle.js'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\r\n// us that we should separate the national prefix from the number when formatting.\r\nconst NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A regular expression that is used to determine if a `format` is\r\n// suitable to be used in the \"as you type formatter\".\r\n// A `format` is suitable when the resulting formatted number has\r\n// the same digits as the user has entered.\r\n//\r\n// In the simplest case, that would mean that the format\r\n// doesn't add any additional digits when formatting a number.\r\n// Google says that it also shouldn't add \"star\" (`*`) characters,\r\n// like it does in some Israeli formats.\r\n// Such basic format would only contain \"valid punctuation\"\r\n// and \"captured group\" identifiers ($1, $2, etc).\r\n//\r\n// An example of a format that adds additional digits:\r\n//\r\n// Country: `AR` (Argentina).\r\n// Format:\r\n// {\r\n//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n//    \"leading_digits_patterns\": [\"91\"],\r\n//    \"national_prefix_formatting_rule\": \"0$1\",\r\n//    \"format\": \"$2 15-$3-$4\",\r\n//    \"international_format\": \"$1 $2 $3-$4\"\r\n// }\r\n//\r\n// In the format above, the `format` adds `15` to the digits when formatting a number.\r\n// A sidenote: this format actually is suitable because `national_prefix_for_parsing`\r\n// has previously removed `15` from a national number, so re-adding `15` in `format`\r\n// doesn't actually result in any extra digits added to user's input.\r\n// But verifying that would be a complex procedure, so the code chooses a simpler path:\r\n// it simply filters out all `format`s that contain anything but \"captured group\" ids.\r\n//\r\n// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's\r\n// `libphonenumber` code.\r\n//\r\nconst NON_ALTERING_FORMAT_REG_EXP = new RegExp(\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t// Google developers say:\r\n\t// \"We require that the first matching group is present in the\r\n\t//  output pattern to ensure no data is lost while formatting.\"\r\n\t'\\\\$1' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)*' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nexport default class AsYouTypeFormatter {\r\n\tconstructor({\r\n\t\tstate,\r\n\t\tmetadata\r\n\t}) {\r\n\t\tthis.metadata = metadata\r\n\t\tthis.resetFormat()\r\n\t}\r\n\r\n\tresetFormat() {\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.nationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t}\r\n\r\n\treset(numberingPlan, state) {\r\n\t\tthis.resetFormat()\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.isNANP = numberingPlan.callingCode() === '1'\r\n\t\t\tthis.matchingFormats = numberingPlan.formats()\r\n\t\t\tif (state.nationalSignificantNumber) {\r\n\t\t\t\tthis.narrowDownMatchingFormats(state)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.isNANP = undefined\r\n\t\t\tthis.matchingFormats = []\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Formats an updated phone number.\r\n\t * @param  {string} nextDigits — Additional phone number digits.\r\n\t * @param  {object} state — `AsYouType` state.\r\n\t * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.\r\n\t */\r\n\tformat(nextDigits, state) {\r\n\t\t// See if the phone number digits can be formatted as a complete phone number.\r\n\t\t// If not, use the results from `formatNationalNumberWithNextDigits()`,\r\n\t\t// which formats based on the chosen formatting pattern.\r\n\t\t//\r\n\t\t// Attempting to format complete phone number first is how it's done\r\n\t\t// in Google's `libphonenumber`, so this library just follows it.\r\n\t\t// Google's `libphonenumber` code doesn't explain in detail why does it\r\n\t\t// attempt to format digits as a complete phone number\r\n\t\t// instead of just going with a previoulsy (or newly) chosen `format`:\r\n\t\t//\r\n\t\t// \"Checks to see if there is an exact pattern match for these digits.\r\n\t\t//  If so, we should use this instead of any other formatting template\r\n\t\t//  whose leadingDigitsPattern also matches the input.\"\r\n\t\t//\r\n\t\tif (canFormatCompleteNumber(state.nationalSignificantNumber, this.metadata)) {\r\n\t\t\tfor (const format of this.matchingFormats) {\r\n\t\t\t\tconst formattedCompleteNumber = formatCompleteNumber(\r\n\t\t\t\t\tstate,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmetadata: this.metadata,\r\n\t\t\t\t\t\tshouldTryNationalPrefixFormattingRule: (format) => this.shouldTryNationalPrefixFormattingRule(format, {\r\n\t\t\t\t\t\t\tinternational: state.international,\r\n\t\t\t\t\t\t\tnationalPrefix: state.nationalPrefix\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tgetSeparatorAfterNationalPrefix: (format) => this.getSeparatorAfterNationalPrefix(format)\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t\tif (formattedCompleteNumber) {\r\n\t\t\t\t\tthis.resetFormat()\r\n\t\t\t\t\tthis.chosenFormat = format\r\n\t\t\t\t\tthis.setNationalNumberTemplate(formattedCompleteNumber.replace(/\\d/g, DIGIT_PLACEHOLDER), state)\r\n\t\t\t\t\tthis.populatedNationalNumberTemplate = formattedCompleteNumber\r\n\t\t\t\t\t// With a new formatting template, the matched position\r\n\t\t\t\t\t// using the old template needs to be reset.\r\n\t\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(DIGIT_PLACEHOLDER)\r\n\t\t\t\t\treturn formattedCompleteNumber\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Format the digits as a partial (incomplete) phone number\r\n\t\t// using the previously chosen formatting pattern (or a newly chosen one).\r\n\t\treturn this.formatNationalNumberWithNextDigits(nextDigits, state)\r\n\t}\r\n\r\n\t// Formats the next phone number digits.\r\n\tformatNationalNumberWithNextDigits(nextDigits, state) {\r\n\t\tconst previouslyChosenFormat = this.chosenFormat\r\n\r\n\t\t// Choose a format from the list of matching ones.\r\n\t\tconst newlyChosenFormat = this.chooseFormat(state)\r\n\r\n\t\tif (newlyChosenFormat) {\r\n\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\r\n\t\t\t\t// If it can format the next (current) digits\r\n\t\t\t\t// using the previously chosen phone number format\r\n\t\t\t\t// then return the updated formatted number.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits)\r\n\t\t\t} else {\r\n\t\t\t\t// If a more appropriate phone number format\r\n\t\t\t\t// has been chosen for these \"leading digits\",\r\n\t\t\t\t// then re-format the national phone number part\r\n\t\t\t\t// using the newly selected format.\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(state.getNationalDigits())\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tnarrowDownMatchingFormats({\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalPrefix,\r\n\t\tinternational\r\n\t}) {\r\n\t\tconst leadingDigits = nationalSignificantNumber\r\n\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digit patterns already match for a single first digit.\r\n\t\tlet leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (leadingDigitsPatternIndex < 0) {\r\n\t\t\tleadingDigitsPatternIndex = 0\r\n\t\t}\r\n\r\n\t\tthis.matchingFormats = this.matchingFormats.filter(\r\n\t\t\tformat => this.formatSuits(format, international, nationalPrefix)\r\n\t\t\t\t&& this.formatMatches(format, leadingDigits, leadingDigitsPatternIndex)\r\n\t\t)\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tformatSuits(format, international, nationalPrefix) {\r\n\t\t// When a prefix before a national (significant) number is\r\n\t\t// simply a national prefix, then it's parsed as `this.nationalPrefix`.\r\n\t\t// In more complex cases, a prefix before national (significant) number\r\n\t\t// could include a national prefix as well as some \"capturing groups\",\r\n\t\t// and in that case there's no info whether a national prefix has been parsed.\r\n\t\t// If national prefix is not used when formatting a phone number\r\n\t\t// using this format, but a national prefix has been entered by the user,\r\n\t\t// and was extracted, then discard such phone number format.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184\r\n\t\tif (nationalPrefix &&\r\n\t\t\t!format.usesNationalPrefix() &&\r\n\t\t\t// !format.domesticCarrierCodeFormattingRule() &&\r\n\t\t\t!format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and there're no guarantees that a national prefix is present in user input\r\n\t\t// then discard this phone number format as not suitable.\r\n\t\t// In Google's \"AsYouType\" formatter code, the equivalent would be this part:\r\n\t\t// https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193\r\n\t\tif (!international &&\r\n\t\t\t!nationalPrefix &&\r\n\t\t\tformat.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tformatMatches(format, leadingDigits, leadingDigitsPatternIndex) {\r\n\t\tconst leadingDigitsPatternsCount = format.leadingDigitsPatterns().length\r\n\r\n\t\t// If this format is not restricted to a certain\r\n\t\t// leading digits pattern then it fits.\r\n\t\t// The test case could be found by searching for \"leadingDigitsPatternsCount === 0\".\r\n\t\tif (leadingDigitsPatternsCount === 0) {\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// Start narrowing down the list of possible formats based on the leading digits.\r\n\t\t// (only previously matched formats take part in the narrowing down process)\r\n\r\n\t\t// `leading_digits_patterns` start with 3 digits min\r\n\t\t// and then go up from there one digit at a time.\r\n\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1)\r\n\t\tconst leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]\r\n\r\n\t\t// Google imposes a requirement on the leading digits\r\n\t\t// to be minimum 3 digits long in order to be eligible\r\n\t\t// for checking those with a leading digits pattern.\r\n\t\t//\r\n\t\t// Since `leading_digits_patterns` start with 3 digits min,\r\n\t\t// Google's original `libphonenumber` library only starts\r\n\t\t// excluding any non-matching formats only when the\r\n\t\t// national number entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives.\r\n\t\t//\r\n\t\t// For example, when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Also, `leading_digits_patterns` doesn't always correspond to a single\r\n\t\t// digits count. For example, `60|8` pattern would already match `8`\r\n\t\t// but the `60` part would require having at least two leading digits,\r\n\t\t// so the whole pattern would require inputting two digits first in order to\r\n\t\t// decide on whether it matches the input, even when the input is \"80\".\r\n\t\t//\r\n\t\t// This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`\r\n\t\t// even when there's only 1 or 2 digits of the national (significant) number.\r\n\t\t// To do that, it uses a non-strict pattern matcher written specifically for that.\r\n\t\t//\r\n\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\r\n\t\t\t// Before leading digits < 3 matching was implemented:\r\n\t\t\t// return true\r\n\t\t\t//\r\n\t\t\t// After leading digits < 3 matching was implemented:\r\n\t\t\ttry {\r\n\t\t\t\treturn new PatternMatcher(leadingDigitsPattern).match(leadingDigits, { allowOverflow: true }) !== undefined\r\n\t\t\t} catch (error) /* istanbul ignore next */ {\r\n\t\t\t\t// There's a slight possibility that there could be some undiscovered bug\r\n\t\t\t\t// in the pattern matcher code. Since the \"leading digits < 3 matching\"\r\n\t\t\t\t// feature is not \"essential\" for operation, it can fall back to the old way\r\n\t\t\t\t// in case of any issues rather than halting the application's execution.\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are\r\n\t\t// available then use the usual regular expression matching.\r\n\t\t//\r\n\t\t// The whole pattern is wrapped in round brackets (`()`) because\r\n\t\t// the pattern can use \"or\" operator (`|`) at the top level of the pattern.\r\n\t\t//\r\n\t\treturn new RegExp(`^(${leadingDigitsPattern})`).test(leadingDigits)\r\n\t}\r\n\r\n\tgetFormatFormat(format, international) {\r\n\t\treturn international ? format.internationalFormat() : format.format()\r\n\t}\r\n\r\n\tchooseFormat(state) {\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\t//\r\n\t\t// For some weird reason, `istanbul` says \"else path not taken\"\r\n\t\t// for the `for of` line below. Supposedly that means that\r\n\t\t// the loop doesn't ever go over the last element in the list.\r\n\t\t// That's true because there always is `this.chosenFormat`\r\n\t\t// when `this.matchingFormats` is non-empty.\r\n\t\t// And, for some weird reason, it doesn't think that the case\r\n\t\t// with empty `this.matchingFormats` qualifies for a valid \"else\" path.\r\n\t\t// So simply muting this `istanbul` warning.\r\n\t\t// It doesn't skip the contents of the `for of` loop,\r\n\t\t// it just skips the `for of` line.\r\n\t\t//\r\n\t\t/* istanbul ignore next */\r\n\t\tfor (const format of this.matchingFormats.slice()) {\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still suitable, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\t// Sometimes, a formatting rule inserts additional digits in a phone number,\r\n\t\t\t// and \"as you type\" formatter can't do that: it should only use the digits\r\n\t\t\t// that the user has input.\r\n\t\t\t//\r\n\t\t\t// For example, in Argentina, there's a format for mobile phone numbers:\r\n\t\t\t//\r\n\t\t\t// {\r\n\t\t\t//    \"pattern\": \"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\r\n\t\t\t//    \"leading_digits_patterns\": [\"91\"],\r\n\t\t\t//    \"national_prefix_formatting_rule\": \"0$1\",\r\n\t\t\t//    \"format\": \"$2 15-$3-$4\",\r\n\t\t\t//    \"international_format\": \"$1 $2 $3-$4\"\r\n\t\t\t// }\r\n\t\t\t//\r\n\t\t\t// In that format, `international_format` is used instead of `format`\r\n\t\t\t// because `format` inserts `15` in the formatted number,\r\n\t\t\t// and `AsYouType` formatter should only use the digits\r\n\t\t\t// the user has actually input, without adding any extra digits.\r\n\t\t\t// In this case, it wouldn't make a difference, because the `15`\r\n\t\t\t// is first stripped when applying `national_prefix_for_parsing`\r\n\t\t\t// and then re-added when using `format`, so in reality it doesn't\r\n\t\t\t// add any new digits to the number, but to detect that, the code\r\n\t\t\t// would have to be more complex: it would have to try formatting\r\n\t\t\t// the digits using the format and then see if any digits have\r\n\t\t\t// actually been added or removed, and then, every time a new digit\r\n\t\t\t// is input, it should re-check whether the chosen format doesn't\r\n\t\t\t// alter the digits.\r\n\t\t\t//\r\n\t\t\t// Google's code doesn't go that far, and so does this library:\r\n\t\t\t// it simply requires that a `format` doesn't add any additonal\r\n\t\t\t// digits to user's input.\r\n\t\t\t//\r\n\t\t\t// Also, people in general should move from inputting phone numbers\r\n\t\t\t// in national format (possibly with national prefixes)\r\n\t\t\t// and use international phone number format instead:\r\n\t\t\t// it's a logical thing in the modern age of mobile phones,\r\n\t\t\t// globalization and the internet.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (!NON_ALTERING_FORMAT_REG_EXP.test(this.getFormatFormat(format, state.international))) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tif (!this.createTemplateForFormat(format, state)) {\r\n\t\t\t\t// Remove the format if it can't generate a template.\r\n\t\t\t\tthis.matchingFormats = this.matchingFormats.filter(_ => _ !== format)\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tthis.chosenFormat = format\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tif (!this.chosenFormat) {\r\n\t\t\t// No format matches the national (significant) phone number.\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t\treturn this.chosenFormat\r\n\t}\r\n\r\n\tcreateTemplateForFormat(format, state) {\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.getTemplateForFormat(format, state)\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (template) {\r\n\t\t\tthis.setNationalNumberTemplate(template, state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tgetSeparatorAfterNationalPrefix(format) {\r\n\t\t// `US` metadata doesn't have a `national_prefix_formatting_rule`,\r\n\t\t// so the `if` condition below doesn't apply to `US`,\r\n\t\t// but in reality there shoudl be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\t// So `US` national prefix separator is a \"special\" \"hardcoded\" case.\r\n\t\tif (this.isNANP) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// If a `format` has a `national_prefix_formatting_rule`\r\n\t\t// and that rule has a separator after a national prefix,\r\n\t\t// then it means that there should be a separator\r\n\t\t// between a national prefix and a national (significant) number.\r\n\t\tif (format &&\r\n\t\t\tformat.nationalPrefixFormattingRule() &&\r\n\t\t\tNATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\t// At this point, there seems to be no clear evidence that\r\n\t\t// there should be a separator between a national prefix\r\n\t\t// and a national (significant) number. So don't insert one.\r\n\t\treturn ''\r\n\t}\r\n\r\n\tgetInternationalPrefixBeforeCountryCallingCode({ IDDPrefix, missingPlus }, options) {\r\n\t\tif (IDDPrefix) {\r\n\t\t\treturn options && options.spacing === false ? IDDPrefix : IDDPrefix + ' '\r\n\t\t}\r\n\t\tif (missingPlus) {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\r\n\tgetTemplate(state) {\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// `this.template` holds the template for a \"complete\" phone number.\r\n\t\t// The currently entered phone number is most likely not \"complete\",\r\n\t\t// so trim all non-populated digits.\r\n\t\tlet index = -1\r\n\t\tlet i = 0\r\n\t\tconst internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, { spacing: false }) : ''\r\n\t\twhile (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\t\treturn cutAndStripNonPairedParens(this.template, index + 1)\r\n\t}\r\n\r\n\tsetNationalNumberTemplate(template, state) {\r\n\t\tthis.nationalNumberTemplate = template\r\n\t\tthis.populatedNationalNumberTemplate = template\r\n\t\t// With a new formatting template, the matched position\r\n\t\t// using the old template needs to be reset.\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (state.international) {\r\n\t\t\tthis.template =\r\n\t\t\t\tthis.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER) +\r\n\t\t\t\trepeat(DIGIT_PLACEHOLDER, state.callingCode.length) +\r\n\t\t\t\t' ' +\r\n\t\t\t\ttemplate\r\n\t\t} else {\r\n\t\t\tthis.template = template\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Generates formatting template for a national phone number,\r\n\t * optionally containing a national prefix, for a format.\r\n\t * @param  {Format} format\r\n\t * @param  {string} nationalPrefix\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplateForFormat(format, {\r\n\t\tnationalSignificantNumber,\r\n\t\tinternational,\r\n\t\tnationalPrefix,\r\n\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t}) {\r\n\t\tlet pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\r\n\t\t\tpattern = pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// Generate a dummy national number (consisting of `9`s)\r\n\t\t// that fits this format's `pattern`.\r\n\t\t//\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\t//\r\n\t\tlet digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (nationalSignificantNumber.length > digits.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strictPattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strictPattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalSignificantNumber : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// format : `$1 $2 $3`\r\n\t\t// digits : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then `this.nationalSignificantNumber`\r\n\t\t// is used instead of `digits`.\r\n\r\n\t\tconst strictPattern = new RegExp('^' + pattern + '$')\r\n\t\tconst nationalNumberDummyDigits = nationalSignificantNumber.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalSignificantNumber` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then use it\r\n\t\t// instead of `digits`.\r\n\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\r\n\t\t\tdigits = nationalNumberDummyDigits\r\n\t\t}\r\n\r\n\t\tlet numberFormat = this.getFormatFormat(format, international)\r\n\t\tlet nationalPrefixIncludedInTemplate\r\n\r\n\t\t// If a user did input a national prefix (and that's guaranteed),\r\n\t\t// and if a `format` does have a national prefix formatting rule,\r\n\t\t// then see if that national prefix formatting rule\r\n\t\t// prepends exactly the same national prefix the user has input.\r\n\t\t// If that's the case, then use the `format` with the national prefix formatting rule.\r\n\t\t// Otherwise, use  the `format` without the national prefix formatting rule,\r\n\t\t// and prepend a national prefix manually to it.\r\n\t\tif (this.shouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix })) {\r\n\t\t\tconst numberFormatWithNationalPrefix = numberFormat.replace(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t)\r\n\t\t\t// If `national_prefix_formatting_rule` of a `format` simply prepends\r\n\t\t\t// national prefix at the start of a national (significant) number,\r\n\t\t\t// then such formatting can be used with `AsYouType` formatter.\r\n\t\t\t// There seems to be no `else` case: everywhere in metadata,\r\n\t\t\t// national prefix formatting rule is national prefix + $1,\r\n\t\t\t// or `($1)`, in which case such format isn't even considered\r\n\t\t\t// when the user has input a national prefix.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (parseDigits(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + parseDigits('$1')) {\r\n\t\t\t\tnumberFormat = numberFormatWithNationalPrefix\r\n\t\t\t\tnationalPrefixIncludedInTemplate = true\r\n\t\t\t\t// Replace all digits of the national prefix in the formatting template\r\n\t\t\t\t// with `DIGIT_PLACEHOLDER`s.\r\n\t\t\t\tif (nationalPrefix) {\r\n\t\t\t\t\tlet i = nationalPrefix.length\r\n\t\t\t\t\twhile (i > 0) {\r\n\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER)\r\n\t\t\t\t\t\ti--\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format.\r\n\t\tlet template = digits\r\n\t\t\t// Format the dummy phone number according to the format.\r\n\t\t\t.replace(new RegExp(pattern), numberFormat)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\r\n\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t// as just a basic national prefix, then just prepend such prefix\r\n\t\t// before the national (significant) number, optionally spacing\r\n\t\t// the two with a whitespace.\r\n\t\tif (!nationalPrefixIncludedInTemplate) {\r\n\t\t\tif (complexPrefixBeforeNationalSignificantNumber) {\r\n\t\t\t\t// Prepend the prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) +\r\n\t\t\t\t\t' ' +\r\n\t\t\t\t\ttemplate\r\n\t\t\t} else if (nationalPrefix) {\r\n\t\t\t\t// Prepend national prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) +\r\n\t\t\t\t\tthis.getSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (international) {\r\n\t\t\ttemplate = applyInternationalSeparatorStyle(template)\r\n\t\t}\r\n\r\n\t\treturn template\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits) {\r\n\t\tconst result = populateTemplateWithDigits(\r\n\t\t\tthis.populatedNationalNumberTemplate,\r\n\t\t\tthis.populatedNationalNumberTemplatePosition,\r\n\t\t\tdigits\r\n\t\t)\r\n\r\n\t\tif (!result) {\r\n\t\t\t// Reset the format.\r\n\t\t\tthis.resetFormat()\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.populatedNationalNumberTemplate = result[0]\r\n\t\tthis.populatedNationalNumberTemplatePosition = result[1]\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\r\n\t}\r\n\r\n\tshouldTryNationalPrefixFormattingRule(format, { international, nationalPrefix }) {\r\n\t\tif (format.nationalPrefixFormattingRule()) {\r\n\t\t\t// In some countries, `national_prefix_formatting_rule` is `($1)`,\r\n\t\t\t// so it applies even if the user hasn't input a national prefix.\r\n\t\t\t// `format.usesNationalPrefix()` detects such cases.\r\n\t\t\tconst usesNationalPrefix = format.usesNationalPrefix()\r\n\t\t\tif ((usesNationalPrefix && nationalPrefix) ||\r\n\t\t\t\t(!usesNationalPrefix && !international)) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}", "import extractCountryCallingCode from './helpers/extractCountryCallingCode.js'\r\nimport extractCountryCallingCodeFromInternationalNumberWithoutPlusSign from './helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js'\r\nimport extractNationalNumberFromPossiblyIncompleteNumber from './helpers/extractNationalNumberFromPossiblyIncompleteNumber.js'\r\nimport stripIddPrefix from './helpers/stripIddPrefix.js'\r\nimport parseDigits from './helpers/parseDigits.js'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants.js'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART =\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i')\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART =\r\n\t'(?:' +\r\n\t\t'[' + PLUS_CHARS + ']' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']*' +\r\n\t\t'|' +\r\n\t\t'[' +\r\n\t\t\tVALID_PUNCTUATION +\r\n\t\t\tVALID_DIGITS +\r\n\t\t']+' +\r\n\t')'\r\n\r\nconst AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp(\r\n\t'[^' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']+' +\r\n\t'.*' +\r\n\t'$'\r\n)\r\n\r\n// Tests whether `national_prefix_for_parsing` could match\r\n// different national prefixes.\r\n// Matches anything that's not a digit or a square bracket.\r\nconst COMPLEX_NATIONAL_PREFIX = /[^\\d\\[\\]]/\r\n\r\nexport default class AsYouTypeParser {\r\n\tconstructor({\r\n\t\tdefaultCountry,\r\n\t\tdefaultCallingCode,\r\n\t\tmetadata,\r\n\t\tonNationalSignificantNumberChange\r\n\t}) {\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.metadata = metadata\r\n\t\tthis.onNationalSignificantNumberChange = onNationalSignificantNumberChange\r\n\t}\r\n\r\n\tinput(text, state) {\r\n\t\tconst [formattedDigits, hasPlus] = extractFormattedDigitsAndPlus(text)\r\n\t\tconst digits = parseDigits(formattedDigits)\r\n\t\t// Checks for a special case: just a leading `+` has been entered.\r\n\t\tlet justLeadingPlus\r\n\t\tif (hasPlus) {\r\n\t\t\tif (!state.digits) {\r\n\t\t\t\tstate.startInternationalNumber()\r\n\t\t\t\tif (!digits) {\r\n\t\t\t\t\tjustLeadingPlus = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (digits) {\r\n\t\t\tthis.inputDigits(digits, state)\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number digits.\r\n\t * @param  {string} digits\r\n\t * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n\t */\r\n\tinputDigits(nextDigits, state) {\r\n\t\tconst { digits } = state\r\n\t\tconst hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3\r\n\r\n\t\t// Append phone number digits.\r\n\t\tstate.appendDigits(nextDigits)\r\n\r\n\t\t// Attempt to extract IDD prefix:\r\n\t\t// Some users input their phone number in international format,\r\n\t\t// but in an \"out-of-country\" dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers as soon as there're at least 3 digits.\r\n\t\t// Google's library attempts to extract IDD prefix at 3 digits,\r\n\t\t// so this library just copies that behavior.\r\n\t\t// I guess that's because the most commot IDD prefixes are\r\n\t\t// `00` (Europe) and `011` (US).\r\n\t\t// There exist really long IDD prefixes too:\r\n\t\t// for example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t// An IDD prefix is extracted here, and then every time when\r\n\t\t// there's a new digit and the number couldn't be formatted.\r\n\t\tif (hasReceivedThreeLeadingDigits) {\r\n\t\t\tthis.extractIddPrefix(state)\r\n\t\t}\r\n\r\n\t\tif (this.isWaitingForCountryCallingCode(state)) {\r\n\t\t\tif (!this.extractCountryCallingCode(state)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tstate.appendNationalSignificantNumberDigits(nextDigits)\r\n\t\t}\r\n\r\n\t\t// If a phone number is being input in international format,\r\n\t\t// then it's not valid for it to have a national prefix.\r\n\t\t// Still, some people incorrectly input such numbers with a national prefix.\r\n\t\t// In such cases, only attempt to strip a national prefix if the number becomes too long.\r\n\t\t// (but that is done later, not here)\r\n\t\tif (!state.international) {\r\n\t\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisWaitingForCountryCallingCode({ international, callingCode }) {\r\n\t\treturn international && !callingCode\r\n\t}\r\n\r\n\t// Extracts a country calling code from a number\r\n\t// being entered in internatonal format.\r\n\textractCountryCallingCode(state) {\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\t\t'+' + state.getDigitsWithoutInternationalPrefix(),\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (countryCallingCode) {\r\n\t\t\tstate.setCallingCode(countryCallingCode)\r\n\t\t\tstate.update({\r\n\t\t\t\tnationalSignificantNumber: number\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\treset(numberingPlan) {\r\n\t\tif (numberingPlan) {\r\n\t\t\tthis.hasSelectedNumberingPlan = true\r\n\t\t\tconst nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing()\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing)\r\n\t\t} else {\r\n\t\t\tthis.hasSelectedNumberingPlan = undefined\r\n\t\t\tthis.couldPossiblyExtractAnotherNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts a national (significant) number from user input.\r\n\t * Google's library is different in that it only applies `national_prefix_for_parsing`\r\n\t * and doesn't apply `national_prefix_transform_rule` after that.\r\n\t * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539\r\n\t * @return {boolean} [extracted]\r\n\t */\r\n\textractNationalSignificantNumber(nationalDigits, setState) {\r\n\t\tif (!this.hasSelectedNumberingPlan) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\tif (nationalNumber === nationalDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\t/**\r\n\t * In Google's code this function is called \"attempt to extract longer NDD\".\r\n\t * \"Some national prefixes are a substring of others\", they say.\r\n\t * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.\r\n\t */\r\n\textractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {\r\n\t\tif (!this.hasExtractedNationalSignificantNumber) {\r\n\t\t\treturn this.extractNationalSignificantNumber(nationalDigits, setState)\r\n\t\t}\r\n\t\tif (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tconst {\r\n\t\t\tnationalPrefix,\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = extractNationalNumberFromPossiblyIncompleteNumber(\r\n\t\t\tnationalDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t\t// If a national prefix has been extracted previously,\r\n\t\t// then it's always extracted as additional digits are added.\r\n\t\t// That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`\r\n\t\t// doesn't do anything different from what it currently does.\r\n\t\t// So, just in case, here's this check, though it doesn't occur.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (nationalNumber === prevNationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.onExtractedNationalNumber(\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tnationalDigits,\r\n\t\t\tsetState\r\n\t\t)\r\n\t\treturn true\r\n\t}\r\n\r\n\tonExtractedNationalNumber(\r\n\t\tnationalPrefix,\r\n\t\tcarrierCode,\r\n\t\tnationalSignificantNumber,\r\n\t\tnationalDigits,\r\n\t\tsetState\r\n\t) {\r\n\t\tlet complexPrefixBeforeNationalSignificantNumber\r\n\t\tlet nationalSignificantNumberMatchesInput\r\n\t\t// This check also works with empty `this.nationalSignificantNumber`.\r\n\t\tconst nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber)\r\n\t\t// If the extracted national (significant) number is the\r\n\t\t// last substring of the `digits`, then it means that it hasn't been altered:\r\n\t\t// no digits have been removed from the national (significant) number\r\n\t\t// while applying `national_prefix_transform_rule`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule\r\n\t\tif (nationalSignificantNumberIndex >= 0 &&\r\n\t\t\tnationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {\r\n\t\t\tnationalSignificantNumberMatchesInput = true\r\n\t\t\t// If a prefix of a national (significant) number is not as simple\r\n\t\t\t// as just a basic national prefix, then such prefix is stored in\r\n\t\t\t// `this.complexPrefixBeforeNationalSignificantNumber` property and will be\r\n\t\t\t// prepended \"as is\" to the national (significant) number to produce\r\n\t\t\t// a formatted result.\r\n\t\t\tconst prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex)\r\n\t\t\t// `prefixBeforeNationalNumber` is always non-empty,\r\n\t\t\t// because `onExtractedNationalNumber()` isn't called\r\n\t\t\t// when a national (significant) number hasn't been actually \"extracted\":\r\n\t\t\t// when a national (significant) number is equal to the national part of `digits`,\r\n\t\t\t// then `onExtractedNationalNumber()` doesn't get called.\r\n\t\t\tif (prefixBeforeNationalNumber !== nationalPrefix) {\r\n\t\t\t\tcomplexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber\r\n\t\t\t}\r\n\t\t}\r\n\t\tsetState({\r\n\t\t\tnationalPrefix,\r\n\t\t\tcarrierCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tnationalSignificantNumberMatchesInput,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber\r\n\t\t})\r\n\t\t// `onExtractedNationalNumber()` is only called when\r\n\t\t// the national (significant) number actually did change.\r\n\t\tthis.hasExtractedNationalSignificantNumber = true\r\n\t\tthis.onNationalSignificantNumberChange()\r\n\t}\r\n\r\n\treExtractNationalSignificantNumber(state) {\r\n\t\t// Attempt to extract a national prefix.\r\n\t\t//\r\n\t\t// Some people incorrectly input national prefix\r\n\t\t// in an international phone number.\r\n\t\t// For example, some people write British phone numbers as `+44(0)...`.\r\n\t\t//\r\n\t\t// Also, in some rare cases, it is valid for a national prefix\r\n\t\t// to be a part of an international phone number.\r\n\t\t// For example, mobile phone numbers in Mexico are supposed to be\r\n\t\t// dialled internationally using a `1` national prefix,\r\n\t\t// so the national prefix will be part of an international number.\r\n\t\t//\r\n\t\t// Quote from:\r\n\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\r\n\t\t//\r\n\t\t// \"Dialing a Mexican cell phone from abroad\r\n\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\r\n\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\r\n\t\t// (which is “52”) and before the area code.\r\n\t\t// You also ignore the 045, and simply dial the area code and the\r\n\t\t// cell phone’s number.\r\n\t\t//\r\n\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\r\n\t\t// asking you to redial using it.\r\n\t\t//\r\n\t\t// For example, if you are calling from the USA to a cell phone\r\n\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\r\n\t\t// (Note that this is different to calling a land line in Mexico City\r\n\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\r\n\t\t//\r\n\t\t// Google's demo output:\r\n\t\t// https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX\r\n\t\t//\r\n\t\tif (this.extractAnotherNationalSignificantNumber(\r\n\t\t\tstate.getNationalDigits(),\r\n\t\t\tstate.nationalSignificantNumber,\r\n\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// If no format matches the phone number, then it could be\r\n\t\t// \"a really long IDD\" (quote from a comment in Google's library).\r\n\t\t// An IDD prefix is first extracted when the user has entered at least 3 digits,\r\n\t\t// and then here — every time when there's a new digit and the number\r\n\t\t// couldn't be formatted.\r\n\t\t// For example, in Australia the default IDD prefix is `0011`,\r\n\t\t// and it could even be as long as `14880011`.\r\n\t\t//\r\n\t\t// Could also check `!hasReceivedThreeLeadingDigits` here\r\n\t\t// to filter out the case when this check duplicates the one\r\n\t\t// already performed when there're 3 leading digits,\r\n\t\t// but it's not a big deal, and in most cases there\r\n\t\t// will be a suitable `format` when there're 3 leading digits.\r\n\t\t//\r\n\t\tif (this.extractIddPrefix(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t\t// Google's AsYouType formatter supports sort of an \"autocorrection\" feature\r\n\t\t// when it \"autocorrects\" numbers that have been input for a country\r\n\t\t// with that country's calling code.\r\n\t\t// Such \"autocorrection\" feature looks weird, but different people have been requesting it:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/376\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/375\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/316\r\n\t\tif (this.fixMissingPlus(state)) {\r\n\t\t\tthis.extractCallingCodeAndNationalSignificantNumber(state)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\textractIddPrefix(state) {\r\n\t\t// An IDD prefix can't be present in a number written with a `+`.\r\n\t\t// Also, don't re-extract an IDD prefix if has already been extracted.\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tIDDPrefix,\r\n\t\t\tdigits,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = state\r\n\t\tif (international || IDDPrefix) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Some users input their phone number in \"out-of-country\"\r\n\t\t// dialing format instead of using the leading `+`.\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/185\r\n\t\t// Detect such numbers.\r\n\t\tconst numberWithoutIDD = stripIddPrefix(\r\n\t\t\tdigits,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.defaultCallingCode,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {\r\n\t\t\t// If an IDD prefix was stripped then convert the IDD-prefixed number\r\n\t\t\t// to international number for subsequent parsing.\r\n\t\t\tstate.update({\r\n\t\t\t\tIDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)\r\n\t\t\t})\r\n\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\tcountry: undefined,\r\n\t\t\t\tcallingCode: undefined\r\n\t\t\t})\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\tfixMissingPlus(state) {\r\n\t\tif (!state.international) {\r\n\t\t\tconst {\r\n\t\t\t\tcountryCallingCode: newCallingCode,\r\n\t\t\t\tnumber\r\n\t\t\t} = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(\r\n\t\t\t\tstate.digits,\r\n\t\t\t\tthis.defaultCountry,\r\n\t\t\t\tthis.defaultCallingCode,\r\n\t\t\t\tthis.metadata.metadata\r\n\t\t\t)\r\n\t\t\tif (newCallingCode) {\r\n\t\t\t\tstate.update({\r\n\t\t\t\t\tmissingPlus: true\r\n\t\t\t\t})\r\n\t\t\t\tthis.startInternationalNumber(state, {\r\n\t\t\t\t\tcountry: state.country,\r\n\t\t\t\t\tcallingCode: newCallingCode\r\n\t\t\t\t})\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstartInternationalNumber(state, { country, callingCode }) {\r\n\t\tstate.startInternationalNumber(country, callingCode)\r\n\t\t// If a national (significant) number has been extracted before, reset it.\r\n\t\tif (state.nationalSignificantNumber) {\r\n\t\t\tstate.resetNationalSignificantNumber()\r\n\t\t\tthis.onNationalSignificantNumberChange()\r\n\t\t\tthis.hasExtractedNationalSignificantNumber = undefined\r\n\t\t}\r\n\t}\r\n\r\n\textractCallingCodeAndNationalSignificantNumber(state) {\r\n\t\tif (this.extractCountryCallingCode(state)) {\r\n\t\t\t// `this.extractCallingCode()` is currently called when the number\r\n\t\t\t// couldn't be formatted during the standard procedure.\r\n\t\t\t// Normally, the national prefix would be re-extracted\r\n\t\t\t// for an international number if such number couldn't be formatted,\r\n\t\t\t// but since it's already not able to be formatted,\r\n\t\t\t// there won't be yet another retry, so also extract national prefix here.\r\n\t\t\tthis.extractNationalSignificantNumber(\r\n\t\t\t\tstate.getNationalDigits(),\r\n\t\t\t\t(stateUpdate) => state.update(stateUpdate)\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number from text (if there's any).\r\n * @param  {string} text\r\n * @return {string} [formattedPhoneNumber]\r\n */\r\nfunction extractFormattedPhoneNumber(text) {\r\n\t// Attempt to extract a possible number from the string passed in.\r\n\tconst startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\t// Trim everything to the left of the phone number.\r\n\ttext = text.slice(startsAt)\r\n\t// Trim the `+`.\r\n\tlet hasPlus\r\n\tif (text[0] === '+') {\r\n\t\thasPlus = true\r\n\t\ttext = text.slice('+'.length)\r\n\t}\r\n\t// Trim everything to the right of the phone number.\r\n\ttext = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, '')\r\n\t// Re-add the previously trimmed `+`.\r\n\tif (hasPlus) {\r\n\t\ttext = '+' + text\r\n\t}\r\n\treturn text\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nfunction _extractFormattedDigitsAndPlus(text) {\r\n\t// Extract a formatted phone number part from text.\r\n\tconst extractedNumber = extractFormattedPhoneNumber(text) || ''\r\n\t// Trim a `+`.\r\n\tif (extractedNumber[0] === '+') {\r\n\t\treturn [extractedNumber.slice('+'.length), true]\r\n\t}\r\n\treturn [extractedNumber]\r\n}\r\n\r\n/**\r\n * Extracts formatted phone number digits (and a `+`) from text (if there're any).\r\n * @param  {string} text\r\n * @return {any[]}\r\n */\r\nexport function extractFormattedDigitsAndPlus(text) {\r\n\tlet [formattedDigits, hasPlus] = _extractFormattedDigitsAndPlus(text)\r\n\t// If the extracted phone number part\r\n\t// can possibly be a part of some valid phone number\r\n\t// then parse phone number characters from a formatted phone number.\r\n\tif (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {\r\n\t\tformattedDigits = ''\r\n\t}\r\n\treturn [formattedDigits, hasPlus]\r\n}", "import Metadata from './metadata.js'\r\nimport PhoneNumber from './PhoneNumber.js'\r\nimport AsYouTypeState from './AsYouTypeState.js'\r\nimport AsYouTypeFormatter, { DIGIT_PLACEHOLDER } from './AsYouTypeFormatter.js'\r\nimport AsYouTypeParser, { extractFormattedDigitsAndPlus } from './AsYouTypeParser.js'\r\nimport getCountryByCallingCode from './helpers/getCountryByCallingCode.js'\r\nimport getCountryByNationalNumber from './helpers/getCountryByNationalNumber.js'\r\nimport isObject from './helpers/isObject.js'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\tconst [defaultCountry, defaultCallingCode] = this.getCountryAndCallingCode(optionsOrDefaultCountry)\r\n\t\t// `this.defaultCountry` and `this.defaultCallingCode` aren't required to be in sync.\r\n\t\t// For example, `this.defaultCountry` could be `\"AR\"` and `this.defaultCallingCode` could be `undefined`.\r\n\t\t// So `this.defaultCountry` and `this.defaultCallingCode` are totally independent.\r\n\t\tthis.defaultCountry = defaultCountry\r\n\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tgetCountryAndCallingCode(optionsOrDefaultCountry) {\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (isObject(optionsOrDefaultCountry)) {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tdefaultCountry = undefined\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tdefaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn [defaultCountry, defaultCallingCode]\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tjustLeadingPlus\r\n\t\t} = this.parser.input(text, this.state)\r\n\t\tif (justLeadingPlus) {\r\n\t\t\tthis.formattedOutput = '+'\r\n\t\t} else if (digits) {\r\n\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tif (this.state.nationalSignificantNumber) {\r\n\t\t\t\tthis.formatter.narrowDownMatchingFormats(this.state)\r\n\t\t\t}\r\n\t\t\tlet formattedNationalNumber\r\n\t\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\t\tformattedNationalNumber = this.formatter.format(digits, this.state)\r\n\t\t\t}\r\n\t\t\tif (formattedNationalNumber === undefined) {\r\n\t\t\t\t// See if another national (significant) number could be re-extracted.\r\n\t\t\t\tif (this.parser.reExtractNationalSignificantNumber(this.state)) {\r\n\t\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\t\t// If it could, then re-try formatting the new national (significant) number.\r\n\t\t\t\t\tconst nationalDigits = this.state.getNationalDigits()\r\n\t\t\t\t\tif (nationalDigits) {\r\n\t\t\t\t\t\tformattedNationalNumber = this.formatter.format(nationalDigits, this.state)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.formattedOutput = formattedNationalNumber\r\n\t\t\t\t? this.getFullNumber(formattedNationalNumber)\r\n\t\t\t\t: this.getNonFormattedNumber()\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.state = new AsYouTypeState({\r\n\t\t\tonCountryChange: (country) => {\r\n\t\t\t\t// Before version `1.6.0`, the official `AsYouType` formatter API\r\n\t\t\t\t// included the `.country` property of an `AsYouType` instance.\r\n\t\t\t\t// Since that property (along with the others) have been moved to\r\n\t\t\t\t// `this.state`, `this.country` property is emulated for compatibility\r\n\t\t\t\t// with the old versions.\r\n\t\t\t\tthis.country = country\r\n\t\t\t},\r\n\t\t\tonCallingCodeChange: (callingCode, country) => {\r\n\t\t\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t\tthis.parser.reset(this.metadata.numberingPlan)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.formatter = new AsYouTypeFormatter({\r\n\t\t\tstate: this.state,\r\n\t\t\tmetadata: this.metadata\r\n\t\t})\r\n\t\tthis.parser = new AsYouTypeParser({\r\n\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\tdefaultCallingCode: this.defaultCallingCode,\r\n\t\t\tmetadata: this.metadata,\r\n\t\t\tstate: this.state,\r\n\t\t\tonNationalSignificantNumberChange: () => {\r\n\t\t\t\tthis.determineTheCountryIfNeeded()\r\n\t\t\t\tthis.formatter.reset(this.metadata.numberingPlan, this.state)\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.state.reset({\r\n\t\t\tcountry: this.defaultCountry,\r\n\t\t\tcallingCode: this.defaultCallingCode\r\n\t\t})\r\n\t\tthis.formattedOutput = ''\r\n\t\treturn this\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is being input in international format.\r\n\t * In other words, returns `true` if and only if the parsed phone number starts with a `\"+\"`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisInternational() {\r\n\t\treturn this.state.international\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the \"calling code\" part of the phone number when it's being input\r\n\t * in an international format.\r\n\t * If no valid calling code has been entered so far, returns `undefined`.\r\n\t * @return {string} [callingCode]\r\n\t */\r\n\tgetCallingCode() {\r\n\t\t // If the number is being input in national format and some \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then `this.state.callingCode`\r\n\t\t // is equal to that \"default calling code\".\r\n\t\t //\r\n\t\t // If the number is being input in national format and no \"default calling code\"\r\n\t\t // has been passed to `AsYouType` constructor, then returns `undefined`,\r\n\t\t // even if a \"default country\" has been passed to `AsYouType` constructor.\r\n\t\t //\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn this.state.callingCode\r\n\t\t}\r\n\t}\r\n\r\n\t// A legacy alias.\r\n\tgetCountryCallingCode() {\r\n\t\treturn this.getCallingCode()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * Returns `undefined` if no phone number has been input yet.\r\n\t * @return {string} [country]\r\n\t */\r\n\tgetCountry() {\r\n\t\tconst { digits } = this.state\r\n\t\t// Return `undefined` if no digits have been input yet.\r\n\t\tif (digits) {\r\n\t\t\treturn this._getCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a two-letter country code of the phone number.\r\n\t * Returns `undefined` for \"non-geographic\" phone numbering plans.\r\n\t * @return {string} [country]\r\n\t */\r\n\t_getCountry() {\r\n\t\tconst { country } = this.state\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t// `AsYouType.getCountry()` returns `undefined`\r\n\t\t\t// for \"non-geographic\" phone numbering plans.\r\n\t\t\tif (country === '001') {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn country\r\n\t}\r\n\r\n\tdetermineTheCountryIfNeeded() {\r\n\t\t// Suppose a user enters a phone number in international format,\r\n\t\t// and there're several countries corresponding to that country calling code,\r\n\t\t// and a country has been derived from the number, and then\r\n\t\t// a user enters one more digit and the number is no longer\r\n\t\t// valid for the derived country, so the country should be re-derived\r\n\t\t// on every new digit in those cases.\r\n\t\t//\r\n\t\t// If the phone number is being input in national format,\r\n\t\t// then it could be a case when `defaultCountry` wasn't specified\r\n\t\t// when creating `AsYouType` instance, and just `defaultCallingCode` was specified,\r\n\t\t// and that \"calling code\" could correspond to a \"non-geographic entity\",\r\n\t\t// or there could be several countries corresponding to that country calling code.\r\n\t\t// In those cases, `this.country` is `undefined` and should be derived\r\n\t\t// from the number. Again, if country calling code is ambiguous, then\r\n\t\t// `this.country` should be re-derived with each new digit.\r\n\t\t//\r\n\t\tif (!this.state.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\tthis.determineTheCountry()\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tconst prefix = (text) => this.formatter.getInternationalPrefixBeforeCountryCallingCode(this.state, {\r\n\t\t\t\tspacing: text ? true : false\r\n\t\t\t}) + text\r\n\t\t\tconst { callingCode } = this.state\r\n\t\t\tif (!callingCode) {\r\n\t\t\t\treturn prefix(`${this.state.getDigitsWithoutInternationalPrefix()}`)\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn prefix(callingCode)\r\n\t\t\t}\r\n\t\t\treturn prefix(`${callingCode} ${formattedNationalNumber}`)\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumberWithPrefix() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcomplexPrefixBeforeNationalSignificantNumber,\r\n\t\t\tnationalPrefix\r\n\t\t} = this.state\r\n\t\tlet number = nationalSignificantNumber\r\n\t\tconst prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix\r\n\t\tif (prefix) {\r\n\t\t\tnumber = prefix + number\r\n\t\t}\r\n\t\treturn number\r\n\t}\r\n\r\n\tgetNonFormattedNumber() {\r\n\t\tconst { nationalSignificantNumberMatchesInput } = this.state\r\n\t\treturn this.getFullNumber(\r\n\t\t\tnationalSignificantNumberMatchesInput\r\n\t\t\t\t? this.getNonFormattedNationalNumberWithPrefix()\r\n\t\t\t\t: this.state.getNationalDigits()\r\n\t\t)\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\tconst number = this.getNonFormattedNumber()\r\n\t\tif (number) {\r\n\t\t\treturn number.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\t}\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst { callingCode } = this.state\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.state.setCountry(getCountryByCallingCode(\r\n\t\t\tthis.isInternational() ? this.state.callingCode : this.defaultCallingCode,\r\n\t\t\t{\r\n\t\t\t\tnationalNumber: this.state.nationalSignificantNumber,\r\n\t\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\t\tmetadata: this.metadata\r\n\t\t\t}\r\n\t\t))\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a E.164 phone number value for the user's input.\r\n\t *\r\n\t * For example, for country `\"US\"` and input `\"(222) 333-4444\"`\r\n\t * it will return `\"+12223334444\"`.\r\n\t *\r\n\t * For international phone number input, it will also auto-correct\r\n\t * some minor errors such as using a national prefix when writing\r\n\t * an international phone number. For example, if the user inputs\r\n\t * `\"+44 0 7400 000000\"` then it will return an auto-corrected\r\n\t * `\"+447400000000\"` phone number value.\r\n\t *\r\n\t * Will return `undefined` if no digits have been input,\r\n\t * or when inputting a phone number in national format and no\r\n\t * default country or default \"country calling code\" have been set.\r\n\t *\r\n\t * @return {string} [value]\r\n\t */\r\n\tgetNumberValue() {\r\n\t\tconst {\r\n\t\t\tdigits,\r\n\t\t\tcallingCode,\r\n\t\t\tcountry,\r\n\t\t\tnationalSignificantNumber\r\n\t\t} = this.state\r\n\r\n\t \t// Will return `undefined` if no digits have been input.\r\n\t\tif (!digits) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (callingCode) {\r\n\t\t\t\treturn '+' + callingCode + nationalSignificantNumber\r\n\t\t\t} else {\r\n\t\t\t\treturn '+' + digits\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (country || callingCode) {\r\n\t\t\t\tconst callingCode_ = country ? this.metadata.countryCallingCode() : callingCode\r\n\t\t\t\treturn '+' + callingCode_ + nationalSignificantNumber\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tconst {\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tcarrierCode,\r\n\t\t\tcallingCode\r\n\t\t} = this.state\r\n\r\n\t\t// `this._getCountry()` is basically same as `this.state.country`\r\n\t\t// with the only change that it return `undefined` in case of a\r\n\t\t// \"non-geographic\" numbering plan instead of `\"001\"` \"internal use\" value.\r\n\t\tlet country = this._getCountry()\r\n\r\n\t\tif (!nationalSignificantNumber) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `state.country` and `state.callingCode` aren't required to be in sync.\r\n\t\t// For example, `country` could be `\"AR\"` and `callingCode` could be `undefined`.\r\n\t\t// So `country` and `callingCode` are totally independent.\r\n\r\n\t\tif (!country && !callingCode) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// By default, if `defaultCountry` parameter was passed when\r\n\t\t// creating `AsYouType` instance, `state.country` is gonna be\r\n\t\t// that `defaultCountry`, which doesn't entirely conform with\r\n\t\t// `parsePhoneNumber()`'s behavior where it attempts to determine\r\n\t\t// the country more precisely in cases when multiple countries\r\n\t\t// could correspond to the same `countryCallingCode`.\r\n\t\t// https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/103#note_1417192969\r\n\t\t//\r\n\t\t// Because `AsYouType.getNumber()` method is supposed to be a 1:1\r\n\t\t// equivalent for `parsePhoneNumber(AsYouType.getNumberValue())`,\r\n\t\t// then it should also behave accordingly in cases of `country` ambiguity.\r\n\t\t// That's how users of this library would expect it to behave anyway.\r\n\t\t//\r\n\t\tif (country) {\r\n\t\t\tif (country === this.defaultCountry) {\r\n\t\t\t\t// `state.country` and `state.callingCode` aren't required to be in sync.\r\n\t\t\t\t// For example, `state.country` could be `\"AR\"` and `state.callingCode` could be `undefined`.\r\n\t\t\t\t// So `state.country` and `state.callingCode` are totally independent.\r\n\t\t\t\tconst metadata = new Metadata(this.metadata.metadata)\r\n\t\t\t\tmetadata.selectNumberingPlan(country)\r\n\t\t\t\tconst callingCode = metadata.numberingPlan.callingCode()\r\n\t\t\t\tconst ambiguousCountries = this.metadata.getCountryCodesForCallingCode(callingCode)\r\n\t\t\t\tif (ambiguousCountries.length > 1) {\r\n\t\t\t\t\tconst exactCountry = getCountryByNationalNumber(nationalSignificantNumber, {\r\n\t\t\t\t\t\tcountries: ambiguousCountries,\r\n\t\t\t\t\t\tdefaultCountry: this.defaultCountry,\r\n\t\t\t\t\t\tmetadata: this.metadata.metadata\r\n\t\t\t\t\t})\r\n\t\t\t\t\tif (exactCountry) {\r\n\t\t\t\t\t\tcountry = exactCountry\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountry || callingCode,\r\n\t\t\tnationalSignificantNumber,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"possible\".\r\n\t * Is just a shortcut for `PhoneNumber.isPossible()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisPossible() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isPossible()\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the phone number is \"valid\".\r\n\t * Is just a shortcut for `PhoneNumber.isValid()`.\r\n\t * @return {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tconst phoneNumber = this.getNumber()\r\n\t\tif (!phoneNumber) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\treturn phoneNumber.isValid()\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.state.nationalSignificantNumber\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the phone number characters entered by the user.\r\n\t * @return {string}\r\n\t */\r\n\tgetChars() {\r\n\t\treturn (this.state.international ? '+' : '') + this.state.digits\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the template for the formatted phone number.\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplate() {\r\n\t\treturn this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || ''\r\n\t}\r\n}", "import Metadata from './metadata.js'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}", "import PhoneNumber from './PhoneNumber.js'\r\n\r\nexport default function getExampleNumber(country, examples, metadata) {\r\n\tif (examples[country]) {\r\n\t\treturn new PhoneNumber(country, examples[country], metadata)\r\n\t}\r\n}", "import AsYouType from './AsYouType.js'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string|object} [optionsOrDefaultCountry] - A two-letter (\"ISO 3166-1 alpha-2\") country code, or an object of shape `{ defaultCountry?: string, defaultCallingCode?: string }`.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, optionsOrDefaultCountry, metadata) {\r\n\tif (!metadata) {\r\n\t\tmetadata = optionsOrDefaultCountry\r\n\t\toptionsOrDefaultCountry = undefined\r\n\t}\r\n\treturn new AsYouType(optionsOrDefaultCountry, metadata).input(value)\r\n}", "'use strict'\r\n\r\nvar parsePhoneNumberFromString = require('../build/parsePhoneNumber.js').default\r\n\r\n// ES5 `require()` \"default\" \"interoperability\" hack.\r\n// https://github.com/babel/babel/issues/2212#issuecomment-131827986\r\n// An alternative approach:\r\n// https://www.npmjs.com/package/babel-plugin-add-module-exports\r\nexports = module.exports = parsePhoneNumberFromString\r\nexports['default'] = parsePhoneNumberFromString\r\n\r\nexports.PhoneNumber = require('../build/PhoneNumber.js').default\r\nexports.ParseError = require('../build/ParseError.js').default\r\nvar parsePhoneNumberWithError = require('../build/parsePhoneNumberWithError.js').default\r\n// `parsePhoneNumber()` named export has been renamed to `parsePhoneNumberWithError()`.\r\nexports.parsePhoneNumberWithError = parsePhoneNumberWithError\r\nexports.parsePhoneNumber = parsePhoneNumberWithError\r\n\r\n// `parsePhoneNumberFromString()` named export is now considered legacy:\r\n// it has been promoted to a default export due to being too verbose.\r\nexports.parsePhoneNumberFromString = parsePhoneNumberFromString\r\n\r\nexports.isValidPhoneNumber = require('../build/isValidPhoneNumber.js').default\r\nexports.isPossiblePhoneNumber = require('../build/isPossiblePhoneNumber.js').default\r\nexports.validatePhoneNumberLength = require('../build/validatePhoneNumberLength.js').default\r\n\r\nexports.findNumbers = require('../build/legacy/findNumbers.js').default\r\nexports.searchNumbers = require('../build/legacy/searchNumbers.js').default\r\n\r\nexports.findPhoneNumbersInText = require('../build/findPhoneNumbersInText.js').default\r\nexports.searchPhoneNumbersInText = require('../build/searchPhoneNumbersInText.js').default\r\nexports.PhoneNumberMatcher = require('../build/PhoneNumberMatcher.js').default\r\n\r\nexports.AsYouType = require('../build/AsYouType.js').default\r\n\r\nexports.Metadata = require('../build/metadata.js').default\r\nexports.isSupportedCountry = require('../build/metadata.js').isSupportedCountry\r\nexports.getCountries = require('../build/getCountries.js').default\r\nexports.getCountryCallingCode = require('../build/metadata.js').getCountryCallingCode\r\nexports.getExtPrefix = require('../build/metadata.js').getExtPrefix\r\n\r\nexports.getExampleNumber = require('../build/getExampleNumber.js').default\r\n\r\nexports.formatIncompletePhoneNumber = require('../build/formatIncompletePhoneNumber.js').default\r\n\r\nexports.parseIncompletePhoneNumber = require('../build/parseIncompletePhoneNumber.js').default\r\nexports.parsePhoneNumberCharacter = require('../build/parseIncompletePhoneNumber.js').parsePhoneNumberCharacter\r\nexports.parseDigits = require('../build/helpers/parseDigits.js').default\r\nexports.DIGIT_PLACEHOLDER = require('../build/AsYouTypeFormatter.js').DIGIT_PLACEHOLDER\r\n\r\nexports.parseRFC3966 = require('../build/helpers/RFC3966.js').parseRFC3966\r\nexports.formatRFC3966 = require('../build/helpers/RFC3966.js').formatRFC3966\r\n", "'use strict'\r\n\r\nvar metadata = require('../metadata.max.json')\r\nvar core = require('../core/index.cjs')\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nfunction parsePhoneNumberFromString() {\r\n\treturn call(core.parsePhoneNumberFromString, arguments)\r\n}\r\n\r\n// ES5 `require()` \"default\" \"interoperability\" hack.\r\n// https://github.com/babel/babel/issues/2212#issuecomment-131827986\r\n// An alternative approach:\r\n// https://www.npmjs.com/package/babel-plugin-add-module-exports\r\nexports = module.exports = parsePhoneNumberFromString\r\nexports['default'] = parsePhoneNumberFromString\r\n\r\nexports.PhoneNumber = core.PhoneNumber\r\nexports.ParseError = core.ParseError\r\n\r\nfunction parsePhoneNumberWithError() {\r\n\treturn call(core.parsePhoneNumberWithError, arguments)\r\n}\r\n\r\n// `parsePhoneNumber()` named export has been renamed to `parsePhoneNumberWithError()`.\r\nexports.parsePhoneNumber = parsePhoneNumberWithError\r\nexports.parsePhoneNumberWithError = parsePhoneNumberWithError\r\n\r\n// `parsePhoneNumberFromString()` named export is now considered legacy:\r\n// it has been promoted to a default export due to being too verbose.\r\nexports.parsePhoneNumberFromString = parsePhoneNumberFromString\r\n\r\nexports.isValidPhoneNumber = function isValidPhoneNumber() {\r\n\treturn call(core.isValidPhoneNumber, arguments)\r\n}\r\n\r\nexports.isPossiblePhoneNumber = function isPossiblePhoneNumber() {\r\n\treturn call(core.isPossiblePhoneNumber, arguments)\r\n}\r\n\r\nexports.validatePhoneNumberLength = function validatePhoneNumberLength() {\r\n\treturn call(core.validatePhoneNumberLength, arguments)\r\n}\r\n\r\nexports.findNumbers = function findNumbers() {\r\n\treturn call(core.findNumbers, arguments)\r\n}\r\n\r\nexports.searchNumbers = function searchNumbers() {\r\n\treturn call(core.searchNumbers, arguments)\r\n}\r\n\r\nexports.findPhoneNumbersInText = function findPhoneNumbersInText() {\r\n\treturn call(core.findPhoneNumbersInText, arguments)\r\n}\r\n\r\nexports.searchPhoneNumbersInText = function searchPhoneNumbersInText() {\r\n\treturn call(core.searchPhoneNumbersInText, arguments)\r\n}\r\n\r\nexports.PhoneNumberMatcher = function PhoneNumberMatcher(text, options) {\r\n\treturn core.PhoneNumberMatcher.call(this, text, options, metadata)\r\n}\r\nexports.PhoneNumberMatcher.prototype = Object.create(core.PhoneNumberMatcher.prototype, {})\r\nexports.PhoneNumberMatcher.prototype.constructor = exports.PhoneNumberMatcher\r\n\r\nexports.AsYouType = function AsYouType(country) {\r\n\treturn core.AsYouType.call(this, country, metadata)\r\n}\r\nexports.AsYouType.prototype = Object.create(core.AsYouType.prototype, {})\r\nexports.AsYouType.prototype.constructor = exports.AsYouType\r\n\r\nexports.isSupportedCountry = function isSupportedCountry(country) {\r\n\treturn call(core.isSupportedCountry, arguments)\r\n}\r\n\r\nexports.getCountries = function getCountries() {\r\n\treturn call(core.getCountries, arguments)\r\n}\r\n\r\nexports.getCountryCallingCode = function getCountryCallingCode() {\r\n\treturn call(core.getCountryCallingCode, arguments)\r\n}\r\n\r\nexports.getExtPrefix = function getExtPrefix(country) {\r\n\treturn call(core.getExtPrefix, arguments)\r\n}\r\n\r\nexports.getExampleNumber = function getExampleNumber() {\r\n\treturn call(core.getExampleNumber, arguments)\r\n}\r\n\r\nexports.formatIncompletePhoneNumber = function formatIncompletePhoneNumber() {\r\n\treturn call(core.formatIncompletePhoneNumber, arguments)\r\n}\r\n\r\nexports.parseIncompletePhoneNumber = core.parseIncompletePhoneNumber\r\nexports.parsePhoneNumberCharacter = core.parsePhoneNumberCharacter\r\nexports.parseDigits = core.parseDigits\r\nexports.DIGIT_PLACEHOLDER = core.DIGIT_PLACEHOLDER\r\n\r\nexports.parseRFC3966 = core.parseRFC3966\r\nexports.formatRFC3966 = core.formatRFC3966\r\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { parsePhoneNumber, CountryCode } from 'libphonenumber-js/max';\n\nexport const IS_PHONE_NUMBER = 'isPhoneNumber';\n\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param value the potential phone number string to test\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function isPhoneNumber(value: string, region?: CountryCode): boolean {\n  if (typeof value !== 'string' || value.trim() !== value) {\n    return false;\n  }\n\n  try {\n    const phoneNumber = parsePhoneNumber(value, region);\n\n    /**\n     * We fail the validation if the user provided a region code\n     * and it doesn't match with the country code of the parsed number.\n     **/\n    if (region && phoneNumber.country !== region) {\n      return false;\n    }\n\n    return phoneNumber.isValid();\n  } catch (error) {\n    return false;\n  }\n}\n\n/**\n * Checks if the string is a valid phone number. To successfully validate any phone number the text must include\n * the intl. calling code, if the calling code wont be provided then the region must be set.\n *\n * @param region 2 characters uppercase country code (e.g. DE, US, CH) for country specific validation.\n * If text doesn't start with the international calling code (e.g. +41), then you must set this parameter.\n */\nexport function IsPhoneNumber(region?: CountryCode, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_PHONE_NUMBER,\n      constraints: [region],\n      validator: {\n        validate: (value, args): boolean => isPhoneNumber(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid phone number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport matchesValidator from 'validator/lib/matches';\n\nexport const IS_MILITARY_TIME = 'isMilitaryTime';\n\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function isMilitaryTime(value: unknown): boolean {\n  const militaryTimeRegex = /^([01]\\d|2[0-3]):?([0-5]\\d)$/;\n  return typeof value === 'string' && matchesValidator(value, militaryTimeRegex);\n}\n\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n */\nexport function IsMilitaryTime(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_MILITARY_TIME,\n      validator: {\n        validate: (value, args): boolean => isMilitaryTime(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid representation of military time in the format HH:MM',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHash;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar lengths = {\n  md5: 32,\n  md4: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8\n};\nfunction isHash(str, algorithm) {\n  (0, _assertString.default)(str);\n  var hash = new RegExp(\"^[a-fA-F0-9]{\".concat(lengths[algorithm], \"}$\"));\n  return hash.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isHashValidator from 'validator/lib/isHash';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_HASH = 'isHash';\n\n/**\n * Check if the string is a hash of type algorithm.\n * Algorithm is one of ['md4', 'md5', 'sha1', 'sha256', 'sha384', 'sha512', 'ripemd128', 'ripemd160', 'tiger128',\n * 'tiger160', 'tiger192', 'crc32', 'crc32b']\n */\nexport function isHash(value: unknown, algorithm: ValidatorJS.HashAlgorithm): boolean {\n  return typeof value === 'string' && isHashValidator(value, algorithm);\n}\n\n/**\n * Check if the string is a hash of type algorithm.\n * Algorithm is one of ['md4', 'md5', 'sha1', 'sha256', 'sha384', 'sha512', 'ripemd128', 'ripemd160', 'tiger128',\n * 'tiger160', 'tiger192', 'crc32', 'crc32b']\n */\nexport function IsHash(algorithm: string, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_HASH,\n      constraints: [algorithm],\n      validator: {\n        validate: (value, args): boolean => isHash(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a hash of type $constraint1',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISSN;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar issn = '^\\\\d{4}-?\\\\d{3}[\\\\dX]$';\nfunction isISSN(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(str);\n  var testIssn = issn;\n  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;\n  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');\n  if (!testIssn.test(str)) {\n    return false;\n  }\n  var digits = str.replace('-', '').toUpperCase();\n  var checksum = 0;\n  for (var i = 0; i < digits.length; i++) {\n    var digit = digits[i];\n    checksum += (digit === 'X' ? 10 : +digit) * (8 - i);\n  }\n  return checksum % 11 === 0;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isISSNValidator from 'validator/lib/isISSN';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_ISSN = 'isISSN';\n\n/**\n * Checks if the string is a ISSN.\n * If given value is not a string, then it returns false.\n */\nexport function isISSN(value: unknown, options?: ValidatorJS.IsISSNOptions): boolean {\n  return typeof value === 'string' && isISSNValidator(value, options);\n}\n\n/**\n * Checks if the string is a ISSN.\n * If given value is not a string, then it returns false.\n */\nexport function IsISSN(options?: ValidatorJS.IsISSNOptions, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISSN,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isISSN(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a ISSN', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport * as ValidatorJS from 'validator';\nimport { isISO8601 } from './IsISO8601';\n\nexport const IS_DATE_STRING = 'isDateString';\n\n/**\n * Alias for IsISO8601 validator\n */\nexport function isDateString(value: unknown, options?: ValidatorJS.IsISO8601Options): boolean {\n  return isISO8601(value, options);\n}\n\n/**\n * Alias for IsISO8601 validator\n */\nexport function IsDateString(\n  options?: ValidatorJS.IsISO8601Options,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DATE_STRING,\n      constraints: [options],\n      validator: {\n        validate: (value): boolean => isDateString(value, options),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid ISO 8601 date string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBoolean;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _includesArray = _interopRequireDefault(require(\"./util/includesArray\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar defaultOptions = {\n  loose: false\n};\nvar strictBooleans = ['true', 'false', '1', '0'];\nvar looseBooleans = [].concat(strictBooleans, ['yes', 'no']);\nfunction isBoolean(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  (0, _assertString.default)(str);\n  if (options.loose) {\n    return (0, _includesArray.default)(looseBooleans, str.toLowerCase());\n  }\n  return (0, _includesArray.default)(strictBooleans, str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBooleanValidator from 'validator/lib/isBoolean';\n\nexport const IS_BOOLEAN_STRING = 'isBooleanString';\n\n/**\n * Checks if a string is a boolean.\n * If given value is not a string, then it returns false.\n */\nexport function isBooleanString(value: unknown): boolean {\n  return typeof value === 'string' && isBooleanValidator(value);\n}\n\n/**\n * Checks if a string is a boolean.\n * If given value is not a string, then it returns false.\n */\nexport function IsBooleanString(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BOOLEAN_STRING,\n      validator: {\n        validate: (value, args): boolean => isBooleanString(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a boolean string',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isNumeric;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _alpha = require(\"./alpha\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar numericNoSymbols = /^[0-9]+$/;\nfunction isNumeric(str, options) {\n  (0, _assertString.default)(str);\n  if (options && options.no_symbols) {\n    return numericNoSymbols.test(str);\n  }\n  return new RegExp(\"^[+-]?([0-9]*[\".concat((options || {}).locale ? _alpha.decimal[options.locale] : '.', \"])?[0-9]+$\")).test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isNumericValidator from 'validator/lib/isNumeric';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_NUMBER_STRING = 'isNumberString';\n\n/**\n * Checks if the string is numeric.\n * If given value is not a string, then it returns false.\n */\nexport function isNumberString(value: unknown, options?: ValidatorJS.IsNumericOptions): boolean {\n  return typeof value === 'string' && isNumericValidator(value, options);\n}\n\n/**\n * Checks if the string is numeric.\n * If given value is not a string, then it returns false.\n */\nexport function IsNumberString(\n  options?: ValidatorJS.IsNumericOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NUMBER_STRING,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isNumberString(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a number string', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBase32;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar base32 = /^[A-Z2-7]+=*$/;\nvar crockfordBase32 = /^[A-HJKMNP-TV-Z0-9]+$/;\nvar defaultBase32Options = {\n  crockford: false\n};\nfunction isBase32(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, defaultBase32Options);\n  if (options.crockford) {\n    return crockfordBase32.test(str);\n  }\n  var len = str.length;\n  if (len % 8 === 0 && base32.test(str)) {\n    return true;\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBase32Validator from 'validator/lib/isBase32';\n\nexport const IS_BASE32 = 'isBase32';\n\n/**\n * Checks if a string is base32 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase32(value: unknown): boolean {\n  return typeof value === 'string' && isBase32Validator(value);\n}\n\n/**\n * Check if a string is base32 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function IsBase32(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BASE32,\n      validator: {\n        validate: (value, args): boolean => isBase32(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be base32 encoded', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBIC;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _isISO31661Alpha = require(\"./isISO31661Alpha2\");\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// https://en.wikipedia.org/wiki/ISO_9362\nvar isBICReg = /^[A-Za-z]{6}[A-Za-z0-9]{2}([A-Za-z0-9]{3})?$/;\nfunction isBIC(str) {\n  (0, _assertString.default)(str);\n\n  // toUpperCase() should be removed when a new major version goes out that changes\n  // the regex to [A-Z] (per the spec).\n  var countryCode = str.slice(4, 6).toUpperCase();\n  if (!_isISO31661Alpha.CountryCodes.has(countryCode) && countryCode !== 'XK') {\n    return false;\n  }\n  return isBICReg.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBICValidator from 'validator/lib/isBIC';\n\nexport const IS_BIC = 'isBIC';\n\n/**\n * Check if a string is a BIC (Bank Identification Code) or SWIFT code.\n * If given value is not a string, then it returns false.\n */\nexport function isBIC(value: unknown): boolean {\n  return typeof value === 'string' && isBICValidator(value);\n}\n\n/**\n * Check if a string is a BIC (Bank Identification Code) or SWIFT code.\n * If given value is not a string, then it returns false.\n */\nexport function IsBIC(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BIC,\n      validator: {\n        validate: (value, args): boolean => isBIC(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a BIC or SWIFT code',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBtcAddress;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar bech32 = /^(bc1|tb1|bc1p|tb1p)[ac-hj-np-z02-9]{39,58}$/;\nvar base58 = /^(1|2|3|m)[A-HJ-NP-Za-km-z1-9]{25,39}$/;\nfunction isBtcAddress(str) {\n  (0, _assertString.default)(str);\n  return bech32.test(str) || base58.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBtcAddressValidator from 'validator/lib/isBtcAddress';\n\nexport const IS_BTC_ADDRESS = 'isBtcAddress';\n\n/**\n * Check if the string is a valid BTC address.\n * If given value is not a string, then it returns false.\n */\nexport function isBtcAddress(value: unknown): boolean {\n  return typeof value === 'string' && isBtcAddressValidator(value);\n}\n\n/**\n * Check if the string is a valid BTC address.\n * If given value is not a string, then it returns false.\n */\nexport function IsBtcAddress(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BTC_ADDRESS,\n      validator: {\n        validate: (value, args): boolean => isBtcAddress(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a BTC address', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDataURI;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar validMediaType = /^[a-z]+\\/[a-z0-9\\-\\+\\._]+$/i;\nvar validAttribute = /^[a-z\\-]+=[a-z0-9\\-]+$/i;\nvar validData = /^[a-z0-9!\\$&'\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*$/i;\nfunction isDataURI(str) {\n  (0, _assertString.default)(str);\n  var data = str.split(',');\n  if (data.length < 2) {\n    return false;\n  }\n  var attributes = data.shift().trim().split(';');\n  var schemeAndMediaType = attributes.shift();\n  if (schemeAndMediaType.slice(0, 5) !== 'data:') {\n    return false;\n  }\n  var mediaType = schemeAndMediaType.slice(5);\n  if (mediaType !== '' && !validMediaType.test(mediaType)) {\n    return false;\n  }\n  for (var i = 0; i < attributes.length; i++) {\n    if (!(i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') && !validAttribute.test(attributes[i])) {\n      return false;\n    }\n  }\n  for (var _i = 0; _i < data.length; _i++) {\n    if (!validData.test(data[_i])) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isDataURIValidator from 'validator/lib/isDataURI';\n\nexport const IS_DATA_URI = 'isDataURI';\n\n/**\n * Check if the string is a data uri format.\n * If given value is not a string, then it returns false.\n */\nexport function isDataURI(value: unknown): boolean {\n  return typeof value === 'string' && isDataURIValidator(value);\n}\n\n/**\n * Check if the string is a data uri format.\n * If given value is not a string, then it returns false.\n */\nexport function IsDataURI(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DATA_URI,\n      validator: {\n        validate: (value, args): boolean => isDataURI(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a data uri format',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEAN;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * The most commonly used EAN standard is\n * the thirteen-digit EAN-13, while the\n * less commonly used 8-digit EAN-8 barcode was\n * introduced for use on small packages.\n * Also EAN/UCC-14 is used for Grouping of individual\n * trade items above unit level(Intermediate, Carton or Pallet).\n * For more info about EAN-14 checkout: https://www.gtin.info/itf-14-barcodes/\n * EAN consists of:\n * GS1 prefix, manufacturer code, product code and check digit\n * Reference: https://en.wikipedia.org/wiki/International_Article_Number\n * Reference: https://www.gtin.info/\n */\n\n/**\n * Define EAN Lengths; 8 for EAN-8; 13 for EAN-13; 14 for EAN-14\n * and Regular Expression for valid EANs (EAN-8, EAN-13, EAN-14),\n * with exact numeric matching of 8 or 13 or 14 digits [0-9]\n */\nvar LENGTH_EAN_8 = 8;\nvar LENGTH_EAN_14 = 14;\nvar validEanRegex = /^(\\d{8}|\\d{13}|\\d{14})$/;\n\n/**\n * Get position weight given:\n * EAN length and digit index/position\n *\n * @param {number} length\n * @param {number} index\n * @return {number}\n */\nfunction getPositionWeightThroughLengthAndIndex(length, index) {\n  if (length === LENGTH_EAN_8 || length === LENGTH_EAN_14) {\n    return index % 2 === 0 ? 3 : 1;\n  }\n  return index % 2 === 0 ? 1 : 3;\n}\n\n/**\n * Calculate EAN Check Digit\n * Reference: https://en.wikipedia.org/wiki/International_Article_Number#Calculation_of_checksum_digit\n *\n * @param {string} ean\n * @return {number}\n */\nfunction calculateCheckDigit(ean) {\n  var checksum = ean.slice(0, -1).split('').map(function (char, index) {\n    return Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index);\n  }).reduce(function (acc, partialSum) {\n    return acc + partialSum;\n  }, 0);\n  var remainder = 10 - checksum % 10;\n  return remainder < 10 ? remainder : 0;\n}\n\n/**\n * Check if string is valid EAN:\n * Matches EAN-8/EAN-13/EAN-14 regex\n * Has valid check digit.\n *\n * @param {string} str\n * @return {boolean}\n */\nfunction isEAN(str) {\n  (0, _assertString.default)(str);\n  var actualCheckDigit = Number(str.slice(-1));\n  return validEanRegex.test(str) && actualCheckDigit === calculateCheckDigit(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isEANValidator from 'validator/lib/isEAN';\n\nexport const IS_EAN = 'isEAN';\n\n/**\n * Check if the string is an EAN (European Article Number).\n * If given value is not a string, then it returns false.\n */\nexport function isEAN(value: unknown): boolean {\n  return typeof value === 'string' && isEANValidator(value);\n}\n\n/**\n * Check if the string is an EAN (European Article Number).\n * If given value is not a string, then it returns false.\n */\nexport function IsEAN(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_EAN,\n      validator: {\n        validate: (value, args): boolean => isEAN(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be an EAN (European Article Number)',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEthereumAddress;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar eth = /^(0x)[0-9a-f]{40}$/i;\nfunction isEthereumAddress(str) {\n  (0, _assertString.default)(str);\n  return eth.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isEthereumAddressValidator from 'validator/lib/isEthereumAddress';\n\nexport const IS_ETHEREUM_ADDRESS = 'isEthereumAddress';\n\n/**\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\n * If given value is not a string, then it returns false.\n */\nexport function isEthereumAddress(value: unknown): boolean {\n  return typeof value === 'string' && isEthereumAddressValidator(value);\n}\n\n/**\n * Check if the string is an Ethereum address using basic regex. Does not validate address checksums.\n * If given value is not a string, then it returns false.\n */\nexport function IsEthereumAddress(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ETHEREUM_ADDRESS,\n      validator: {\n        validate: (value, args): boolean => isEthereumAddress(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be an Ethereum address',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isHSL;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar hslComma = /^hsla?\\(((\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?))(deg|grad|rad|turn)?(,(\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?)%){2}(,((\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?)%?))?\\)$/i;\nvar hslSpace = /^hsla?\\(((\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?))(deg|grad|rad|turn)?(\\s(\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?)%){2}\\s?(\\/\\s((\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?)%?)\\s?)?\\)$/i;\nfunction isHSL(str) {\n  (0, _assertString.default)(str);\n\n  // Strip duplicate spaces before calling the validation regex (See  #1598 for more info)\n  var strippedStr = str.replace(/\\s+/g, ' ').replace(/\\s?(hsla?\\(|\\)|,)\\s?/ig, '$1');\n  if (strippedStr.indexOf(',') !== -1) {\n    return hslComma.test(strippedStr);\n  }\n  return hslSpace.test(strippedStr);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isHSLValidator from 'validator/lib/isHSL';\n\nexport const IS_HSL = 'isHSL';\n\n/**\n * Check if the string is an HSL (hue, saturation, lightness, optional alpha) color based on CSS Colors Level 4 specification.\n * Comma-separated format supported. Space-separated format supported with the exception of a few edge cases (ex: hsl(200grad+.1%62%/1)).\n * If given value is not a string, then it returns false.\n */\nexport function isHSL(value: unknown): boolean {\n  return typeof value === 'string' && isHSLValidator(value);\n}\n\n/**\n * Check if the string is an HSL (hue, saturation, lightness, optional alpha) color based on CSS Colors Level 4 specification.\n * Comma-separated format supported. Space-separated format supported with the exception of a few edge cases (ex: hsl(200grad+.1%62%/1)).\n * If given value is not a string, then it returns false.\n */\nexport function IsHSL(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_HSL,\n      validator: {\n        validate: (value, args): boolean => isHSL(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a HSL color', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIBAN;\nexports.locales = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _includesArray = _interopRequireDefault(require(\"./util/includesArray\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * List of country codes with\n * corresponding IBAN regular expression\n * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n */\nvar ibanRegexThroughCountryCode = {\n  AD: /^(AD[0-9]{2})\\d{8}[A-Z0-9]{12}$/,\n  AE: /^(AE[0-9]{2})\\d{3}\\d{16}$/,\n  AL: /^(AL[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  AT: /^(AT[0-9]{2})\\d{16}$/,\n  AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  BA: /^(BA[0-9]{2})\\d{16}$/,\n  BE: /^(BE[0-9]{2})\\d{12}$/,\n  BG: /^(BG[0-9]{2})[A-Z]{4}\\d{6}[A-Z0-9]{8}$/,\n  BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,\n  BR: /^(BR[0-9]{2})\\d{23}[A-Z]{1}[A-Z0-9]{1}$/,\n  BY: /^(BY[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  CH: /^(CH[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  CR: /^(CR[0-9]{2})\\d{18}$/,\n  CY: /^(CY[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  CZ: /^(CZ[0-9]{2})\\d{20}$/,\n  DE: /^(DE[0-9]{2})\\d{18}$/,\n  DK: /^(DK[0-9]{2})\\d{14}$/,\n  DO: /^(DO[0-9]{2})[A-Z]{4}\\d{20}$/,\n  DZ: /^(DZ\\d{24})$/,\n  EE: /^(EE[0-9]{2})\\d{16}$/,\n  EG: /^(EG[0-9]{2})\\d{25}$/,\n  ES: /^(ES[0-9]{2})\\d{20}$/,\n  FI: /^(FI[0-9]{2})\\d{14}$/,\n  FO: /^(FO[0-9]{2})\\d{14}$/,\n  FR: /^(FR[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  GB: /^(GB[0-9]{2})[A-Z]{4}\\d{14}$/,\n  GE: /^(GE[0-9]{2})[A-Z0-9]{2}\\d{16}$/,\n  GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,\n  GL: /^(GL[0-9]{2})\\d{14}$/,\n  GR: /^(GR[0-9]{2})\\d{7}[A-Z0-9]{16}$/,\n  GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,\n  HR: /^(HR[0-9]{2})\\d{17}$/,\n  HU: /^(HU[0-9]{2})\\d{24}$/,\n  IE: /^(IE[0-9]{2})[A-Z]{4}\\d{14}$/,\n  IL: /^(IL[0-9]{2})\\d{19}$/,\n  IQ: /^(IQ[0-9]{2})[A-Z]{4}\\d{15}$/,\n  IR: /^(IR[0-9]{2})0\\d{2}0\\d{18}$/,\n  IS: /^(IS[0-9]{2})\\d{22}$/,\n  IT: /^(IT[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  JO: /^(JO[0-9]{2})[A-Z]{4}\\d{22}$/,\n  KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,\n  KZ: /^(KZ[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LB: /^(LB[0-9]{2})\\d{4}[A-Z0-9]{20}$/,\n  LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,\n  LI: /^(LI[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  LT: /^(LT[0-9]{2})\\d{16}$/,\n  LU: /^(LU[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,\n  MA: /^(MA[0-9]{26})$/,\n  MC: /^(MC[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,\n  ME: /^(ME[0-9]{2})\\d{18}$/,\n  MK: /^(MK[0-9]{2})\\d{3}[A-Z0-9]{10}\\d{2}$/,\n  MR: /^(MR[0-9]{2})\\d{23}$/,\n  MT: /^(MT[0-9]{2})[A-Z]{4}\\d{5}[A-Z0-9]{18}$/,\n  MU: /^(MU[0-9]{2})[A-Z]{4}\\d{19}[A-Z]{3}$/,\n  MZ: /^(MZ[0-9]{2})\\d{21}$/,\n  NL: /^(NL[0-9]{2})[A-Z]{4}\\d{10}$/,\n  NO: /^(NO[0-9]{2})\\d{11}$/,\n  PK: /^(PK[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  PL: /^(PL[0-9]{2})\\d{24}$/,\n  PS: /^(PS[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,\n  PT: /^(PT[0-9]{2})\\d{21}$/,\n  QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,\n  RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,\n  RS: /^(RS[0-9]{2})\\d{18}$/,\n  SA: /^(SA[0-9]{2})\\d{2}[A-Z0-9]{18}$/,\n  SC: /^(SC[0-9]{2})[A-Z]{4}\\d{20}[A-Z]{3}$/,\n  SE: /^(SE[0-9]{2})\\d{20}$/,\n  SI: /^(SI[0-9]{2})\\d{15}$/,\n  SK: /^(SK[0-9]{2})\\d{20}$/,\n  SM: /^(SM[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  SV: /^(SV[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  TL: /^(TL[0-9]{2})\\d{19}$/,\n  TN: /^(TN[0-9]{2})\\d{20}$/,\n  TR: /^(TR[0-9]{2})\\d{5}[A-Z0-9]{17}$/,\n  UA: /^(UA[0-9]{2})\\d{6}[A-Z0-9]{19}$/,\n  VA: /^(VA[0-9]{2})\\d{18}$/,\n  VG: /^(VG[0-9]{2})[A-Z]{4}\\d{16}$/,\n  XK: /^(XK[0-9]{2})\\d{16}$/\n};\n\n/**\n * Check if the country codes passed are valid using the\n * ibanRegexThroughCountryCode as a reference\n *\n * @param {array} countryCodeArray\n * @return {boolean}\n */\n\nfunction hasOnlyValidCountryCodes(countryCodeArray) {\n  var countryCodeArrayFilteredWithObjectIbanCode = countryCodeArray.filter(function (countryCode) {\n    return !(countryCode in ibanRegexThroughCountryCode);\n  });\n  if (countryCodeArrayFilteredWithObjectIbanCode.length > 0) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Check whether string has correct universal IBAN format\n * The IBAN consists of up to 34 alphanumeric characters, as follows:\n * Country Code using ISO 3166-1 alpha-2, two letters\n * check digits, two digits and\n * Basic Bank Account Number (BBAN), up to 30 alphanumeric characters.\n * NOTE: Permitted IBAN characters are: digits [0-9] and the 26 latin alphabetic [A-Z]\n *\n * @param {string} str - string under validation\n * @param {object} options - object to pass the countries to be either whitelisted or blacklisted\n * @return {boolean}\n */\nfunction hasValidIbanFormat(str, options) {\n  // Strip white spaces and hyphens\n  var strippedStr = str.replace(/[\\s\\-]+/gi, '').toUpperCase();\n  var isoCountryCode = strippedStr.slice(0, 2).toUpperCase();\n  var isoCountryCodeInIbanRegexCodeObject = isoCountryCode in ibanRegexThroughCountryCode;\n  if (options.whitelist) {\n    if (!hasOnlyValidCountryCodes(options.whitelist)) {\n      return false;\n    }\n    var isoCountryCodeInWhiteList = (0, _includesArray.default)(options.whitelist, isoCountryCode);\n    if (!isoCountryCodeInWhiteList) {\n      return false;\n    }\n  }\n  if (options.blacklist) {\n    var isoCountryCodeInBlackList = (0, _includesArray.default)(options.blacklist, isoCountryCode);\n    if (isoCountryCodeInBlackList) {\n      return false;\n    }\n  }\n  return isoCountryCodeInIbanRegexCodeObject && ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);\n}\n\n/**\n   * Check whether string has valid IBAN Checksum\n   * by performing basic mod-97 operation and\n   * the remainder should equal 1\n   * -- Start by rearranging the IBAN by moving the four initial characters to the end of the string\n   * -- Replace each letter in the string with two digits, A -> 10, B = 11, Z = 35\n   * -- Interpret the string as a decimal integer and\n   * -- compute the remainder on division by 97 (mod 97)\n   * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n   *\n   * @param {string} str\n   * @return {boolean}\n   */\nfunction hasValidIbanChecksum(str) {\n  var strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic\n  var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);\n  var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function (char) {\n    return char.charCodeAt(0) - 55;\n  });\n  var remainder = alphaCapsReplacedWithDigits.match(/\\d{1,7}/g).reduce(function (acc, value) {\n    return Number(acc + value) % 97;\n  }, '');\n  return remainder === 1;\n}\nfunction isIBAN(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  (0, _assertString.default)(str);\n  return hasValidIbanFormat(str, options) && hasValidIbanChecksum(str);\n}\nvar locales = exports.locales = Object.keys(ibanRegexThroughCountryCode);", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIBANValidator from 'validator/lib/isIBAN';\n\nexport const IS_IBAN = 'isIBAN';\n\n/**\n * Check if a string is a IBAN (International Bank Account Number).\n * If given value is not a string, then it returns false.\n */\nexport function isIBAN(value: unknown): boolean {\n  return typeof value === 'string' && isIBANValidator(value);\n}\n\n/**\n * Check if a string is a IBAN (International Bank Account Number).\n * If given value is not a string, then it returns false.\n */\nexport function IsIBAN(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_IBAN,\n      validator: {\n        validate: (value, args): boolean => isIBAN(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an IBAN', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIdentityCard;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _includesArray = _interopRequireDefault(require(\"./util/includesArray\"));\nvar _isInt = _interopRequireDefault(require(\"./isInt\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar validators = {\n  PL: function PL(str) {\n    (0, _assertString.default)(str);\n    var weightOfDigits = {\n      1: 1,\n      2: 3,\n      3: 7,\n      4: 9,\n      5: 1,\n      6: 3,\n      7: 7,\n      8: 9,\n      9: 1,\n      10: 3,\n      11: 0\n    };\n    if (str != null && str.length === 11 && (0, _isInt.default)(str, {\n      allow_leading_zeroes: true\n    })) {\n      var digits = str.split('').slice(0, -1);\n      var sum = digits.reduce(function (acc, digit, index) {\n        return acc + Number(digit) * weightOfDigits[index + 1];\n      }, 0);\n      var modulo = sum % 10;\n      var lastDigit = Number(str.charAt(str.length - 1));\n      if (modulo === 0 && lastDigit === 0 || lastDigit === 10 - modulo) {\n        return true;\n      }\n    }\n    return false;\n  },\n  ES: function ES(str) {\n    (0, _assertString.default)(str);\n    var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;\n    var charsValue = {\n      X: 0,\n      Y: 1,\n      Z: 2\n    };\n    var controlDigits = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];\n\n    // sanitize user input\n    var sanitized = str.trim().toUpperCase();\n\n    // validate the data structure\n    if (!DNI.test(sanitized)) {\n      return false;\n    }\n\n    // validate the control digit\n    var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function (char) {\n      return charsValue[char];\n    });\n    return sanitized.endsWith(controlDigits[number % 23]);\n  },\n  FI: function FI(str) {\n    // https://dvv.fi/en/personal-identity-code#:~:text=control%20character%20for%20a-,personal,-identity%20code%20calculated\n    (0, _assertString.default)(str);\n    if (str.length !== 11) {\n      return false;\n    }\n    if (!str.match(/^\\d{6}[\\-A\\+]\\d{3}[0-9ABCDEFHJKLMNPRSTUVWXY]{1}$/)) {\n      return false;\n    }\n    var checkDigits = '0123456789ABCDEFHJKLMNPRSTUVWXY';\n    var idAsNumber = parseInt(str.slice(0, 6), 10) * 1000 + parseInt(str.slice(7, 10), 10);\n    var remainder = idAsNumber % 31;\n    var checkDigit = checkDigits[remainder];\n    return checkDigit === str.slice(10, 11);\n  },\n  IN: function IN(str) {\n    var DNI = /^[1-9]\\d{3}\\s?\\d{4}\\s?\\d{4}$/;\n\n    // multiplication table\n    var d = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];\n\n    // permutation table\n    var p = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]];\n\n    // sanitize user input\n    var sanitized = str.trim();\n\n    // validate the data structure\n    if (!DNI.test(sanitized)) {\n      return false;\n    }\n    var c = 0;\n    var invertedArray = sanitized.replace(/\\s/g, '').split('').map(Number).reverse();\n    invertedArray.forEach(function (val, i) {\n      c = d[c][p[i % 8][val]];\n    });\n    return c === 0;\n  },\n  IR: function IR(str) {\n    if (!str.match(/^\\d{10}$/)) return false;\n    str = \"0000\".concat(str).slice(str.length - 6);\n    if (parseInt(str.slice(3, 9), 10) === 0) return false;\n    var lastNumber = parseInt(str.slice(9, 10), 10);\n    var sum = 0;\n    for (var i = 0; i < 9; i++) {\n      sum += parseInt(str.slice(i, i + 1), 10) * (10 - i);\n    }\n    sum %= 11;\n    return sum < 2 && lastNumber === sum || sum >= 2 && lastNumber === 11 - sum;\n  },\n  IT: function IT(str) {\n    if (str.length !== 9) return false;\n    if (str === 'CA00000AA') return false; // https://it.wikipedia.org/wiki/Carta_d%27identit%C3%A0_elettronica_italiana\n    return str.search(/C[A-Z]\\d{5}[A-Z]{2}/i) > -1;\n  },\n  NO: function NO(str) {\n    var sanitized = str.trim();\n    if (isNaN(Number(sanitized))) return false;\n    if (sanitized.length !== 11) return false;\n    if (sanitized === '00000000000') return false;\n\n    // https://no.wikipedia.org/wiki/F%C3%B8dselsnummer\n    var f = sanitized.split('').map(Number);\n    var k1 = (11 - (3 * f[0] + 7 * f[1] + 6 * f[2] + 1 * f[3] + 8 * f[4] + 9 * f[5] + 4 * f[6] + 5 * f[7] + 2 * f[8]) % 11) % 11;\n    var k2 = (11 - (5 * f[0] + 4 * f[1] + 3 * f[2] + 2 * f[3] + 7 * f[4] + 6 * f[5] + 5 * f[6] + 4 * f[7] + 3 * f[8] + 2 * k1) % 11) % 11;\n    if (k1 !== f[9] || k2 !== f[10]) return false;\n    return true;\n  },\n  TH: function TH(str) {\n    if (!str.match(/^[1-8]\\d{12}$/)) return false;\n\n    // validate check digit\n    var sum = 0;\n    for (var i = 0; i < 12; i++) {\n      sum += parseInt(str[i], 10) * (13 - i);\n    }\n    return str[12] === ((11 - sum % 11) % 10).toString();\n  },\n  LK: function LK(str) {\n    var old_nic = /^[1-9]\\d{8}[vx]$/i;\n    var new_nic = /^[1-9]\\d{11}$/i;\n    if (str.length === 10 && old_nic.test(str)) return true;else if (str.length === 12 && new_nic.test(str)) return true;\n    return false;\n  },\n  'he-IL': function heIL(str) {\n    var DNI = /^\\d{9}$/;\n\n    // sanitize user input\n    var sanitized = str.trim();\n\n    // validate the data structure\n    if (!DNI.test(sanitized)) {\n      return false;\n    }\n    var id = sanitized;\n    var sum = 0,\n      incNum;\n    for (var i = 0; i < id.length; i++) {\n      incNum = Number(id[i]) * (i % 2 + 1); // Multiply number by 1 or 2\n      sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total\n    }\n    return sum % 10 === 0;\n  },\n  'ar-LY': function arLY(str) {\n    // Libya National Identity Number NIN is 12 digits, the first digit is either 1 or 2\n    var NIN = /^(1|2)\\d{11}$/;\n\n    // sanitize user input\n    var sanitized = str.trim();\n\n    // validate the data structure\n    if (!NIN.test(sanitized)) {\n      return false;\n    }\n    return true;\n  },\n  'ar-TN': function arTN(str) {\n    var DNI = /^\\d{8}$/;\n\n    // sanitize user input\n    var sanitized = str.trim();\n\n    // validate the data structure\n    if (!DNI.test(sanitized)) {\n      return false;\n    }\n    return true;\n  },\n  'zh-CN': function zhCN(str) {\n    var provincesAndCities = ['11',\n    // \u5317\u4EAC\n    '12',\n    // \u5929\u6D25\n    '13',\n    // \u6CB3\u5317\n    '14',\n    // \u5C71\u897F\n    '15',\n    // \u5185\u8499\u53E4\n    '21',\n    // \u8FBD\u5B81\n    '22',\n    // \u5409\u6797\n    '23',\n    // \u9ED1\u9F99\u6C5F\n    '31',\n    // \u4E0A\u6D77\n    '32',\n    // \u6C5F\u82CF\n    '33',\n    // \u6D59\u6C5F\n    '34',\n    // \u5B89\u5FBD\n    '35',\n    // \u798F\u5EFA\n    '36',\n    // \u6C5F\u897F\n    '37',\n    // \u5C71\u4E1C\n    '41',\n    // \u6CB3\u5357\n    '42',\n    // \u6E56\u5317\n    '43',\n    // \u6E56\u5357\n    '44',\n    // \u5E7F\u4E1C\n    '45',\n    // \u5E7F\u897F\n    '46',\n    // \u6D77\u5357\n    '50',\n    // \u91CD\u5E86\n    '51',\n    // \u56DB\u5DDD\n    '52',\n    // \u8D35\u5DDE\n    '53',\n    // \u4E91\u5357\n    '54',\n    // \u897F\u85CF\n    '61',\n    // \u9655\u897F\n    '62',\n    // \u7518\u8083\n    '63',\n    // \u9752\u6D77\n    '64',\n    // \u5B81\u590F\n    '65',\n    // \u65B0\u7586\n    '71',\n    // \u53F0\u6E7E\n    '81',\n    // \u9999\u6E2F\n    '82',\n    // \u6FB3\u95E8\n    '91' // \u56FD\u5916\n    ];\n    var powers = ['7', '9', '10', '5', '8', '4', '2', '1', '6', '3', '7', '9', '10', '5', '8', '4', '2'];\n    var parityBit = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];\n    var checkAddressCode = function checkAddressCode(addressCode) {\n      return (0, _includesArray.default)(provincesAndCities, addressCode);\n    };\n    var checkBirthDayCode = function checkBirthDayCode(birDayCode) {\n      var yyyy = parseInt(birDayCode.substring(0, 4), 10);\n      var mm = parseInt(birDayCode.substring(4, 6), 10);\n      var dd = parseInt(birDayCode.substring(6), 10);\n      var xdata = new Date(yyyy, mm - 1, dd);\n      if (xdata > new Date()) {\n        return false;\n        // eslint-disable-next-line max-len\n      } else if (xdata.getFullYear() === yyyy && xdata.getMonth() === mm - 1 && xdata.getDate() === dd) {\n        return true;\n      }\n      return false;\n    };\n    var getParityBit = function getParityBit(idCardNo) {\n      var id17 = idCardNo.substring(0, 17);\n      var power = 0;\n      for (var i = 0; i < 17; i++) {\n        power += parseInt(id17.charAt(i), 10) * parseInt(powers[i], 10);\n      }\n      var mod = power % 11;\n      return parityBit[mod];\n    };\n    var checkParityBit = function checkParityBit(idCardNo) {\n      return getParityBit(idCardNo) === idCardNo.charAt(17).toUpperCase();\n    };\n    var check15IdCardNo = function check15IdCardNo(idCardNo) {\n      var check = /^[1-9]\\d{7}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}$/.test(idCardNo);\n      if (!check) return false;\n      var addressCode = idCardNo.substring(0, 2);\n      check = checkAddressCode(addressCode);\n      if (!check) return false;\n      var birDayCode = \"19\".concat(idCardNo.substring(6, 12));\n      check = checkBirthDayCode(birDayCode);\n      if (!check) return false;\n      return true;\n    };\n    var check18IdCardNo = function check18IdCardNo(idCardNo) {\n      var check = /^[1-9]\\d{5}[1-9]\\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2][0-9])|(3[0-1]))\\d{3}(\\d|x|X)$/.test(idCardNo);\n      if (!check) return false;\n      var addressCode = idCardNo.substring(0, 2);\n      check = checkAddressCode(addressCode);\n      if (!check) return false;\n      var birDayCode = idCardNo.substring(6, 14);\n      check = checkBirthDayCode(birDayCode);\n      if (!check) return false;\n      return checkParityBit(idCardNo);\n    };\n    var checkIdCardNo = function checkIdCardNo(idCardNo) {\n      var check = /^\\d{15}|(\\d{17}(\\d|x|X))$/.test(idCardNo);\n      if (!check) return false;\n      if (idCardNo.length === 15) {\n        return check15IdCardNo(idCardNo);\n      }\n      return check18IdCardNo(idCardNo);\n    };\n    return checkIdCardNo(str);\n  },\n  'zh-HK': function zhHK(str) {\n    // sanitize user input\n    str = str.trim();\n\n    // HKID number starts with 1 or 2 letters, followed by 6 digits,\n    // then a checksum contained in square / round brackets or nothing\n    var regexHKID = /^[A-Z]{1,2}[0-9]{6}((\\([0-9A]\\))|(\\[[0-9A]\\])|([0-9A]))$/;\n    var regexIsDigit = /^[0-9]$/;\n\n    // convert the user input to all uppercase and apply regex\n    str = str.toUpperCase();\n    if (!regexHKID.test(str)) return false;\n    str = str.replace(/\\[|\\]|\\(|\\)/g, '');\n    if (str.length === 8) str = \"3\".concat(str);\n    var checkSumVal = 0;\n    for (var i = 0; i <= 7; i++) {\n      var convertedChar = void 0;\n      if (!regexIsDigit.test(str[i])) convertedChar = (str[i].charCodeAt(0) - 55) % 11;else convertedChar = str[i];\n      checkSumVal += convertedChar * (9 - i);\n    }\n    checkSumVal %= 11;\n    var checkSumConverted;\n    if (checkSumVal === 0) checkSumConverted = '0';else if (checkSumVal === 1) checkSumConverted = 'A';else checkSumConverted = String(11 - checkSumVal);\n    if (checkSumConverted === str[str.length - 1]) return true;\n    return false;\n  },\n  'zh-TW': function zhTW(str) {\n    var ALPHABET_CODES = {\n      A: 10,\n      B: 11,\n      C: 12,\n      D: 13,\n      E: 14,\n      F: 15,\n      G: 16,\n      H: 17,\n      I: 34,\n      J: 18,\n      K: 19,\n      L: 20,\n      M: 21,\n      N: 22,\n      O: 35,\n      P: 23,\n      Q: 24,\n      R: 25,\n      S: 26,\n      T: 27,\n      U: 28,\n      V: 29,\n      W: 32,\n      X: 30,\n      Y: 31,\n      Z: 33\n    };\n    var sanitized = str.trim().toUpperCase();\n    if (!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;\n    return Array.from(sanitized).reduce(function (sum, number, index) {\n      if (index === 0) {\n        var code = ALPHABET_CODES[number];\n        return code % 10 * 9 + Math.floor(code / 10);\n      }\n      if (index === 9) {\n        return (10 - sum % 10 - Number(number)) % 10 === 0;\n      }\n      return sum + Number(number) * (9 - index);\n    }, 0);\n  },\n  PK: function PK(str) {\n    // Pakistani National Identity Number CNIC is 13 digits\n    var CNIC = /^[1-7][0-9]{4}-[0-9]{7}-[1-9]$/;\n\n    // sanitize user input\n    var sanitized = str.trim();\n\n    // validate the data structure\n    return CNIC.test(sanitized);\n  }\n};\nfunction isIdentityCard(str, locale) {\n  (0, _assertString.default)(str);\n  if (locale in validators) {\n    return validators[locale](str);\n  } else if (locale === 'any') {\n    for (var key in validators) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if (validators.hasOwnProperty(key)) {\n        var validator = validators[key];\n        if (validator(str)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isIdentityCardValidator from 'validator/lib/isIdentityCard';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_IDENTITY_CARD = 'isIdentityCard';\n\n/**\n * Check if the string is a valid identity card code.\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\n * Defaults to 'any'.\n * If given value is not a string, then it returns false.\n */\nexport function isIdentityCard(value: unknown, locale: ValidatorJS.IdentityCardLocale): boolean {\n  return typeof value === 'string' && isIdentityCardValidator(value, locale);\n}\n\n/**\n * Check if the string is a valid identity card code.\n * locale is one of ['ES', 'zh-TW', 'he-IL', 'ar-TN'] OR 'any'. If 'any' is used, function will check if any of the locals match.\n * Defaults to 'any'.\n * If given value is not a string, then it returns false.\n */\nexport function IsIdentityCard(\n  locale?: ValidatorJS.IdentityCardLocale,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_IDENTITY_CARD,\n      constraints: [locale],\n      validator: {\n        validate: (value, args): boolean => isIdentityCard(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a identity card number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISRC;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// see http://isrc.ifpi.org/en/isrc-standard/code-syntax\nvar isrc = /^[A-Z]{2}[0-9A-Z]{3}\\d{2}\\d{5}$/;\nfunction isISRC(str) {\n  (0, _assertString.default)(str);\n  return isrc.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isISRCValidator from 'validator/lib/isISRC';\n\nexport const IS_ISRC = 'isISRC';\n\n/**\n * Check if the string is a ISRC.\n * If given value is not a string, then it returns false.\n */\nexport function isISRC(value: unknown): boolean {\n  return typeof value === 'string' && isISRCValidator(value);\n}\n\n/**\n * Check if the string is a ISRC.\n * If given value is not a string, then it returns false.\n */\nexport function IsISRC(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISRC,\n      validator: {\n        validate: (value, args): boolean => isISRC(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an ISRC', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isLocale;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/*\n  = 3ALPHA              ; selected ISO 639 codes\n    *2(\"-\" 3ALPHA)      ; permanently reserved\n */\nvar extlang = '([A-Za-z]{3}(-[A-Za-z]{3}){0,2})';\n\n/*\n  = 2*3ALPHA            ; shortest ISO 639 code\n    [\"-\" extlang]       ; sometimes followed by\n                        ; extended language subtags\n  / 4ALPHA              ; or reserved for future use\n  / 5*8ALPHA            ; or registered language subtag\n */\nvar language = \"(([a-zA-Z]{2,3}(-\".concat(extlang, \")?)|([a-zA-Z]{5,8}))\");\n\n/*\n  = 4ALPHA              ; ISO 15924 code\n */\nvar script = '([A-Za-z]{4})';\n\n/*\n  = 2ALPHA              ; ISO 3166-1 code\n  / 3DIGIT              ; UN M.49 code\n */\nvar region = '([A-Za-z]{2}|\\\\d{3})';\n\n/*\n  = 5*8alphanum         ; registered variants\n  / (DIGIT 3alphanum)\n */\nvar variant = '([A-Za-z0-9]{5,8}|(\\\\d[A-Z-a-z0-9]{3}))';\n\n/*\n  = DIGIT               ; 0 - 9\n  / %x41-57             ; A - W\n  / %x59-5A             ; Y - Z\n  / %x61-77             ; a - w\n  / %x79-7A             ; y - z\n */\nvar singleton = '(\\\\d|[A-W]|[Y-Z]|[a-w]|[y-z])';\n\n/*\n  = singleton 1*(\"-\" (2*8alphanum))\n                        ; Single alphanumerics\n                        ; \"x\" reserved for private use\n */\nvar extension = \"(\".concat(singleton, \"(-[A-Za-z0-9]{2,8})+)\");\n\n/*\n  = \"x\" 1*(\"-\" (1*8alphanum))\n */\nvar privateuse = '(x(-[A-Za-z0-9]{1,8})+)';\n\n// irregular tags do not match the 'langtag' production and would not\n// otherwise be considered 'well-formed'. These tags are all valid, but\n// most are deprecated in favor of more modern subtags or subtag combination\n\nvar irregular = '((en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|' + '(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|' + '(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE))';\n\n// regular tags match the 'langtag' production, but their subtags are not\n// extended language or variant subtags: their meaning is defined by\n// their registration and all of these are deprecated in favor of a more\n// modern subtag or sequence of subtags\n\nvar regular = '((art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|' + '(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang))';\n\n/*\n  = irregular           ; non-redundant tags registered\n  / regular             ; during the RFC 3066 era\n\n */\nvar grandfathered = \"(\".concat(irregular, \"|\").concat(regular, \")\");\n\n/*\n  RFC 5646 defines delimitation of subtags via a hyphen:\n\n      \"Subtag\" refers to a specific section of a tag, delimited by a\n      hyphen, such as the subtags 'zh', 'Hant', and 'CN' in the tag \"zh-\n      Hant-CN\".  Examples of subtags in this document are enclosed in\n      single quotes ('Hant')\n\n  However, we need to add \"_\" to maintain the existing behaviour.\n */\nvar delimiter = '(-|_)';\n\n/*\n  = language\n    [\"-\" script]\n    [\"-\" region]\n    *(\"-\" variant)\n    *(\"-\" extension)\n    [\"-\" privateuse]\n */\nvar langtag = \"\".concat(language, \"(\").concat(delimiter).concat(script, \")?(\").concat(delimiter).concat(region, \")?(\").concat(delimiter).concat(variant, \")*(\").concat(delimiter).concat(extension, \")*(\").concat(delimiter).concat(privateuse, \")?\");\n\n/*\n  Regex implementation based on BCP RFC 5646\n  Tags for Identifying Languages\n  https://www.rfc-editor.org/rfc/rfc5646.html\n */\nvar languageTagRegex = new RegExp(\"(^\".concat(privateuse, \"$)|(^\").concat(grandfathered, \"$)|(^\").concat(langtag, \"$)\"));\nfunction isLocale(str) {\n  (0, _assertString.default)(str);\n  return languageTagRegex.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isLocaleValidator from 'validator/lib/isLocale';\n\nexport const IS_LOCALE = 'isLocale';\n\n/**\n * Check if the string is a locale.\n * If given value is not a string, then it returns false.\n */\nexport function isLocale(value: unknown): boolean {\n  return typeof value === 'string' && isLocaleValidator(value);\n}\n\n/**\n * Check if the string is a locale.\n * If given value is not a string, then it returns false.\n */\nexport function IsLocale(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_LOCALE,\n      validator: {\n        validate: (value, args): boolean => isLocale(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be locale', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMagnetURI;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar magnetURIComponent = /(?:^magnet:\\?|[^?&]&)xt(?:\\.1)?=urn:(?:(?:aich|bitprint|btih|ed2k|ed2khash|kzhash|md5|sha1|tree:tiger):[a-z0-9]{32}(?:[a-z0-9]{8})?|btmh:1220[a-z0-9]{64})(?:$|&)/i;\nfunction isMagnetURI(url) {\n  (0, _assertString.default)(url);\n  if (url.indexOf('magnet:?') !== 0) {\n    return false;\n  }\n  return magnetURIComponent.test(url);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMagnetURIValidator from 'validator/lib/isMagnetURI';\n\nexport const IS_MAGNET_URI = 'isMagnetURI';\n\n/**\n * Check if the string is a magnet uri format.\n * If given value is not a string, then it returns false.\n */\nexport function isMagnetURI(value: unknown): boolean {\n  return typeof value === 'string' && isMagnetURIValidator(value);\n}\n\n/**\n * Check if the string is a magnet uri format.\n * If given value is not a string, then it returns false.\n */\nexport function IsMagnetURI(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_MAGNET_URI,\n      validator: {\n        validate: (value, args): boolean => isMagnetURI(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be magnet uri format',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMimeType;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/*\n  Checks if the provided string matches to a correct Media type format (MIME type)\n\n  This function only checks is the string format follows the\n  established rules by the according RFC specifications.\n  This function supports 'charset' in textual media types\n  (https://tools.ietf.org/html/rfc6657).\n\n  This function does not check against all the media types listed\n  by the IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)\n  because of lightness purposes : it would require to include\n  all these MIME types in this library, which would weigh it\n  significantly. This kind of effort maybe is not worth for the use that\n  this function has in this entire library.\n\n  More information in the RFC specifications :\n  - https://tools.ietf.org/html/rfc2045\n  - https://tools.ietf.org/html/rfc2046\n  - https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n  - https://tools.ietf.org/html/rfc7231#section-3.1.1.5\n*/\n\n// Match simple MIME types\n// NB :\n//   Subtype length must not exceed 100 characters.\n//   This rule does not comply to the RFC specs (what is the max length ?).\nvar mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\\/[a-zA-Z0-9\\.\\-\\+_]{1,100}$/i; // eslint-disable-line max-len\n\n// Handle \"charset\" in \"text/*\"\nvar mimeTypeText = /^text\\/[a-zA-Z0-9\\.\\-\\+]{1,100};\\s?charset=(\"[a-zA-Z0-9\\.\\-\\+\\s]{0,70}\"|[a-zA-Z0-9\\.\\-\\+]{0,70})(\\s?\\([a-zA-Z0-9\\.\\-\\+\\s]{1,20}\\))?$/i; // eslint-disable-line max-len\n\n// Handle \"boundary\" in \"multipart/*\"\nvar mimeTypeMultipart = /^multipart\\/[a-zA-Z0-9\\.\\-\\+]{1,100}(;\\s?(boundary|charset)=(\"[a-zA-Z0-9\\.\\-\\+\\s]{0,70}\"|[a-zA-Z0-9\\.\\-\\+]{0,70})(\\s?\\([a-zA-Z0-9\\.\\-\\+\\s]{1,20}\\))?){0,2}$/i; // eslint-disable-line max-len\n\nfunction isMimeType(str) {\n  (0, _assertString.default)(str);\n  return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isMimeTypeValidator from 'validator/lib/isMimeType';\n\nexport const IS_MIME_TYPE = 'isMimeType';\n\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function isMimeType(value: unknown): boolean {\n  return typeof value === 'string' && isMimeTypeValidator(value);\n}\n\n/**\n * Check if the string matches to a valid MIME type format\n * If given value is not a string, then it returns false.\n */\nexport function IsMimeType(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_MIME_TYPE,\n      validator: {\n        validate: (value, args): boolean => isMimeType(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be MIME type format',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isOctal;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar octal = /^(0o)?[0-7]+$/i;\nfunction isOctal(str) {\n  (0, _assertString.default)(str);\n  return octal.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isOctalValidator from 'validator/lib/isOctal';\n\nexport const IS_OCTAL = 'isOctal';\n\n/**\n * Check if the string is a valid octal number.\n * If given value is not a string, then it returns false.\n */\nexport function isOctal(value: unknown): boolean {\n  return typeof value === 'string' && isOctalValidator(value);\n}\n\n/**\n * Check if the string is a valid octal number.\n * If given value is not a string, then it returns false.\n */\nexport function IsOctal(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_OCTAL,\n      validator: {\n        validate: (value, args): boolean => isOctal(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be valid octal number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPassportNumber;\nexports.locales = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * Reference:\n * https://en.wikipedia.org/ -- Wikipedia\n * https://docs.microsoft.com/en-us/microsoft-365/compliance/eu-passport-number -- EU Passport Number\n * https://countrycode.org/ -- Country Codes\n */\nvar passportRegexByCountryCode = {\n  AM: /^[A-Z]{2}\\d{7}$/,\n  // ARMENIA\n  AR: /^[A-Z]{3}\\d{6}$/,\n  // ARGENTINA\n  AT: /^[A-Z]\\d{7}$/,\n  // AUSTRIA\n  AU: /^[A-Z]\\d{7}$/,\n  // AUSTRALIA\n  AZ: /^[A-Z]{1}\\d{8}$/,\n  // AZERBAIJAN\n  BE: /^[A-Z]{2}\\d{6}$/,\n  // BELGIUM\n  BG: /^\\d{9}$/,\n  // BULGARIA\n  BR: /^[A-Z]{2}\\d{6}$/,\n  // BRAZIL\n  BY: /^[A-Z]{2}\\d{7}$/,\n  // BELARUS\n  CA: /^[A-Z]{2}\\d{6}$|^[A-Z]\\d{6}[A-Z]{2}$/,\n  // CANADA\n  CH: /^[A-Z]\\d{7}$/,\n  // SWITZERLAND\n  CN: /^G\\d{8}$|^E(?![IO])[A-Z0-9]\\d{7}$/,\n  // CHINA [G=Ordinary, E=Electronic] followed by 8-digits, or E followed by any UPPERCASE letter (except I and O) followed by 7 digits\n  CY: /^[A-Z](\\d{6}|\\d{8})$/,\n  // CYPRUS\n  CZ: /^\\d{8}$/,\n  // CZECH REPUBLIC\n  DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/,\n  // GERMANY\n  DK: /^\\d{9}$/,\n  // DENMARK\n  DZ: /^\\d{9}$/,\n  // ALGERIA\n  EE: /^([A-Z]\\d{7}|[A-Z]{2}\\d{7})$/,\n  // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits\n  ES: /^[A-Z0-9]{2}([A-Z0-9]?)\\d{6}$/,\n  // SPAIN\n  FI: /^[A-Z]{2}\\d{7}$/,\n  // FINLAND\n  FR: /^\\d{2}[A-Z]{2}\\d{5}$/,\n  // FRANCE\n  GB: /^\\d{9}$/,\n  // UNITED KINGDOM\n  GR: /^[A-Z]{2}\\d{7}$/,\n  // GREECE\n  HR: /^\\d{9}$/,\n  // CROATIA\n  HU: /^[A-Z]{2}(\\d{6}|\\d{7})$/,\n  // HUNGARY\n  IE: /^[A-Z0-9]{2}\\d{7}$/,\n  // IRELAND\n  IN: /^[A-Z]{1}-?\\d{7}$/,\n  // INDIA\n  ID: /^[A-C]\\d{7}$/,\n  // INDONESIA\n  IR: /^[A-Z]\\d{8}$/,\n  // IRAN\n  IS: /^(A)\\d{7}$/,\n  // ICELAND\n  IT: /^[A-Z0-9]{2}\\d{7}$/,\n  // ITALY\n  JM: /^[Aa]\\d{7}$/,\n  // JAMAICA\n  JP: /^[A-Z]{2}\\d{7}$/,\n  // JAPAN\n  KR: /^[MS]\\d{8}$/,\n  // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]\n  KZ: /^[a-zA-Z]\\d{7}$/,\n  // KAZAKHSTAN\n  LI: /^[a-zA-Z]\\d{5}$/,\n  // LIECHTENSTEIN\n  LT: /^[A-Z0-9]{8}$/,\n  // LITHUANIA\n  LU: /^[A-Z0-9]{8}$/,\n  // LUXEMBURG\n  LV: /^[A-Z0-9]{2}\\d{7}$/,\n  // LATVIA\n  LY: /^[A-Z0-9]{8}$/,\n  // LIBYA\n  MT: /^\\d{7}$/,\n  // MALTA\n  MZ: /^([A-Z]{2}\\d{7})|(\\d{2}[A-Z]{2}\\d{5})$/,\n  // MOZAMBIQUE\n  MY: /^[AHK]\\d{8}$/,\n  // MALAYSIA\n  MX: /^\\d{10,11}$/,\n  // MEXICO\n  NL: /^[A-Z]{2}[A-Z0-9]{6}\\d$/,\n  // NETHERLANDS\n  NZ: /^([Ll]([Aa]|[Dd]|[Ff]|[Hh])|[Ee]([Aa]|[Pp])|[Nn])\\d{6}$/,\n  // NEW ZEALAND\n  PH: /^([A-Z](\\d{6}|\\d{7}[A-Z]))|([A-Z]{2}(\\d{6}|\\d{7}))$/,\n  // PHILIPPINES\n  PK: /^[A-Z]{2}\\d{7}$/,\n  // PAKISTAN\n  PL: /^[A-Z]{2}\\d{7}$/,\n  // POLAND\n  PT: /^[A-Z]\\d{6}$/,\n  // PORTUGAL\n  RO: /^\\d{8,9}$/,\n  // ROMANIA\n  RU: /^\\d{9}$/,\n  // RUSSIAN FEDERATION\n  SE: /^\\d{8}$/,\n  // SWEDEN\n  SL: /^(P)[A-Z]\\d{7}$/,\n  // SLOVENIA\n  SK: /^[0-9A-Z]\\d{7}$/,\n  // SLOVAKIA\n  TH: /^[A-Z]{1,2}\\d{6,7}$/,\n  // THAILAND\n  TR: /^[A-Z]\\d{8}$/,\n  // TURKEY\n  UA: /^[A-Z]{2}\\d{6}$/,\n  // UKRAINE\n  US: /^\\d{9}$|^[A-Z]\\d{8}$/,\n  // UNITED STATES\n  ZA: /^[TAMD]\\d{8}$/ // SOUTH AFRICA\n};\nvar locales = exports.locales = Object.keys(passportRegexByCountryCode);\n\n/**\n * Check if str is a valid passport number\n * relative to provided ISO Country Code.\n *\n * @param {string} str\n * @param {string} countryCode\n * @return {boolean}\n */\nfunction isPassportNumber(str, countryCode) {\n  (0, _assertString.default)(str);\n  /** Remove All Whitespaces, Convert to UPPERCASE */\n  var normalizedStr = str.replace(/\\s/g, '').toUpperCase();\n  return countryCode.toUpperCase() in passportRegexByCountryCode && passportRegexByCountryCode[countryCode].test(normalizedStr);\n}", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPassportNumberValidator from 'validator/lib/isPassportNumber';\n\nexport const IS_PASSPORT_NUMBER = 'isPassportNumber';\n\n/**\n * Check if the string is a valid passport number relative to a specific country code.\n * If given value is not a string, then it returns false.\n */\nexport function isPassportNumber(value: unknown, countryCode: string): boolean {\n  return typeof value === 'string' && isPassportNumberValidator(value, countryCode);\n}\n\n/**\n * Check if the string is a valid passport number relative to a specific country code.\n * If given value is not a string, then it returns false.\n */\nexport function IsPassportNumber(countryCode: string, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_PASSPORT_NUMBER,\n      constraints: [countryCode],\n      validator: {\n        validate: (value, args): boolean => isPassportNumber(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be valid passport number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isPostalCode;\nexports.locales = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// common patterns\nvar threeDigit = /^\\d{3}$/;\nvar fourDigit = /^\\d{4}$/;\nvar fiveDigit = /^\\d{5}$/;\nvar sixDigit = /^\\d{6}$/;\nvar patterns = {\n  AD: /^AD\\d{3}$/,\n  AT: fourDigit,\n  AU: fourDigit,\n  AZ: /^AZ\\d{4}$/,\n  BA: /^([7-8]\\d{4}$)/,\n  BD: /^([1-8][0-9]{3}|9[0-4][0-9]{2})$/,\n  BE: fourDigit,\n  BG: fourDigit,\n  BR: /^\\d{5}-?\\d{3}$/,\n  BY: /^2[1-4]\\d{4}$/,\n  CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\n  CH: fourDigit,\n  CN: /^(0[1-7]|1[012356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[1-5]|8[1345]|9[09])\\d{4}$/,\n  CO: /^(05|08|11|13|15|17|18|19|20|23|25|27|41|44|47|50|52|54|63|66|68|70|73|76|81|85|86|88|91|94|95|97|99)(\\d{4})$/,\n  CZ: /^\\d{3}\\s?\\d{2}$/,\n  DE: fiveDigit,\n  DK: fourDigit,\n  DO: fiveDigit,\n  DZ: fiveDigit,\n  EE: fiveDigit,\n  ES: /^(5[0-2]{1}|[0-4]{1}\\d{1})\\d{3}$/,\n  FI: fiveDigit,\n  FR: /^(?:(?:0[1-9]|[1-8]\\d|9[0-5])\\d{3}|97[1-46]\\d{2})$/,\n  GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\n  GR: /^\\d{3}\\s?\\d{2}$/,\n  HR: /^([1-5]\\d{4}$)/,\n  HT: /^HT\\d{4}$/,\n  HU: fourDigit,\n  ID: fiveDigit,\n  IE: /^(?!.*(?:o))[A-Za-z]\\d[\\dw]\\s\\w{4}$/i,\n  IL: /^(\\d{5}|\\d{7})$/,\n  IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,\n  IR: /^(?!(\\d)\\1{3})[13-9]{4}[1346-9][013-9]{5}$/,\n  IS: threeDigit,\n  IT: fiveDigit,\n  JP: /^\\d{3}\\-\\d{4}$/,\n  KE: fiveDigit,\n  KR: /^(\\d{5}|\\d{6})$/,\n  LI: /^(948[5-9]|949[0-7])$/,\n  LT: /^LT\\-\\d{5}$/,\n  LU: fourDigit,\n  LV: /^LV\\-\\d{4}$/,\n  LK: fiveDigit,\n  MG: threeDigit,\n  MX: fiveDigit,\n  MT: /^[A-Za-z]{3}\\s{0,1}\\d{4}$/,\n  MY: fiveDigit,\n  NL: /^[1-9]\\d{3}\\s?(?!sa|sd|ss)[a-z]{2}$/i,\n  NO: fourDigit,\n  NP: /^(10|21|22|32|33|34|44|45|56|57)\\d{3}$|^(977)$/i,\n  NZ: fourDigit,\n  // https://www.pakpost.gov.pk/postcodes.php\n  PK: fiveDigit,\n  PL: /^\\d{2}\\-\\d{3}$/,\n  PR: /^00[679]\\d{2}([ -]\\d{4})?$/,\n  PT: /^\\d{4}\\-\\d{3}?$/,\n  RO: sixDigit,\n  RU: sixDigit,\n  SA: fiveDigit,\n  SE: /^[1-9]\\d{2}\\s?\\d{2}$/,\n  SG: sixDigit,\n  SI: fourDigit,\n  SK: /^\\d{3}\\s?\\d{2}$/,\n  TH: fiveDigit,\n  TN: fourDigit,\n  TW: /^\\d{3}(\\d{2,3})?$/,\n  UA: fiveDigit,\n  US: /^\\d{5}(-\\d{4})?$/,\n  ZA: fourDigit,\n  ZM: fiveDigit\n};\nvar locales = exports.locales = Object.keys(patterns);\nfunction isPostalCode(str, locale) {\n  (0, _assertString.default)(str);\n  if (locale in patterns) {\n    return patterns[locale].test(str);\n  } else if (locale === 'any') {\n    for (var key in patterns) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if (patterns.hasOwnProperty(key)) {\n        var pattern = patterns[key];\n        if (pattern.test(str)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isPostalCodeValidator from 'validator/lib/isPostalCode';\nimport * as ValidatorJS from 'validator';\n\nexport const IS_POSTAL_CODE = 'isPostalCode';\n\n/**\n * Check if the string is a postal code, in the specified locale.\n * If given value is not a string, then it returns false.\n */\nexport function isPostalCode(value: unknown, locale: 'any' | ValidatorJS.PostalCodeLocale): boolean {\n  return typeof value === 'string' && isPostalCodeValidator(value, locale);\n}\n\n/**\n * Check if the string is a postal code, in the specified locale.\n * If given value is not a string, then it returns false.\n */\nexport function IsPostalCode(\n  locale?: 'any' | ValidatorJS.PostalCodeLocale,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_POSTAL_CODE,\n      constraints: [locale],\n      validator: {\n        validate: (value, args): boolean => isPostalCode(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a postal code', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isRFC3339;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/* Based on https://tools.ietf.org/html/rfc3339#section-5.6 */\n\nvar dateFullYear = /[0-9]{4}/;\nvar dateMonth = /(0[1-9]|1[0-2])/;\nvar dateMDay = /([12]\\d|0[1-9]|3[01])/;\nvar timeHour = /([01][0-9]|2[0-3])/;\nvar timeMinute = /[0-5][0-9]/;\nvar timeSecond = /([0-5][0-9]|60)/;\nvar timeSecFrac = /(\\.[0-9]+)?/;\nvar timeNumOffset = new RegExp(\"[-+]\".concat(timeHour.source, \":\").concat(timeMinute.source));\nvar timeOffset = new RegExp(\"([zZ]|\".concat(timeNumOffset.source, \")\"));\nvar partialTime = new RegExp(\"\".concat(timeHour.source, \":\").concat(timeMinute.source, \":\").concat(timeSecond.source).concat(timeSecFrac.source));\nvar fullDate = new RegExp(\"\".concat(dateFullYear.source, \"-\").concat(dateMonth.source, \"-\").concat(dateMDay.source));\nvar fullTime = new RegExp(\"\".concat(partialTime.source).concat(timeOffset.source));\nvar rfc3339 = new RegExp(\"^\".concat(fullDate.source, \"[ tT]\").concat(fullTime.source, \"$\"));\nfunction isRFC3339(str) {\n  (0, _assertString.default)(str);\n  return rfc3339.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isRFC3339Validator from 'validator/lib/isRFC3339';\n\nexport const IS_RFC_3339 = 'isRFC3339';\n\n/**\n * Check if the string is a valid RFC 3339 date.\n * If given value is not a string, then it returns false.\n */\nexport function isRFC3339(value: unknown): boolean {\n  return typeof value === 'string' && isRFC3339Validator(value);\n}\n\n/**\n * Check if the string is a valid RFC 3339 date.\n * If given value is not a string, then it returns false.\n */\nexport function IsRFC3339(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_RFC_3339,\n      validator: {\n        validate: (value, args): boolean => isRFC3339(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be RFC 3339 date', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isRgbColor;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); } /* eslint-disable prefer-rest-params */\nvar rgbColor = /^rgb\\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\)$/;\nvar rgbaColor = /^rgba\\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\\.\\d\\d?|1(\\.0)?|0(\\.0)?)\\)$/;\nvar rgbColorPercent = /^rgb\\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\\)$/;\nvar rgbaColorPercent = /^rgba\\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\\.\\d\\d?|1(\\.0)?|0(\\.0)?)\\)$/;\nvar startsWithRgb = /^rgba?/;\nfunction isRgbColor(str, options) {\n  (0, _assertString.default)(str);\n  // default options to true for percent and false for spaces\n  var allowSpaces = false;\n  var includePercentValues = true;\n  if (_typeof(options) !== 'object') {\n    if (arguments.length >= 2) {\n      includePercentValues = arguments[1];\n    }\n  } else {\n    allowSpaces = options.allowSpaces !== undefined ? options.allowSpaces : allowSpaces;\n    includePercentValues = options.includePercentValues !== undefined ? options.includePercentValues : includePercentValues;\n  }\n  if (allowSpaces) {\n    // make sure it starts with continous rgba? without spaces before stripping\n    if (!startsWithRgb.test(str)) {\n      return false;\n    }\n    // strip all whitespace\n    str = str.replace(/\\s/g, '');\n  }\n  if (!includePercentValues) {\n    return rgbColor.test(str) || rgbaColor.test(str);\n  }\n  return rgbColor.test(str) || rgbaColor.test(str) || rgbColorPercent.test(str) || rgbaColorPercent.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isRgbColorValidator from 'validator/lib/isRgbColor';\n\nexport const IS_RGB_COLOR = 'isRgbColor';\n\n/**\n * Check if the string is a rgb or rgba color.\n * `includePercentValues` defaults to true. If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false.\n * If given value is not a string, then it returns false.\n */\nexport function isRgbColor(value: unknown, includePercentValues?: boolean): boolean {\n  return typeof value === 'string' && isRgbColorValidator(value, includePercentValues);\n}\n\n/**\n * Check if the string is a rgb or rgba color.\n * `includePercentValues` defaults to true. If you don't want to allow to set rgb or rgba values with percents, like rgb(5%,5%,5%), or rgba(90%,90%,90%,.3), then set it to false.\n * If given value is not a string, then it returns false.\n */\nexport function IsRgbColor(includePercentValues?: boolean, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_RGB_COLOR,\n      constraints: [includePercentValues],\n      validator: {\n        validate: (value, args): boolean => isRgbColor(value, args?.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be RGB color', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = multilineRegexp;\n/**\n * Build RegExp object from an array\n * of multiple/multi-line regexp parts\n *\n * @param {string[]} parts\n * @param {string} flags\n * @return {object} - RegExp object\n */\nfunction multilineRegexp(parts, flags) {\n  var regexpAsStringLiteral = parts.join('');\n  return new RegExp(regexpAsStringLiteral, flags);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isSemVer;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _multilineRegex = _interopRequireDefault(require(\"./util/multilineRegex\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n/**\n * Regular Expression to match\n * semantic versioning (SemVer)\n * built from multi-line, multi-parts regexp\n * Reference: https://semver.org/\n */\nvar semanticVersioningRegex = (0, _multilineRegex.default)(['^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)', '(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-z-][0-9a-z-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-z-][0-9a-z-]*))*))', '?(?:\\\\+([0-9a-z-]+(?:\\\\.[0-9a-z-]+)*))?$'], 'i');\nfunction isSemVer(str) {\n  (0, _assertString.default)(str);\n  return semanticVersioningRegex.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isSemVerValidator from 'validator/lib/isSemVer';\n\nexport const IS_SEM_VER = 'isSemVer';\n\n/**\n * Check if the string is a Semantic Versioning Specification (SemVer).\n * If given value is not a string, then it returns false.\n */\nexport function isSemVer(value: unknown): boolean {\n  return typeof value === 'string' && isSemVerValidator(value);\n}\n\n/**\n * Check if the string is a Semantic Versioning Specification (SemVer).\n * If given value is not a string, then it returns false.\n */\nexport function IsSemVer(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_SEM_VER,\n      validator: {\n        validate: (value, args): boolean => isSemVer(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a Semantic Versioning Specification',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toDate;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction toDate(date) {\n  (0, _assertString.default)(date);\n  date = Date.parse(date);\n  return !isNaN(date) ? new Date(date) : null;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toInt;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction toInt(str, radix) {\n  (0, _assertString.default)(str);\n  return parseInt(str, radix || 10);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toBoolean;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction toBoolean(str, strict) {\n  (0, _assertString.default)(str);\n  if (strict) {\n    return str === '1' || /^true$/i.test(str);\n  }\n  return str !== '0' && !/^false$/i.test(str) && str !== '';\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = equals;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction equals(str, comparison) {\n  (0, _assertString.default)(str);\n  return str === comparison;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIPRange;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _isIP = _interopRequireDefault(require(\"./isIP\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar subnetMaybe = /^\\d{1,3}$/;\nvar v4Subnet = 32;\nvar v6Subnet = 128;\nfunction isIPRange(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  (0, _assertString.default)(str);\n  var parts = str.split('/');\n\n  // parts[0] -> ip, parts[1] -> subnet\n  if (parts.length !== 2) {\n    return false;\n  }\n  if (!subnetMaybe.test(parts[1])) {\n    return false;\n  }\n\n  // Disallow preceding 0 i.e. 01, 02, ...\n  if (parts[1].length > 1 && parts[1].startsWith('0')) {\n    return false;\n  }\n  var isValidIP = (0, _isIP.default)(parts[0], version);\n  if (!isValidIP) {\n    return false;\n  }\n\n  // Define valid subnet according to IP's version\n  var expectedSubnet = null;\n  switch (String(version)) {\n    case '4':\n      expectedSubnet = v4Subnet;\n      break;\n    case '6':\n      expectedSubnet = v6Subnet;\n      break;\n    default:\n      expectedSubnet = (0, _isIP.default)(parts[0], '6') ? v6Subnet : v4Subnet;\n  }\n  return parts[1] <= expectedSubnet && parts[1] >= 0;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isDate;\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nvar default_date_options = {\n  format: 'YYYY/MM/DD',\n  delimiters: ['/', '-'],\n  strictMode: false\n};\nfunction isValidFormat(format) {\n  return /(^(y{4}|y{2})[.\\/-](m{1,2})[.\\/-](d{1,2})$)|(^(m{1,2})[.\\/-](d{1,2})[.\\/-]((y{4}|y{2})$))|(^(d{1,2})[.\\/-](m{1,2})[.\\/-]((y{4}|y{2})$))/gi.test(format);\n}\nfunction zip(date, format) {\n  var zippedArr = [],\n    len = Math.max(date.length, format.length);\n  for (var i = 0; i < len; i++) {\n    zippedArr.push([date[i], format[i]]);\n  }\n  return zippedArr;\n}\nfunction isDate(input, options) {\n  if (typeof options === 'string') {\n    // Allow backward compatibility for old format isDate(input [, format])\n    options = (0, _merge.default)({\n      format: options\n    }, default_date_options);\n  } else {\n    options = (0, _merge.default)(options, default_date_options);\n  }\n  if (typeof input === 'string' && isValidFormat(options.format)) {\n    if (options.strictMode && input.length !== options.format.length) return false;\n    var formatDelimiter = options.delimiters.find(function (delimiter) {\n      return options.format.indexOf(delimiter) !== -1;\n    });\n    var dateDelimiter = options.strictMode ? formatDelimiter : options.delimiters.find(function (delimiter) {\n      return input.indexOf(delimiter) !== -1;\n    });\n    var dateAndFormat = zip(input.split(dateDelimiter), options.format.toLowerCase().split(formatDelimiter));\n    var dateObj = {};\n    var _iterator = _createForOfIteratorHelper(dateAndFormat),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          dateWord = _step$value[0],\n          formatWord = _step$value[1];\n        if (!dateWord || !formatWord || dateWord.length !== formatWord.length) {\n          return false;\n        }\n        dateObj[formatWord.charAt(0)] = dateWord;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var fullYear = dateObj.y;\n\n    // Check if the year starts with a hyphen\n    if (fullYear.startsWith('-')) {\n      return false; // Hyphen before year is not allowed\n    }\n    if (dateObj.y.length === 2) {\n      var parsedYear = parseInt(dateObj.y, 10);\n      if (isNaN(parsedYear)) {\n        return false;\n      }\n      var currentYearLastTwoDigits = new Date().getFullYear() % 100;\n      if (parsedYear < currentYearLastTwoDigits) {\n        fullYear = \"20\".concat(dateObj.y);\n      } else {\n        fullYear = \"19\".concat(dateObj.y);\n      }\n    }\n    var month = dateObj.m;\n    if (dateObj.m.length === 1) {\n      month = \"0\".concat(dateObj.m);\n    }\n    var day = dateObj.d;\n    if (dateObj.d.length === 1) {\n      day = \"0\".concat(dateObj.d);\n    }\n    return new Date(\"\".concat(fullYear, \"-\").concat(month, \"-\").concat(day, \"T00:00:00.000Z\")).getUTCDate() === +dateObj.d;\n  }\n  if (!options.strictMode) {\n    return Object.prototype.toString.call(input) === '[object Date]' && isFinite(input);\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isTime;\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar default_time_options = {\n  hourFormat: 'hour24',\n  mode: 'default'\n};\nvar formats = {\n  hour24: {\n    default: /^([01]?[0-9]|2[0-3]):([0-5][0-9])$/,\n    withSeconds: /^([01]?[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])$/,\n    withOptionalSeconds: /^([01]?[0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?$/\n  },\n  hour12: {\n    default: /^(0?[1-9]|1[0-2]):([0-5][0-9]) (A|P)M$/,\n    withSeconds: /^(0?[1-9]|1[0-2]):([0-5][0-9]):([0-5][0-9]) (A|P)M$/,\n    withOptionalSeconds: /^(0?[1-9]|1[0-2]):([0-5][0-9])(?::([0-5][0-9]))? (A|P)M$/\n  }\n};\nfunction isTime(input, options) {\n  options = (0, _merge.default)(options, default_time_options);\n  if (typeof input !== 'string') return false;\n  return formats[options.hourFormat][options.mode].test(input);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAbaRouting;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// http://www.brainjar.com/js/validation/\n// https://www.aba.com/news-research/research-analysis/routing-number-policy-procedures\n// series reserved for future use are excluded\nvar isRoutingReg = /^(?!(1[3-9])|(20)|(3[3-9])|(4[0-9])|(5[0-9])|(60)|(7[3-9])|(8[1-9])|(9[0-2])|(9[3-9]))[0-9]{9}$/;\nfunction isAbaRouting(str) {\n  (0, _assertString.default)(str);\n  if (!isRoutingReg.test(str)) return false;\n  var checkSumVal = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (i % 3 === 0) checkSumVal += str[i] * 3;else if (i % 3 === 1) checkSumVal += str[i] * 7;else checkSumVal += str[i] * 1;\n  }\n  return checkSumVal % 10 === 0;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIMEI;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar imeiRegexWithoutHyphens = /^[0-9]{15}$/;\nvar imeiRegexWithHyphens = /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/;\nfunction isIMEI(str, options) {\n  (0, _assertString.default)(str);\n  options = options || {};\n\n  // default regex for checking imei is the one without hyphens\n\n  var imeiRegex = imeiRegexWithoutHyphens;\n  if (options.allow_hyphens) {\n    imeiRegex = imeiRegexWithHyphens;\n  }\n  if (!imeiRegex.test(str)) {\n    return false;\n  }\n  str = str.replace(/-/g, '');\n  var sum = 0,\n    mul = 2,\n    l = 14;\n  for (var i = 0; i < l; i++) {\n    var digit = str.substring(l - i - 1, l - i);\n    var tp = parseInt(digit, 10) * mul;\n    if (tp >= 10) {\n      sum += tp % 10 + 1;\n    } else {\n      sum += tp;\n    }\n    if (mul === 1) {\n      mul += 1;\n    } else {\n      mul -= 1;\n    }\n  }\n  var chk = (10 - sum % 10) % 10;\n  if (chk !== parseInt(str.substring(14, 15), 10)) {\n    return false;\n  }\n  return true;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMD5;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar md5 = /^[a-f0-9]{32}$/;\nfunction isMD5(str) {\n  (0, _assertString.default)(str);\n  return md5.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isEmpty;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar default_is_empty_options = {\n  ignore_whitespace: false\n};\nfunction isEmpty(str, options) {\n  (0, _assertString.default)(str);\n  options = (0, _merge.default)(options, default_is_empty_options);\n  return (options.ignore_whitespace ? str.trim().length : str.length) === 0;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isULID;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isULID(str) {\n  (0, _assertString.default)(str);\n  return /^[0-7][0-9A-HJKMNP-TV-Z]{25}$/i.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isAfter;\nvar _toDate = _interopRequireDefault(require(\"./toDate\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction isAfter(date, options) {\n  // For backwards compatibility:\n  // isAfter(str [, date]), i.e. `options` could be used as argument for the legacy `date`\n  var comparisonDate = (_typeof(options) === 'object' ? options.comparisonDate : options) || Date().toString();\n  var comparison = (0, _toDate.default)(comparisonDate);\n  var original = (0, _toDate.default)(date);\n  return !!(original && comparison && original > comparison);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBefore;\nvar _toDate = _interopRequireDefault(require(\"./toDate\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction isBefore(date, options) {\n  // For backwards compatibility:\n  // isBefore(str [, date]), i.e. `options` could be used as argument for the legacy `date`\n  var comparisonDate = (_typeof(options) === 'object' ? options.comparisonDate : options) || Date().toString();\n  var comparison = (0, _toDate.default)(comparisonDate);\n  var original = (0, _toDate.default)(date);\n  return !!(original && comparison && original < comparison);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIn;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _toString = _interopRequireDefault(require(\"./util/toString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction isIn(str, options) {\n  (0, _assertString.default)(str);\n  var i;\n  if (Object.prototype.toString.call(options) === '[object Array]') {\n    var array = [];\n    for (i in options) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if ({}.hasOwnProperty.call(options, i)) {\n        array[i] = (0, _toString.default)(options[i]);\n      }\n    }\n    return array.indexOf(str) >= 0;\n  } else if (_typeof(options) === 'object') {\n    return options.hasOwnProperty(str);\n  } else if (options && typeof options.indexOf === 'function') {\n    return options.indexOf(str) >= 0;\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.iso7064Check = iso7064Check;\nexports.luhnCheck = luhnCheck;\nexports.reverseMultiplyAndSum = reverseMultiplyAndSum;\nexports.verhoeffCheck = verhoeffCheck;\n/**\n * Algorithmic validation functions\n * May be used as is or implemented in the workflow of other validators.\n */\n\n/*\n * ISO 7064 validation function\n * Called with a string of numbers (incl. check digit)\n * to validate according to ISO 7064 (MOD 11, 10).\n */\nfunction iso7064Check(str) {\n  var checkvalue = 10;\n  for (var i = 0; i < str.length - 1; i++) {\n    checkvalue = (parseInt(str[i], 10) + checkvalue) % 10 === 0 ? 10 * 2 % 11 : (parseInt(str[i], 10) + checkvalue) % 10 * 2 % 11;\n  }\n  checkvalue = checkvalue === 1 ? 0 : 11 - checkvalue;\n  return checkvalue === parseInt(str[10], 10);\n}\n\n/*\n * Luhn (mod 10) validation function\n * Called with a string of numbers (incl. check digit)\n * to validate according to the Luhn algorithm.\n */\nfunction luhnCheck(str) {\n  var checksum = 0;\n  var second = false;\n  for (var i = str.length - 1; i >= 0; i--) {\n    if (second) {\n      var product = parseInt(str[i], 10) * 2;\n      if (product > 9) {\n        // sum digits of product and add to checksum\n        checksum += product.toString().split('').map(function (a) {\n          return parseInt(a, 10);\n        }).reduce(function (a, b) {\n          return a + b;\n        }, 0);\n      } else {\n        checksum += product;\n      }\n    } else {\n      checksum += parseInt(str[i], 10);\n    }\n    second = !second;\n  }\n  return checksum % 10 === 0;\n}\n\n/*\n * Reverse TIN multiplication and summation helper function\n * Called with an array of single-digit integers and a base multiplier\n * to calculate the sum of the digits multiplied in reverse.\n * Normally used in variations of MOD 11 algorithmic checks.\n */\nfunction reverseMultiplyAndSum(digits, base) {\n  var total = 0;\n  for (var i = 0; i < digits.length; i++) {\n    total += digits[i] * (base - i);\n  }\n  return total;\n}\n\n/*\n * Verhoeff validation helper function\n * Called with a string of numbers\n * to validate according to the Verhoeff algorithm.\n */\nfunction verhoeffCheck(str) {\n  var d_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]];\n  var p_table = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]];\n\n  // Copy (to prevent replacement) and reverse\n  var str_copy = str.split('').reverse().join('');\n  var checksum = 0;\n  for (var i = 0; i < str_copy.length; i++) {\n    checksum = d_table[checksum][p_table[i % 8][parseInt(str_copy[i], 10)]];\n  }\n  return checksum === 0;\n}", "\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isTaxID;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar algorithms = _interopRequireWildcard(require(\"./util/algorithms\"));\nvar _isDate = _interopRequireDefault(require(\"./isDate\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\n * TIN Validation\n * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.\n *\n * EU-UK:\n * National TIN validity is calculated using public algorithms as made available by DG TAXUD.\n *\n * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.\n *\n * US:\n * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,\n *  is used to identify a business entity.\n *\n * NOTES:\n *  - Prefix 47 is being reserved for future use\n *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.\n *\n * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`\n * for more information.\n */\n\n// Locale functions\n\n/*\n * bg-BG validation function\n * (Edinen gra\u017Edanski nomer (EGN/\u0415\u0413\u041D), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last) digit\n */\nfunction bgBgCheck(tin) {\n  // Extract full year, normalize month and check birth date validity\n  var century_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 40) {\n    month -= 40;\n    century_year = \"20\".concat(century_year);\n  } else if (month > 20) {\n    month -= 20;\n    century_year = \"18\".concat(century_year);\n  } else {\n    century_year = \"19\".concat(century_year);\n  }\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n  var date = \"\".concat(century_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n\n  // Calculate checksum by multiplying digits with fixed values\n  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n  var checksum = 0;\n  for (var i = 0; i < multip_lookup.length; i++) {\n    checksum += digits[i] * multip_lookup[i];\n  }\n  checksum = checksum % 11 === 10 ? 0 : checksum % 11;\n  return checksum === digits[9];\n}\n\n/**\n * Check if an input is a valid Canadian SIN (Social Insurance Number)\n *\n * The Social Insurance Number (SIN) is a 9 digit number that\n * you need to work in Canada or to have access to government programs and benefits.\n *\n * https://en.wikipedia.org/wiki/Social_Insurance_Number\n * https://www.canada.ca/en/employment-social-development/services/sin.html\n * https://www.codercrunch.com/challenge/819302488/sin-validator\n *\n * @param {string} input\n * @return {boolean}\n */\nfunction isCanadianSIN(input) {\n  var digitsArray = input.split('');\n  var even = digitsArray.filter(function (_, idx) {\n    return idx % 2;\n  }).map(function (i) {\n    return Number(i) * 2;\n  }).join('').split('');\n  var total = digitsArray.filter(function (_, idx) {\n    return !(idx % 2);\n  }).concat(even).map(function (i) {\n    return Number(i);\n  }).reduce(function (acc, cur) {\n    return acc + cur;\n  });\n  return total % 10 === 0;\n}\n\n/*\n * cs-CZ validation function\n * (Rodn\u00E9 \u010D\u00EDslo (R\u010C), persons only)\n * Checks if birth date (first six digits) is valid and divisibility by 11\n * Material not in DG TAXUD document sourced from:\n * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`\n * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`\n */\nfunction csCzCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n\n  // Extract full year from TIN length\n  var full_year = parseInt(tin.slice(0, 2), 10);\n  if (tin.length === 10) {\n    if (full_year < 54) {\n      full_year = \"20\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n  } else {\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n    if (full_year < 54) {\n      full_year = \"19\".concat(full_year);\n    } else {\n      return false; // No 18XX years seen in any of the resources\n    }\n  }\n  // Add missing zero if needed\n  if (full_year.length === 3) {\n    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');\n  }\n\n  // Extract month from TIN and normalize\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 50) {\n    month -= 50;\n  }\n  if (month > 20) {\n    // Month-plus-twenty was only introduced in 2004\n    if (parseInt(full_year, 10) < 2004) {\n      return false;\n    }\n    month -= 20;\n  }\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Verify divisibility by 11\n  if (tin.length === 10) {\n    if (parseInt(tin, 10) % 11 !== 0) {\n      // Some numbers up to and including 1985 are still valid if\n      // check (last) digit equals 0 and modulo of first 9 digits equals 10\n      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;\n      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {\n        if (parseInt(tin.slice(9), 10) !== 0) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/*\n * de-AT validation function\n * (Abgabenkontonummer, persons/entities)\n * Verify TIN validity by calling luhnCheck()\n */\nfunction deAtCheck(tin) {\n  return algorithms.luhnCheck(tin);\n}\n\n/*\n * de-DE validation function\n * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)\n * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit\n * Partial implementation of spec (same result with both algorithms always)\n */\nfunction deDeCheck(tin) {\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n\n  // Fill array with strings of number positions\n  var occurrences = [];\n  for (var i = 0; i < digits.length - 1; i++) {\n    occurrences.push('');\n    for (var j = 0; j < digits.length - 1; j++) {\n      if (digits[i] === digits[j]) {\n        occurrences[i] += j;\n      }\n    }\n  }\n\n  // Remove digits with one occurrence and test for only one duplicate/triplicate\n  occurrences = occurrences.filter(function (a) {\n    return a.length > 1;\n  });\n  if (occurrences.length !== 2 && occurrences.length !== 3) {\n    return false;\n  }\n\n  // In case of triplicate value only two digits are allowed next to each other\n  if (occurrences[0].length === 3) {\n    var trip_locations = occurrences[0].split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var recurrent = 0; // Amount of neighbor occurrences\n    for (var _i = 0; _i < trip_locations.length - 1; _i++) {\n      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {\n        recurrent += 1;\n      }\n    }\n    if (recurrent === 2) {\n      return false;\n    }\n  }\n  return algorithms.iso7064Check(tin);\n}\n\n/*\n * dk-DK validation function\n * (CPR-nummer (personnummer), persons only)\n * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,\n * and calculates check (last) digit\n */\nfunction dkDkCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n\n  // Extract year, check if valid for given century digit and add century\n  var year = parseInt(tin.slice(4, 6), 10);\n  var century_digit = tin.slice(6, 7);\n  switch (century_digit) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n      year = \"19\".concat(year);\n      break;\n    case '4':\n    case '9':\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else {\n        year = \"19\".concat(year);\n      }\n      break;\n    default:\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else if (year > 58) {\n        year = \"18\".concat(year);\n      } else {\n        return false;\n      }\n      break;\n  }\n  // Add missing zero if needed\n  if (year.length === 3) {\n    year = [year.slice(0, 2), '0', year.slice(2)].join('');\n  }\n  // Check date validity\n  var date = \"\".concat(year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 4;\n  // Multiply by weight and add to checksum\n  for (var i = 0; i < 9; i++) {\n    checksum += digits[i] * weight;\n    weight -= 1;\n    if (weight === 1) {\n      weight = 7;\n    }\n  }\n  checksum %= 11;\n  if (checksum === 1) {\n    return false;\n  }\n  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;\n}\n\n/*\n * el-CY validation function\n * (Arithmos Forologikou Mitroou (AFM/\u0391\u03A6\u039C), persons only)\n * Verify TIN validity by calculating ASCII value of check (last) character\n */\nfunction elCyCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.slice(0, 8).split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  // add digits in even places\n  for (var i = 1; i < digits.length; i += 2) {\n    checksum += digits[i];\n  }\n\n  // add digits in odd places\n  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {\n    if (digits[_i2] < 2) {\n      checksum += 1 - digits[_i2];\n    } else {\n      checksum += 2 * (digits[_i2] - 2) + 5;\n      if (digits[_i2] > 4) {\n        checksum += 2;\n      }\n    }\n  }\n  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);\n}\n\n/*\n * el-GR validation function\n * (Arithmos Forologikou Mitroou (AFM/\u0391\u03A6\u039C), persons/entities)\n * Verify TIN validity by calculating check (last) digit\n * Algorithm not in DG TAXUD document- sourced from:\n * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`\n */\nfunction elGrCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  for (var i = 0; i < 8; i++) {\n    checksum += digits[i] * Math.pow(2, 8 - i);\n  }\n  return checksum % 11 % 10 === digits[8];\n}\n\n/*\n * en-GB validation function (should go here if needed)\n * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),\n * persons/entities respectively)\n */\n\n/*\n * en-IE validation function\n * (Personal Public Service Number (PPS No), persons only)\n * Verify TIN validity by calculating check (second to last) character\n */\nfunction enIeCheck(tin) {\n  var checksum = algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8);\n  if (tin.length === 9 && tin[8] !== 'W') {\n    checksum += (tin[8].charCodeAt(0) - 64) * 9;\n  }\n  checksum %= 23;\n  if (checksum === 0) {\n    return tin[7].toUpperCase() === 'W';\n  }\n  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);\n}\n\n// Valid US IRS campus prefixes\nvar enUsCampusPrefix = {\n  andover: ['10', '12'],\n  atlanta: ['60', '67'],\n  austin: ['50', '53'],\n  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],\n  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],\n  fresno: ['15', '24'],\n  internet: ['20', '26', '27', '45', '46', '47'],\n  kansas: ['40', '44'],\n  memphis: ['94', '95'],\n  ogden: ['80', '90'],\n  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],\n  sba: ['31']\n};\n\n// Return an array of all US IRS campus prefixes\nfunction enUsGetPrefixes() {\n  var prefixes = [];\n  for (var location in enUsCampusPrefix) {\n    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n    // istanbul ignore else\n    if (enUsCampusPrefix.hasOwnProperty(location)) {\n      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));\n    }\n  }\n  return prefixes;\n}\n\n/*\n * en-US validation function\n * Verify that the TIN starts with a valid IRS campus prefix\n */\nfunction enUsCheck(tin) {\n  return enUsGetPrefixes().indexOf(tin.slice(0, 2)) !== -1;\n}\n\n/*\n * es-AR validation function\n * Clave \u00DAnica de Identificaci\u00F3n Tributaria (CUIT/CUIL)\n * Sourced from:\n * - https://servicioscf.afip.gob.ar/publico/abc/ABCpaso2.aspx?id_nivel1=3036&id_nivel2=3040&p=Conceptos%20b%C3%A1sicos\n * - https://es.wikipedia.org/wiki/Clave_%C3%9Anica_de_Identificaci%C3%B3n_Tributaria\n */\n\nfunction esArCheck(tin) {\n  var accum = 0;\n  var digits = tin.split('');\n  var digit = parseInt(digits.pop(), 10);\n  for (var i = 0; i < digits.length; i++) {\n    accum += digits[9 - i] * (2 + i % 6);\n  }\n  var verif = 11 - accum % 11;\n  if (verif === 11) {\n    verif = 0;\n  } else if (verif === 10) {\n    verif = 9;\n  }\n  return digit === verif;\n}\n\n/*\n * es-ES validation function\n * (Documento Nacional de Identidad (DNI)\n * or N\u00FAmero de Identificaci\u00F3n de Extranjero (NIE), persons only)\n * Verify TIN validity by calculating check (last) character\n */\nfunction esEsCheck(tin) {\n  // Split characters into an array for further processing\n  var chars = tin.toUpperCase().split('');\n\n  // Replace initial letter if needed\n  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {\n    var lead_replace = 0;\n    switch (chars[0]) {\n      case 'Y':\n        lead_replace = 1;\n        break;\n      case 'Z':\n        lead_replace = 2;\n        break;\n      default:\n    }\n    chars.splice(0, 1, lead_replace);\n    // Fill with zeros if smaller than proper\n  } else {\n    while (chars.length < 9) {\n      chars.unshift(0);\n    }\n  }\n\n  // Calculate checksum and check according to lookup\n  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];\n  chars = chars.join('');\n  var checksum = parseInt(chars.slice(0, 8), 10) % 23;\n  return chars[8] === lookup[checksum];\n}\n\n/*\n * et-EE validation function\n * (Isikukood (IK), persons only)\n * Checks if birth date (century digit and six following) is valid and calculates check (last) digit\n * Material not in DG TAXUD document sourced from:\n * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`\n */\nfunction etEeCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(1, 3);\n  var century_digit = tin.slice(0, 1);\n  switch (century_digit) {\n    case '1':\n    case '2':\n      full_year = \"18\".concat(full_year);\n      break;\n    case '3':\n    case '4':\n      full_year = \"19\".concat(full_year);\n      break;\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 1;\n  // Multiply by weight and add to checksum\n  for (var i = 0; i < 10; i++) {\n    checksum += digits[i] * weight;\n    weight += 1;\n    if (weight === 10) {\n      weight = 1;\n    }\n  }\n  // Do again if modulo 11 of checksum is 10\n  if (checksum % 11 === 10) {\n    checksum = 0;\n    weight = 3;\n    for (var _i3 = 0; _i3 < 10; _i3++) {\n      checksum += digits[_i3] * weight;\n      weight += 1;\n      if (weight === 10) {\n        weight = 1;\n      }\n    }\n    if (checksum % 11 === 10) {\n      return digits[10] === 0;\n    }\n  }\n  return checksum % 11 === digits[10];\n}\n\n/*\n * fi-FI validation function\n * (Henkil\u00F6tunnus (HETU), persons only)\n * Checks if birth date (first six digits plus century symbol) is valid\n * and calculates check (last) digit\n */\nfunction fiFiCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(4, 6);\n  var century_symbol = tin.slice(6, 7);\n  switch (century_symbol) {\n    case '+':\n      full_year = \"18\".concat(full_year);\n      break;\n    case '-':\n      full_year = \"19\".concat(full_year);\n      break;\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate check character\n  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;\n  if (checksum < 10) {\n    return checksum === parseInt(tin.slice(10), 10);\n  }\n  checksum -= 10;\n  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];\n  return letters_lookup[checksum] === tin.slice(10);\n}\n\n/*\n * fr/nl-BE validation function\n * (Num\u00E9ro national (N.N.), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last two) digits\n */\nfunction frBeCheck(tin) {\n  // Zero month/day value is acceptable\n  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {\n    // Extract date from first six digits of TIN\n    var date = \"\".concat(tin.slice(0, 2), \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(4, 6));\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  }\n  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;\n  var checkdigits = parseInt(tin.slice(9, 11), 10);\n  if (checksum !== checkdigits) {\n    checksum = 97 - parseInt(\"2\".concat(tin.slice(0, 9)), 10) % 97;\n    if (checksum !== checkdigits) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n * fr-FR validation function\n * (Num\u00E9ro fiscal de r\u00E9f\u00E9rence (num\u00E9ro SPI), persons only)\n * Verify TIN validity by calculating check (last three) digits\n */\nfunction frFrCheck(tin) {\n  tin = tin.replace(/\\s/g, '');\n  var checksum = parseInt(tin.slice(0, 10), 10) % 511;\n  var checkdigits = parseInt(tin.slice(10, 13), 10);\n  return checksum === checkdigits;\n}\n\n/*\n * fr/lb-LU validation function\n * (num\u00E9ro d\u2019identification personnelle, persons only)\n * Verify birth date validity and run Luhn and Verhoeff checks\n */\nfunction frLuCheck(tin) {\n  // Extract date and check validity\n  var date = \"\".concat(tin.slice(0, 4), \"/\").concat(tin.slice(4, 6), \"/\").concat(tin.slice(6, 8));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Run Luhn check\n  if (!algorithms.luhnCheck(tin.slice(0, 12))) {\n    return false;\n  }\n  // Remove Luhn check digit and run Verhoeff check\n  return algorithms.verhoeffCheck(\"\".concat(tin.slice(0, 11)).concat(tin[12]));\n}\n\n/*\n * hr-HR validation function\n * (Osobni identifikacijski broj (OIB), persons/entities)\n * Verify TIN validity by calling iso7064Check(digits)\n */\nfunction hrHrCheck(tin) {\n  return algorithms.iso7064Check(tin);\n}\n\n/*\n * hu-HU validation function\n * (Ad\u00F3azonos\u00EDt\u00F3 jel, persons only)\n * Verify TIN validity by calculating check (last) digit\n */\nfunction huHuCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 8;\n  for (var i = 1; i < 9; i++) {\n    checksum += digits[i] * (i + 1);\n  }\n  return checksum % 11 === digits[9];\n}\n\n/*\n * lt-LT validation function (should go here if needed)\n * (Asmens kodas, persons/entities respectively)\n * Current validation check is alias of etEeCheck- same format applies\n */\n\n/*\n * it-IT first/last name validity check\n * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity\n * Due to lack of clarity between resources (\"Are only Italian consonants used?\n * What happens if a person has X in their name?\" etc.) only two test conditions\n * have been implemented:\n * Vowels may only be followed by other vowels or an X character\n * and X characters after vowels may only be followed by other X characters.\n */\nfunction itItNameCheck(name) {\n  // true at the first occurrence of a vowel\n  var vowelflag = false;\n\n  // true at the first occurrence of an X AFTER vowel\n  // (to properly handle last names with X as consonant)\n  var xflag = false;\n  for (var i = 0; i < 3; i++) {\n    if (!vowelflag && /[AEIOU]/.test(name[i])) {\n      vowelflag = true;\n    } else if (!xflag && vowelflag && name[i] === 'X') {\n      xflag = true;\n    } else if (i > 0) {\n      if (vowelflag && !xflag) {\n        if (!/[AEIOU]/.test(name[i])) {\n          return false;\n        }\n      }\n      if (xflag) {\n        if (!/X/.test(name[i])) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n\n/*\n * it-IT validation function\n * (Codice fiscale (TIN-IT), persons only)\n * Verify name, birth date and codice catastale validity\n * and calculate check character.\n * Material not in DG-TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/Italian_fiscal_code`\n */\nfunction itItCheck(tin) {\n  // Capitalize and split characters into an array for further processing\n  var chars = tin.toUpperCase().split('');\n\n  // Check first and last name validity calling itItNameCheck()\n  if (!itItNameCheck(chars.slice(0, 3))) {\n    return false;\n  }\n  if (!itItNameCheck(chars.slice(3, 6))) {\n    return false;\n  }\n\n  // Convert letters in number spaces back to numbers if any\n  var number_locations = [6, 7, 9, 10, 12, 13, 14];\n  var number_replace = {\n    L: '0',\n    M: '1',\n    N: '2',\n    P: '3',\n    Q: '4',\n    R: '5',\n    S: '6',\n    T: '7',\n    U: '8',\n    V: '9'\n  };\n  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {\n    var i = _number_locations[_i4];\n    if (chars[i] in number_replace) {\n      chars.splice(i, 1, number_replace[chars[i]]);\n    }\n  }\n\n  // Extract month and day, and check date validity\n  var month_replace = {\n    A: '01',\n    B: '02',\n    C: '03',\n    D: '04',\n    E: '05',\n    H: '06',\n    L: '07',\n    M: '08',\n    P: '09',\n    R: '10',\n    S: '11',\n    T: '12'\n  };\n  var month = month_replace[chars[8]];\n  var day = parseInt(chars[9] + chars[10], 10);\n  if (day > 40) {\n    day -= 40;\n  }\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n  var date = \"\".concat(chars[6]).concat(chars[7], \"/\").concat(month, \"/\").concat(day);\n  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate check character by adding up even and odd characters as numbers\n  var checksum = 0;\n  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {\n    var char_to_int = parseInt(chars[_i5], 10);\n    if (isNaN(char_to_int)) {\n      char_to_int = chars[_i5].charCodeAt(0) - 65;\n    }\n    checksum += char_to_int;\n  }\n  var odd_convert = {\n    // Maps of characters at odd places\n    A: 1,\n    B: 0,\n    C: 5,\n    D: 7,\n    E: 9,\n    F: 13,\n    G: 15,\n    H: 17,\n    I: 19,\n    J: 21,\n    K: 2,\n    L: 4,\n    M: 18,\n    N: 20,\n    O: 11,\n    P: 3,\n    Q: 6,\n    R: 8,\n    S: 12,\n    T: 14,\n    U: 16,\n    V: 10,\n    W: 22,\n    X: 25,\n    Y: 24,\n    Z: 23,\n    0: 1,\n    1: 0\n  };\n  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {\n    var _char_to_int = 0;\n    if (chars[_i6] in odd_convert) {\n      _char_to_int = odd_convert[chars[_i6]];\n    } else {\n      var multiplier = parseInt(chars[_i6], 10);\n      _char_to_int = 2 * multiplier + 1;\n      if (multiplier > 4) {\n        _char_to_int += 2;\n      }\n    }\n    checksum += _char_to_int;\n  }\n  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {\n    return false;\n  }\n  return true;\n}\n\n/*\n * lv-LV validation function\n * (Personas kods (PK), persons only)\n * Check validity of birth date and calculate check (last) digit\n * Support only for old format numbers (not starting with '32', issued before 2017/07/01)\n * Material not in DG TAXUD document sourced from:\n * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`\n */\nfunction lvLvCheck(tin) {\n  tin = tin.replace(/\\W/, '');\n  // Extract date from TIN\n  var day = tin.slice(0, 2);\n  if (day !== '32') {\n    // No date/checksum check if new format\n    var month = tin.slice(2, 4);\n    if (month !== '00') {\n      // No date check if unknown month\n      var full_year = tin.slice(4, 6);\n      switch (tin[6]) {\n        case '0':\n          full_year = \"18\".concat(full_year);\n          break;\n        case '1':\n          full_year = \"19\".concat(full_year);\n          break;\n        default:\n          full_year = \"20\".concat(full_year);\n          break;\n      }\n      // Check date validity\n      var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(day);\n      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n        return false;\n      }\n    }\n\n    // Calculate check digit\n    var checksum = 1101;\n    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n    for (var i = 0; i < tin.length - 1; i++) {\n      checksum -= parseInt(tin[i], 10) * multip_lookup[i];\n    }\n    return parseInt(tin[10], 10) === checksum % 11;\n  }\n  return true;\n}\n\n/*\n * mt-MT validation function\n * (Identity Card Number or Unique Taxpayer Reference, persons/entities)\n * Verify Identity Card Number structure (no other tests found)\n */\nfunction mtMtCheck(tin) {\n  if (tin.length !== 9) {\n    // No tests for UTR\n    var chars = tin.toUpperCase().split('');\n    // Fill with zeros if smaller than proper\n    while (chars.length < 8) {\n      chars.unshift(0);\n    }\n    // Validate format according to last character\n    switch (tin[7]) {\n      case 'A':\n      case 'P':\n        if (parseInt(chars[6], 10) === 0) {\n          return false;\n        }\n        break;\n      default:\n        {\n          var first_part = parseInt(chars.join('').slice(0, 5), 10);\n          if (first_part > 32000) {\n            return false;\n          }\n          var second_part = parseInt(chars.join('').slice(5, 7), 10);\n          if (first_part === second_part) {\n            return false;\n          }\n        }\n    }\n  }\n  return true;\n}\n\n/*\n * nl-NL validation function\n * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),\n * persons/entities respectively)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction nlNlCheck(tin) {\n  return algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11 === parseInt(tin[8], 10);\n}\n\n/*\n * pl-PL validation function\n * (Powszechny Elektroniczny System Ewidencji Ludno\u015Bci (PESEL)\n * or Numer identyfikacji podatkowej (NIP), persons/entities)\n * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit\n */\nfunction plPlCheck(tin) {\n  // NIP\n  if (tin.length === 10) {\n    // Calculate last digit by multiplying with lookup\n    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var _checksum = 0;\n    for (var i = 0; i < lookup.length; i++) {\n      _checksum += parseInt(tin[i], 10) * lookup[i];\n    }\n    _checksum %= 11;\n    if (_checksum === 10) {\n      return false;\n    }\n    return _checksum === parseInt(tin[9], 10);\n  }\n\n  // PESEL\n  // Extract full year using month\n  var full_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 80) {\n    full_year = \"18\".concat(full_year);\n    month -= 80;\n  } else if (month > 60) {\n    full_year = \"22\".concat(full_year);\n    month -= 60;\n  } else if (month > 40) {\n    full_year = \"21\".concat(full_year);\n    month -= 40;\n  } else if (month > 20) {\n    full_year = \"20\".concat(full_year);\n    month -= 20;\n  } else {\n    full_year = \"19\".concat(full_year);\n  }\n  // Add leading zero to month if needed\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n  // Check date validity\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  // Calculate last digit by multiplying with odd one-digit numbers except 5\n  var checksum = 0;\n  var multiplier = 1;\n  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {\n    checksum += parseInt(tin[_i7], 10) * multiplier % 10;\n    multiplier += 2;\n    if (multiplier > 10) {\n      multiplier = 1;\n    } else if (multiplier === 5) {\n      multiplier += 2;\n    }\n  }\n  checksum = 10 - checksum % 10;\n  return checksum === parseInt(tin[10], 10);\n}\n\n/*\n* pt-BR validation function\n* (Cadastro de Pessoas F\u00EDsicas (CPF, persons)\n* Cadastro Nacional de Pessoas Jur\u00EDdicas (CNPJ, entities)\n* Both inputs will be validated\n*/\n\nfunction ptBrCheck(tin) {\n  if (tin.length === 11) {\n    var _sum;\n    var remainder;\n    _sum = 0;\n    if (\n    // Reject known invalid CPFs\n    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;\n    for (var i = 1; i <= 9; i++) _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;\n    _sum = 0;\n    for (var _i8 = 1; _i8 <= 10; _i8++) _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;\n    return true;\n  }\n  if (\n  // Reject know invalid CNPJs\n  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {\n    return false;\n  }\n  var length = tin.length - 2;\n  var identifiers = tin.substring(0, length);\n  var verificators = tin.substring(length);\n  var sum = 0;\n  var pos = length - 7;\n  for (var _i9 = length; _i9 >= 1; _i9--) {\n    sum += identifiers.charAt(length - _i9) * pos;\n    pos -= 1;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n  if (result !== parseInt(verificators.charAt(0), 10)) {\n    return false;\n  }\n  length += 1;\n  identifiers = tin.substring(0, length);\n  sum = 0;\n  pos = length - 7;\n  for (var _i0 = length; _i0 >= 1; _i0--) {\n    sum += identifiers.charAt(length - _i0) * pos;\n    pos -= 1;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n  if (result !== parseInt(verificators.charAt(1), 10)) {\n    return false;\n  }\n  return true;\n}\n\n/*\n * pt-PT validation function\n * (N\u00FAmero de identifica\u00E7\u00E3o fiscal (NIF), persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction ptPtCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11;\n  if (checksum > 9) {\n    return parseInt(tin[8], 10) === 0;\n  }\n  return checksum === parseInt(tin[8], 10);\n}\n\n/*\n * ro-RO validation function\n * (Cod Numeric Personal (CNP) or Cod de \u00EEnregistrare fiscal\u0103 (CIF),\n * persons only)\n * Verify CNP validity by calculating check (last) digit (test not found for CIF)\n * Material not in DG TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/National_identification_number#Romania`\n */\nfunction roRoCheck(tin) {\n  if (tin.slice(0, 4) !== '9000') {\n    // No test found for this format\n    // Extract full year using century digit if possible\n    var full_year = tin.slice(1, 3);\n    switch (tin[0]) {\n      case '1':\n      case '2':\n        full_year = \"19\".concat(full_year);\n        break;\n      case '3':\n      case '4':\n        full_year = \"18\".concat(full_year);\n        break;\n      case '5':\n      case '6':\n        full_year = \"20\".concat(full_year);\n        break;\n      default:\n    }\n\n    // Check date validity\n    var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n    if (date.length === 8) {\n      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n        return false;\n      }\n    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n\n    // Calculate check digit\n    var digits = tin.split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];\n    var checksum = 0;\n    for (var i = 0; i < multipliers.length; i++) {\n      checksum += digits[i] * multipliers[i];\n    }\n    if (checksum % 11 === 10) {\n      return digits[12] === 1;\n    }\n    return digits[12] === checksum % 11;\n  }\n  return true;\n}\n\n/*\n * sk-SK validation function\n * (Rodn\u00E9 \u010D\u00EDslo (R\u010C) or bezv\u00FDznamov\u00E9 identifika\u010Dn\u00E9 \u010D\u00EDslo (BI\u010C), persons only)\n * Checks validity of pre-1954 birth numbers (rodn\u00E9 \u010D\u00EDslo) only\n * Due to the introduction of the pseudo-random BI\u010C it is not possible to test\n * post-1954 birth numbers without knowing whether they are BI\u010C or R\u010C beforehand\n */\nfunction skSkCheck(tin) {\n  if (tin.length === 9) {\n    tin = tin.replace(/\\W/, '');\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n\n    // Extract full year from TIN length\n    var full_year = parseInt(tin.slice(0, 2), 10);\n    if (full_year > 53) {\n      return false;\n    }\n    if (full_year < 10) {\n      full_year = \"190\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n\n    // Extract month from TIN and normalize\n    var month = parseInt(tin.slice(2, 4), 10);\n    if (month > 50) {\n      month -= 50;\n    }\n    if (month < 10) {\n      month = \"0\".concat(month);\n    }\n\n    // Check date validity\n    var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n * sl-SI validation function\n * (Dav\u010Dna \u0161tevilka, persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction slSiCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8) % 11;\n  if (checksum === 10) {\n    return parseInt(tin[7], 10) === 0;\n  }\n  return checksum === parseInt(tin[7], 10);\n}\n\n/*\n * sv-SE validation function\n * (Personnummer or samordningsnummer, persons only)\n * Checks validity of birth date and calls luhnCheck() to validate check (last) digit\n */\nfunction svSeCheck(tin) {\n  // Make copy of TIN and normalize to two-digit year form\n  var tin_copy = tin.slice(0);\n  if (tin.length > 11) {\n    tin_copy = tin_copy.slice(2);\n  }\n\n  // Extract date of birth\n  var full_year = '';\n  var month = tin_copy.slice(2, 4);\n  var day = parseInt(tin_copy.slice(4, 6), 10);\n  if (tin.length > 11) {\n    full_year = tin.slice(0, 4);\n  } else {\n    full_year = tin.slice(0, 2);\n    if (tin.length === 11 && day < 60) {\n      // Extract full year from centenarian symbol\n      // Should work just fine until year 10000 or so\n      var current_year = new Date().getFullYear().toString();\n      var current_century = parseInt(current_year.slice(0, 2), 10);\n      current_year = parseInt(current_year, 10);\n      if (tin[6] === '-') {\n        if (parseInt(\"\".concat(current_century).concat(full_year), 10) > current_year) {\n          full_year = \"\".concat(current_century - 1).concat(full_year);\n        } else {\n          full_year = \"\".concat(current_century).concat(full_year);\n        }\n      } else {\n        full_year = \"\".concat(current_century - 1).concat(full_year);\n        if (current_year - parseInt(full_year, 10) < 100) {\n          return false;\n        }\n      }\n    }\n  }\n\n  // Normalize day and check date validity\n  if (day > 60) {\n    day -= 60;\n  }\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(day);\n  if (date.length === 8) {\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n  return algorithms.luhnCheck(tin.replace(/\\W/, ''));\n}\n\n/**\n * uk-UA validation function\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\nfunction ukUaCheck(tin) {\n  // Calculate check digit\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var multipliers = [-1, 5, 7, 9, 4, 6, 10, 5, 7];\n  var checksum = 0;\n  for (var i = 0; i < multipliers.length; i++) {\n    checksum += digits[i] * multipliers[i];\n  }\n  return checksum % 11 === 10 ? digits[9] === 0 : digits[9] === checksum % 11;\n}\n\n// Locale lookup objects\n\n/*\n * Tax id regex formats for various locales\n *\n * Where not explicitly specified in DG-TAXUD document both\n * uppercase and lowercase letters are acceptable.\n */\nvar taxIdFormat = {\n  'bg-BG': /^\\d{10}$/,\n  'cs-CZ': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'de-AT': /^\\d{9}$/,\n  'de-DE': /^[1-9]\\d{10}$/,\n  'dk-DK': /^\\d{6}-{0,1}\\d{4}$/,\n  'el-CY': /^[09]\\d{7}[A-Z]$/,\n  'el-GR': /^([0-4]|[7-9])\\d{8}$/,\n  'en-CA': /^\\d{9}$/,\n  'en-GB': /^\\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\\d{6}[ABCD ]$/i,\n  'en-IE': /^\\d{7}[A-W][A-IW]{0,1}$/i,\n  'en-US': /^\\d{2}[- ]{0,1}\\d{7}$/,\n  'es-AR': /(20|23|24|27|30|33|34)[0-9]{8}[0-9]/,\n  'es-ES': /^(\\d{0,8}|[XYZKLM]\\d{7})[A-HJ-NP-TV-Z]$/i,\n  'et-EE': /^[1-6]\\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\\d$/,\n  'fi-FI': /^\\d{6}[-+A]\\d{3}[0-9A-FHJ-NPR-Y]$/i,\n  'fr-BE': /^\\d{11}$/,\n  'fr-FR': /^[0-3]\\d{12}$|^[0-3]\\d\\s\\d{2}(\\s\\d{3}){3}$/,\n  // Conforms both to official spec and provided example\n  'fr-LU': /^\\d{13}$/,\n  'hr-HR': /^\\d{11}$/,\n  'hu-HU': /^8\\d{9}$/,\n  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,\n  'lv-LV': /^\\d{6}-{0,1}\\d{5}$/,\n  // Conforms both to DG TAXUD spec and original research\n  'mt-MT': /^\\d{3,7}[APMGLHBZ]$|^([1-8])\\1\\d{7}$/i,\n  'nl-NL': /^\\d{9}$/,\n  'pl-PL': /^\\d{10,11}$/,\n  'pt-BR': /(?:^\\d{11}$)|(?:^\\d{14}$)/,\n  'pt-PT': /^\\d{9}$/,\n  'ro-RO': /^\\d{13}$/,\n  'sk-SK': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'sl-SI': /^[1-9]\\d{7}$/,\n  'sv-SE': /^(\\d{6}[-+]{0,1}\\d{4}|(18|19|20)\\d{6}[-+]{0,1}\\d{4})$/,\n  'uk-UA': /^\\d{10}$/\n};\n// taxIdFormat locale aliases\ntaxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];\ntaxIdFormat['lt-LT'] = taxIdFormat['et-EE'];\ntaxIdFormat['nl-BE'] = taxIdFormat['fr-BE'];\ntaxIdFormat['fr-CA'] = taxIdFormat['en-CA'];\n\n// Algorithmic tax id check functions for various locales\nvar taxIdCheck = {\n  'bg-BG': bgBgCheck,\n  'cs-CZ': csCzCheck,\n  'de-AT': deAtCheck,\n  'de-DE': deDeCheck,\n  'dk-DK': dkDkCheck,\n  'el-CY': elCyCheck,\n  'el-GR': elGrCheck,\n  'en-CA': isCanadianSIN,\n  'en-IE': enIeCheck,\n  'en-US': enUsCheck,\n  'es-AR': esArCheck,\n  'es-ES': esEsCheck,\n  'et-EE': etEeCheck,\n  'fi-FI': fiFiCheck,\n  'fr-BE': frBeCheck,\n  'fr-FR': frFrCheck,\n  'fr-LU': frLuCheck,\n  'hr-HR': hrHrCheck,\n  'hu-HU': huHuCheck,\n  'it-IT': itItCheck,\n  'lv-LV': lvLvCheck,\n  'mt-MT': mtMtCheck,\n  'nl-NL': nlNlCheck,\n  'pl-PL': plPlCheck,\n  'pt-BR': ptBrCheck,\n  'pt-PT': ptPtCheck,\n  'ro-RO': roRoCheck,\n  'sk-SK': skSkCheck,\n  'sl-SI': slSiCheck,\n  'sv-SE': svSeCheck,\n  'uk-UA': ukUaCheck\n};\n// taxIdCheck locale aliases\ntaxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];\ntaxIdCheck['lt-LT'] = taxIdCheck['et-EE'];\ntaxIdCheck['nl-BE'] = taxIdCheck['fr-BE'];\ntaxIdCheck['fr-CA'] = taxIdCheck['en-CA'];\n\n// Regexes for locales where characters should be omitted before checking format\nvar allsymbols = /[-\\\\\\/!@#$%\\^&\\*\\(\\)\\+\\=\\[\\]]+/g;\nvar sanitizeRegexes = {\n  'de-AT': allsymbols,\n  'de-DE': /[\\/\\\\]/g,\n  'fr-BE': allsymbols\n};\n// sanitizeRegexes locale aliases\nsanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];\n\n/*\n * Validator function\n * Return true if the passed string is a valid tax identification number\n * for the specified locale.\n * Throw an error exception if the locale is not supported.\n */\nfunction isTaxID(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  (0, _assertString.default)(str);\n  // Copy TIN to avoid replacement if sanitized\n  var strcopy = str.slice(0);\n  if (locale in taxIdFormat) {\n    if (locale in sanitizeRegexes) {\n      strcopy = strcopy.replace(sanitizeRegexes[locale], '');\n    }\n    if (!taxIdFormat[locale].test(strcopy)) {\n      return false;\n    }\n    if (locale in taxIdCheck) {\n      return taxIdCheck[locale](strcopy);\n    }\n    // Fallthrough; not all locales have algorithmic checks\n    return true;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isFreightContainerID = void 0;\nexports.isISO6346 = isISO6346;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// https://en.wikipedia.org/wiki/ISO_6346\n// according to ISO6346 standard, checksum digit is mandatory for freight container but recommended\n// for other container types (J and Z)\nvar isISO6346Str = /^[A-Z]{3}(U[0-9]{7})|([J,Z][0-9]{6,7})$/;\nvar isDigit = /^[0-9]$/;\nfunction isISO6346(str) {\n  (0, _assertString.default)(str);\n  str = str.toUpperCase();\n  if (!isISO6346Str.test(str)) return false;\n  if (str.length === 11) {\n    var sum = 0;\n    for (var i = 0; i < str.length - 1; i++) {\n      if (!isDigit.test(str[i])) {\n        var convertedCode = void 0;\n        var letterCode = str.charCodeAt(i) - 55;\n        if (letterCode < 11) convertedCode = letterCode;else if (letterCode >= 11 && letterCode <= 20) convertedCode = 12 + letterCode % 11;else if (letterCode >= 21 && letterCode <= 30) convertedCode = 23 + letterCode % 21;else convertedCode = 34 + letterCode % 31;\n        sum += convertedCode * Math.pow(2, i);\n      } else sum += str[i] * Math.pow(2, i);\n    }\n    var checkSumDigit = sum % 11;\n    if (checkSumDigit === 10) checkSumDigit = 0;\n    return Number(str[str.length - 1]) === checkSumDigit;\n  }\n  return true;\n}\nvar isFreightContainerID = exports.isFreightContainerID = isISO6346;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISO6391;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar isISO6391Set = new Set(['aa', 'ab', 'ae', 'af', 'ak', 'am', 'an', 'ar', 'as', 'av', 'ay', 'az', 'az', 'ba', 'be', 'bg', 'bh', 'bi', 'bm', 'bn', 'bo', 'br', 'bs', 'ca', 'ce', 'ch', 'co', 'cr', 'cs', 'cu', 'cv', 'cy', 'da', 'de', 'dv', 'dz', 'ee', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'ff', 'fi', 'fj', 'fo', 'fr', 'fy', 'ga', 'gd', 'gl', 'gn', 'gu', 'gv', 'ha', 'he', 'hi', 'ho', 'hr', 'ht', 'hu', 'hy', 'hz', 'ia', 'id', 'ie', 'ig', 'ii', 'ik', 'io', 'is', 'it', 'iu', 'ja', 'jv', 'ka', 'kg', 'ki', 'kj', 'kk', 'kl', 'km', 'kn', 'ko', 'kr', 'ks', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lg', 'li', 'ln', 'lo', 'lt', 'lu', 'lv', 'mg', 'mh', 'mi', 'mk', 'ml', 'mn', 'mr', 'ms', 'mt', 'my', 'na', 'nb', 'nd', 'ne', 'ng', 'nl', 'nn', 'no', 'nr', 'nv', 'ny', 'oc', 'oj', 'om', 'or', 'os', 'pa', 'pi', 'pl', 'ps', 'pt', 'qu', 'rm', 'rn', 'ro', 'ru', 'rw', 'sa', 'sc', 'sd', 'se', 'sg', 'si', 'sk', 'sl', 'sm', 'sn', 'so', 'sq', 'sr', 'ss', 'st', 'su', 'sv', 'sw', 'ta', 'te', 'tg', 'th', 'ti', 'tk', 'tl', 'tn', 'to', 'tr', 'ts', 'tt', 'tw', 'ty', 'ug', 'uk', 'ur', 'uz', 've', 'vi', 'vo', 'wa', 'wo', 'xh', 'yi', 'yo', 'za', 'zh', 'zu']);\nfunction isISO6391(str) {\n  (0, _assertString.default)(str);\n  return isISO6391Set.has(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScriptCodes = void 0;\nexports.default = isISO15924;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// from https://www.unicode.org/iso15924/iso15924-codes.html\nvar validISO15924Codes = new Set(['Adlm', 'Afak', 'Aghb', 'Ahom', 'Arab', 'Aran', 'Armi', 'Armn', 'Avst', 'Bali', 'Bamu', 'Bass', 'Batk', 'Beng', 'Bhks', 'Blis', 'Bopo', 'Brah', 'Brai', 'Bugi', 'Buhd', 'Cakm', 'Cans', 'Cari', 'Cham', 'Cher', 'Chis', 'Chrs', 'Cirt', 'Copt', 'Cpmn', 'Cprt', 'Cyrl', 'Cyrs', 'Deva', 'Diak', 'Dogr', 'Dsrt', 'Dupl', 'Egyd', 'Egyh', 'Egyp', 'Elba', 'Elym', 'Ethi', 'Gara', 'Geok', 'Geor', 'Glag', 'Gong', 'Gonm', 'Goth', 'Gran', 'Grek', 'Gujr', 'Gukh', 'Guru', 'Hanb', 'Hang', 'Hani', 'Hano', 'Hans', 'Hant', 'Hatr', 'Hebr', 'Hira', 'Hluw', 'Hmng', 'Hmnp', 'Hrkt', 'Hung', 'Inds', 'Ital', 'Jamo', 'Java', 'Jpan', 'Jurc', 'Kali', 'Kana', 'Kawi', 'Khar', 'Khmr', 'Khoj', 'Kitl', 'Kits', 'Knda', 'Kore', 'Kpel', 'Krai', 'Kthi', 'Lana', 'Laoo', 'Latf', 'Latg', 'Latn', 'Leke', 'Lepc', 'Limb', 'Lina', 'Linb', 'Lisu', 'Loma', 'Lyci', 'Lydi', 'Mahj', 'Maka', 'Mand', 'Mani', 'Marc', 'Maya', 'Medf', 'Mend', 'Merc', 'Mero', 'Mlym', 'Modi', 'Mong', 'Moon', 'Mroo', 'Mtei', 'Mult', 'Mymr', 'Nagm', 'Nand', 'Narb', 'Nbat', 'Newa', 'Nkdb', 'Nkgb', 'Nkoo', 'Nshu', 'Ogam', 'Olck', 'Onao', 'Orkh', 'Orya', 'Osge', 'Osma', 'Ougr', 'Palm', 'Pauc', 'Pcun', 'Pelm', 'Perm', 'Phag', 'Phli', 'Phlp', 'Phlv', 'Phnx', 'Plrd', 'Piqd', 'Prti', 'Psin', 'Qaaa', 'Qaab', 'Qaac', 'Qaad', 'Qaae', 'Qaaf', 'Qaag', 'Qaah', 'Qaai', 'Qaaj', 'Qaak', 'Qaal', 'Qaam', 'Qaan', 'Qaao', 'Qaap', 'Qaaq', 'Qaar', 'Qaas', 'Qaat', 'Qaau', 'Qaav', 'Qaaw', 'Qaax', 'Qaay', 'Qaaz', 'Qaba', 'Qabb', 'Qabc', 'Qabd', 'Qabe', 'Qabf', 'Qabg', 'Qabh', 'Qabi', 'Qabj', 'Qabk', 'Qabl', 'Qabm', 'Qabn', 'Qabo', 'Qabp', 'Qabq', 'Qabr', 'Qabs', 'Qabt', 'Qabu', 'Qabv', 'Qabw', 'Qabx', 'Ranj', 'Rjng', 'Rohg', 'Roro', 'Runr', 'Samr', 'Sara', 'Sarb', 'Saur', 'Sgnw', 'Shaw', 'Shrd', 'Shui', 'Sidd', 'Sidt', 'Sind', 'Sinh', 'Sogd', 'Sogo', 'Sora', 'Soyo', 'Sund', 'Sunu', 'Sylo', 'Syrc', 'Syre', 'Syrj', 'Syrn', 'Tagb', 'Takr', 'Tale', 'Talu', 'Taml', 'Tang', 'Tavt', 'Tayo', 'Telu', 'Teng', 'Tfng', 'Tglg', 'Thaa', 'Thai', 'Tibt', 'Tirh', 'Tnsa', 'Todr', 'Tols', 'Toto', 'Tutg', 'Ugar', 'Vaii', 'Visp', 'Vith', 'Wara', 'Wcho', 'Wole', 'Xpeo', 'Xsux', 'Yezi', 'Yiii', 'Zanb', 'Zinh', 'Zmth', 'Zsye', 'Zsym', 'Zxxx', 'Zyyy', 'Zzzz']);\nfunction isISO15924(str) {\n  (0, _assertString.default)(str);\n  return validISO15924Codes.has(str);\n}\nvar ScriptCodes = exports.ScriptCodes = validISO15924Codes;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isISO31661Numeric;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// from https://en.wikipedia.org/wiki/ISO_3166-1_numeric\nvar validISO31661NumericCountriesCodes = new Set(['004', '008', '010', '012', '016', '020', '024', '028', '031', '032', '036', '040', '044', '048', '050', '051', '052', '056', '060', '064', '068', '070', '072', '074', '076', '084', '086', '090', '092', '096', '100', '104', '108', '112', '116', '120', '124', '132', '136', '140', '144', '148', '152', '156', '158', '162', '166', '170', '174', '175', '178', '180', '184', '188', '191', '192', '196', '203', '204', '208', '212', '214', '218', '222', '226', '231', '232', '233', '234', '238', '239', '242', '246', '248', '250', '254', '258', '260', '262', '266', '268', '270', '275', '276', '288', '292', '296', '300', '304', '308', '312', '316', '320', '324', '328', '332', '334', '336', '340', '344', '348', '352', '356', '360', '364', '368', '372', '376', '380', '384', '388', '392', '398', '400', '404', '408', '410', '414', '417', '418', '422', '426', '428', '430', '434', '438', '440', '442', '446', '450', '454', '458', '462', '466', '470', '474', '478', '480', '484', '492', '496', '498', '499', '500', '504', '508', '512', '516', '520', '524', '528', '531', '533', '534', '535', '540', '548', '554', '558', '562', '566', '570', '574', '578', '580', '581', '583', '584', '585', '586', '591', '598', '600', '604', '608', '612', '616', '620', '624', '626', '630', '634', '638', '642', '643', '646', '652', '654', '659', '660', '662', '663', '666', '670', '674', '678', '682', '686', '688', '690', '694', '702', '703', '704', '705', '706', '710', '716', '724', '728', '729', '732', '740', '744', '748', '752', '756', '760', '762', '764', '768', '772', '776', '780', '784', '788', '792', '795', '796', '798', '800', '804', '807', '818', '826', '831', '832', '833', '834', '840', '850', '854', '858', '860', '862', '876', '882', '887', '894']);\nfunction isISO31661Numeric(str) {\n  (0, _assertString.default)(str);\n  return validISO31661NumericCountriesCodes.has(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CurrencyCodes = void 0;\nexports.default = isISO4217;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// from https://en.wikipedia.org/wiki/ISO_4217\nvar validISO4217CurrencyCodes = new Set(['AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BOV', 'BRL', 'BSD', 'BTN', 'BWP', 'BYN', 'BZD', 'CAD', 'CDF', 'CHE', 'CHF', 'CHW', 'CLF', 'CLP', 'CNY', 'COP', 'COU', 'CRC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HTG', 'HUF', 'IDR', 'ILS', 'INR', 'IQD', 'IRR', 'ISK', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRU', 'MUR', 'MVR', 'MWK', 'MXN', 'MXV', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLE', 'SLL', 'SOS', 'SRD', 'SSP', 'STN', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'USN', 'UYI', 'UYU', 'UYW', 'UZS', 'VED', 'VES', 'VND', 'VUV', 'WST', 'XAF', 'XAG', 'XAU', 'XBA', 'XBB', 'XBC', 'XBD', 'XCD', 'XDR', 'XOF', 'XPD', 'XPF', 'XPT', 'XSU', 'XTS', 'XUA', 'XXX', 'YER', 'ZAR', 'ZMW', 'ZWL']);\nfunction isISO4217(str) {\n  (0, _assertString.default)(str);\n  return validISO4217CurrencyCodes.has(str.toUpperCase());\n}\nvar CurrencyCodes = exports.CurrencyCodes = validISO4217CurrencyCodes;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isBase58;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\n// Accepted chars - 123456789ABCDEFGH JKLMN PQRSTUVWXYZabcdefghijk mnopqrstuvwxyz\nvar base58Reg = /^[A-HJ-NP-Za-km-z1-9]*$/;\nfunction isBase58(str) {\n  (0, _assertString.default)(str);\n  if (base58Reg.test(str)) {\n    return true;\n  }\n  return false;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rtrim;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction rtrim(str, chars) {\n  (0, _assertString.default)(str);\n  if (chars) {\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n    var pattern = new RegExp(\"[\".concat(chars.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), \"]+$\"), 'g');\n    return str.replace(pattern, '');\n  }\n  // Use a faster and more safe than regex trim method https://blog.stevenlevithan.com/archives/faster-trim-javascript\n  var strIndex = str.length - 1;\n  while (/\\s/.test(str.charAt(strIndex))) {\n    strIndex -= 1;\n  }\n  return str.slice(0, strIndex + 1);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ltrim;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction ltrim(str, chars) {\n  (0, _assertString.default)(str);\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n  var pattern = chars ? new RegExp(\"^[\".concat(chars.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), \"]+\"), 'g') : /^\\s+/g;\n  return str.replace(pattern, '');\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = trim;\nvar _rtrim = _interopRequireDefault(require(\"./rtrim\"));\nvar _ltrim = _interopRequireDefault(require(\"./ltrim\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction trim(str, chars) {\n  return (0, _rtrim.default)((0, _ltrim.default)(str, chars), chars);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isMailtoURI;\nvar _trim = _interopRequireDefault(require(\"./trim\"));\nvar _isEmail = _interopRequireDefault(require(\"./isEmail\"));\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction parseMailtoQueryString(queryString) {\n  var allowedParams = new Set(['subject', 'body', 'cc', 'bcc']),\n    query = {\n      cc: '',\n      bcc: ''\n    };\n  var isParseFailed = false;\n  var queryParams = queryString.split('&');\n  if (queryParams.length > 4) {\n    return false;\n  }\n  var _iterator = _createForOfIteratorHelper(queryParams),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var q = _step.value;\n      var _q$split = q.split('='),\n        _q$split2 = _slicedToArray(_q$split, 2),\n        key = _q$split2[0],\n        value = _q$split2[1];\n\n      // checked for invalid and duplicated query params\n      if (key && !allowedParams.has(key)) {\n        isParseFailed = true;\n        break;\n      }\n      if (value && (key === 'cc' || key === 'bcc')) {\n        query[key] = value;\n      }\n      if (key) {\n        allowedParams.delete(key);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return isParseFailed ? false : query;\n}\nfunction isMailtoURI(url, options) {\n  (0, _assertString.default)(url);\n  if (url.indexOf('mailto:') !== 0) {\n    return false;\n  }\n  var _url$replace$split = url.replace('mailto:', '').split('?'),\n    _url$replace$split2 = _slicedToArray(_url$replace$split, 2),\n    to = _url$replace$split2[0],\n    _url$replace$split2$ = _url$replace$split2[1],\n    queryString = _url$replace$split2$ === void 0 ? '' : _url$replace$split2$;\n  if (!to && !queryString) {\n    return true;\n  }\n  var query = parseMailtoQueryString(queryString);\n  if (!query) {\n    return false;\n  }\n  return \"\".concat(to, \",\").concat(query.cc, \",\").concat(query.bcc).split(',').every(function (email) {\n    email = (0, _trim.default)(email, ' ');\n    if (email) {\n      return (0, _isEmail.default)(email, options);\n    }\n    return true;\n  });\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = escape;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction escape(str) {\n  (0, _assertString.default)(str);\n  return str.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\//g, '&#x2F;').replace(/\\\\/g, '&#x5C;').replace(/`/g, '&#96;');\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = unescape;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction unescape(str) {\n  (0, _assertString.default)(str);\n  return str.replace(/&quot;/g, '\"').replace(/&#x27;/g, \"'\").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '/').replace(/&#x5C;/g, '\\\\').replace(/&#96;/g, '`').replace(/&amp;/g, '&');\n  // &amp; replacement has to be the last one to prevent\n  // bugs with intermediate strings containing escape sequences\n  // See: https://github.com/validatorjs/validator.js/issues/1827\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = blacklist;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction blacklist(str, chars) {\n  (0, _assertString.default)(str);\n  return str.replace(new RegExp(\"[\".concat(chars, \"]+\"), 'g'), '');\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = stripLow;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar _blacklist = _interopRequireDefault(require(\"./blacklist\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction stripLow(str, keep_new_lines) {\n  (0, _assertString.default)(str);\n  var chars = keep_new_lines ? '\\\\x00-\\\\x09\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F' : '\\\\x00-\\\\x1F\\\\x7F';\n  return (0, _blacklist.default)(str, chars);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = whitelist;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction whitelist(str, chars) {\n  (0, _assertString.default)(str);\n  return str.replace(new RegExp(\"[^\".concat(chars, \"]+\"), 'g'), '');\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isWhitelisted;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nfunction isWhitelisted(str, chars) {\n  (0, _assertString.default)(str);\n  for (var i = str.length - 1; i >= 0; i--) {\n    if (chars.indexOf(str[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeEmail;\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar default_normalize_email_options = {\n  // The following options apply to all email addresses\n  // Lowercases the local part of the email address.\n  // Please note this may violate RFC 5321 as per http://stackoverflow.com/a/9808332/192024).\n  // The domain is always lowercased, as per RFC 1035\n  all_lowercase: true,\n  // The following conversions are specific to GMail\n  // Lowercases the local part of the GMail address (known to be case-insensitive)\n  gmail_lowercase: true,\n  // Removes dots from the local part of the email address, as that's ignored by GMail\n  gmail_remove_dots: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  gmail_remove_subaddress: true,\n  // Conversts the googlemail.com domain to gmail.com\n  gmail_convert_googlemaildotcom: true,\n  // The following conversions are specific to Outlook.com / Windows Live / Hotmail\n  // Lowercases the local part of the Outlook.com address (known to be case-insensitive)\n  outlookdotcom_lowercase: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  outlookdotcom_remove_subaddress: true,\n  // The following conversions are specific to Yahoo\n  // Lowercases the local part of the Yahoo address (known to be case-insensitive)\n  yahoo_lowercase: true,\n  // Removes the subaddress (e.g. \"-foo\") from the email address\n  yahoo_remove_subaddress: true,\n  // The following conversions are specific to Yandex\n  // Lowercases the local part of the Yandex address (known to be case-insensitive)\n  yandex_lowercase: true,\n  // all yandex domains are equal, this explicitly sets the domain to 'yandex.ru'\n  yandex_convert_yandexru: true,\n  // The following conversions are specific to iCloud\n  // Lowercases the local part of the iCloud address (known to be case-insensitive)\n  icloud_lowercase: true,\n  // Removes the subaddress (e.g. \"+foo\") from the email address\n  icloud_remove_subaddress: true\n};\n\n// List of domains used by iCloud\nvar icloud_domains = ['icloud.com', 'me.com'];\n\n// List of domains used by Outlook.com and its predecessors\n// This list is likely incomplete.\n// Partial reference:\n// https://blogs.office.com/2013/04/17/outlook-com-gets-two-step-verification-sign-in-by-alias-and-new-international-domains/\nvar outlookdotcom_domains = ['hotmail.at', 'hotmail.be', 'hotmail.ca', 'hotmail.cl', 'hotmail.co.il', 'hotmail.co.nz', 'hotmail.co.th', 'hotmail.co.uk', 'hotmail.com', 'hotmail.com.ar', 'hotmail.com.au', 'hotmail.com.br', 'hotmail.com.gr', 'hotmail.com.mx', 'hotmail.com.pe', 'hotmail.com.tr', 'hotmail.com.vn', 'hotmail.cz', 'hotmail.de', 'hotmail.dk', 'hotmail.es', 'hotmail.fr', 'hotmail.hu', 'hotmail.id', 'hotmail.ie', 'hotmail.in', 'hotmail.it', 'hotmail.jp', 'hotmail.kr', 'hotmail.lv', 'hotmail.my', 'hotmail.ph', 'hotmail.pt', 'hotmail.sa', 'hotmail.sg', 'hotmail.sk', 'live.be', 'live.co.uk', 'live.com', 'live.com.ar', 'live.com.mx', 'live.de', 'live.es', 'live.eu', 'live.fr', 'live.it', 'live.nl', 'msn.com', 'outlook.at', 'outlook.be', 'outlook.cl', 'outlook.co.il', 'outlook.co.nz', 'outlook.co.th', 'outlook.com', 'outlook.com.ar', 'outlook.com.au', 'outlook.com.br', 'outlook.com.gr', 'outlook.com.pe', 'outlook.com.tr', 'outlook.com.vn', 'outlook.cz', 'outlook.de', 'outlook.dk', 'outlook.es', 'outlook.fr', 'outlook.hu', 'outlook.id', 'outlook.ie', 'outlook.in', 'outlook.it', 'outlook.jp', 'outlook.kr', 'outlook.lv', 'outlook.my', 'outlook.ph', 'outlook.pt', 'outlook.sa', 'outlook.sg', 'outlook.sk', 'passport.com'];\n\n// List of domains used by Yahoo Mail\n// This list is likely incomplete\nvar yahoo_domains = ['rocketmail.com', 'yahoo.ca', 'yahoo.co.uk', 'yahoo.com', 'yahoo.de', 'yahoo.fr', 'yahoo.in', 'yahoo.it', 'ymail.com'];\n\n// List of domains used by yandex.ru\nvar yandex_domains = ['yandex.ru', 'yandex.ua', 'yandex.kz', 'yandex.com', 'yandex.by', 'ya.ru'];\n\n// replace single dots, but not multiple consecutive dots\nfunction dotsReplacer(match) {\n  if (match.length > 1) {\n    return match;\n  }\n  return '';\n}\nfunction normalizeEmail(email, options) {\n  options = (0, _merge.default)(options, default_normalize_email_options);\n  var raw_parts = email.split('@');\n  var domain = raw_parts.pop();\n  var user = raw_parts.join('@');\n  var parts = [user, domain];\n\n  // The domain is always lowercased, as it's case-insensitive per RFC 1035\n  parts[1] = parts[1].toLowerCase();\n  if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {\n    // Address is GMail\n    if (options.gmail_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n    if (options.gmail_remove_dots) {\n      // this does not replace consecutive dots like example..email@gmail.com\n      parts[0] = parts[0].replace(/\\.+/g, dotsReplacer);\n    }\n    if (!parts[0].length) {\n      return false;\n    }\n    if (options.all_lowercase || options.gmail_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n    parts[1] = options.gmail_convert_googlemaildotcom ? 'gmail.com' : parts[1];\n  } else if (icloud_domains.indexOf(parts[1]) >= 0) {\n    // Address is iCloud\n    if (options.icloud_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n    if (!parts[0].length) {\n      return false;\n    }\n    if (options.all_lowercase || options.icloud_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (outlookdotcom_domains.indexOf(parts[1]) >= 0) {\n    // Address is Outlook.com\n    if (options.outlookdotcom_remove_subaddress) {\n      parts[0] = parts[0].split('+')[0];\n    }\n    if (!parts[0].length) {\n      return false;\n    }\n    if (options.all_lowercase || options.outlookdotcom_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (yahoo_domains.indexOf(parts[1]) >= 0) {\n    // Address is Yahoo\n    if (options.yahoo_remove_subaddress) {\n      var components = parts[0].split('-');\n      parts[0] = components.length > 1 ? components.slice(0, -1).join('-') : components[0];\n    }\n    if (!parts[0].length) {\n      return false;\n    }\n    if (options.all_lowercase || options.yahoo_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n  } else if (yandex_domains.indexOf(parts[1]) >= 0) {\n    if (options.all_lowercase || options.yandex_lowercase) {\n      parts[0] = parts[0].toLowerCase();\n    }\n    parts[1] = options.yandex_convert_yandexru ? 'yandex.ru' : parts[1];\n  } else if (options.all_lowercase) {\n    // Any other address\n    parts[0] = parts[0].toLowerCase();\n  }\n  return parts.join('@');\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isSlug;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar charsetRegex = /^[^\\s-_](?!.*?[-_]{2,})[a-z0-9-\\\\][^\\s]*[^-_\\s]$/;\nfunction isSlug(str) {\n  (0, _assertString.default)(str);\n  return charsetRegex.test(str);\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isLicensePlate;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar validators = {\n  'cs-CZ': function csCZ(str) {\n    return /^(([ABCDEFHIJKLMNPRSTUVXYZ]|[0-9])-?){5,8}$/.test(str);\n  },\n  'de-DE': function deDE(str) {\n    return /^((A|AA|AB|AC|AE|AH|AK|AM|AN|A\u00D6|AP|AS|AT|AU|AW|AZ|B|BA|BB|BC|BE|BF|BH|BI|BK|BL|BM|BN|BO|B\u00D6|BS|BT|BZ|C|CA|CB|CE|CO|CR|CW|D|DA|DD|DE|DH|DI|DL|DM|DN|DO|DU|DW|DZ|E|EA|EB|ED|EE|EF|EG|EH|EI|EL|EM|EN|ER|ES|EU|EW|F|FB|FD|FF|FG|FI|FL|FN|FO|FR|FS|FT|F\u00DC|FW|FZ|G|GA|GC|GD|GE|GF|GG|GI|GK|GL|GM|GN|G\u00D6|GP|GR|GS|GT|G\u00DC|GV|GW|GZ|H|HA|HB|HC|HD|HE|HF|HG|HH|HI|HK|HL|HM|HN|HO|HP|HR|HS|HU|HV|HX|HY|HZ|IK|IL|IN|IZ|J|JE|JL|K|KA|KB|KC|KE|KF|KG|KH|KI|KK|KL|KM|KN|KO|KR|KS|KT|KU|KW|KY|L|LA|LB|LC|LD|LF|LG|LH|LI|LL|LM|LN|L\u00D6|LP|LR|LU|M|MA|MB|MC|MD|ME|MG|MH|MI|MK|ML|MM|MN|MO|MQ|MR|MS|M\u00DC|MW|MY|MZ|N|NB|ND|NE|NF|NH|NI|NK|NM|N\u00D6|NP|NR|NT|NU|NW|NY|NZ|OA|OB|OC|OD|OE|OF|OG|OH|OK|OL|OP|OS|OZ|P|PA|PB|PE|PF|PI|PL|PM|PN|PR|PS|PW|PZ|R|RA|RC|RD|RE|RG|RH|RI|RL|RM|RN|RO|RP|RS|RT|RU|RV|RW|RZ|S|SB|SC|SE|SG|SI|SK|SL|SM|SN|SO|SP|SR|ST|SU|SW|SY|SZ|TE|TF|TG|TO|TP|TR|TS|TT|T\u00DC|\u00DCB|UE|UH|UL|UM|UN|V|VB|VG|VK|VR|VS|W|WA|WB|WE|WF|WI|WK|WL|WM|WN|WO|WR|WS|WT|W\u00DC|WW|WZ|Z|ZE|ZI|ZP|ZR|ZW|ZZ)[- ]?[A-Z]{1,2}[- ]?\\d{1,4}|(ABG|ABI|AIB|AIC|ALF|ALZ|ANA|ANG|ANK|APD|ARN|ART|ASL|ASZ|AUR|AZE|BAD|BAR|BBG|BCH|BED|BER|BGD|BGL|BID|BIN|BIR|BIT|BIW|BKS|BLB|BLK|BNA|BOG|BOH|BOR|BOT|BRA|BRB|BRG|BRK|BRL|BRV|BSB|BSK|BTF|B\u00DCD|BUL|B\u00DCR|B\u00DCS|B\u00DCZ|CAS|CHA|CLP|CLZ|COC|COE|CUX|DAH|DAN|DAU|DBR|DEG|DEL|DGF|DIL|DIN|DIZ|DKB|DLG|DON|DUD|D\u00DCW|EBE|EBN|EBS|ECK|EIC|EIL|EIN|EIS|EMD|EMS|ERB|ERH|ERK|ERZ|ESB|ESW|FDB|FDS|FEU|FFB|FKB|FL\u00D6|FOR|FRG|FRI|FRW|FTL|F\u00DCS|GAN|GAP|GDB|GEL|GEO|GER|GHA|GHC|GLA|GMN|GNT|GOA|GOH|GRA|GRH|GRI|GRM|GRZ|GTH|GUB|GUN|GVM|HAB|HAL|HAM|HAS|HBN|HBS|HCH|HDH|HDL|HEB|HEF|HEI|HER|HET|HGN|HGW|HHM|HIG|HIP|HM\u00DC|HOG|HOH|HOL|HOM|HOR|H\u00D6S|HOT|HRO|HSK|HST|HVL|HWI|IGB|ILL|J\u00DCL|KEH|KEL|KEM|KIB|KLE|KLZ|K\u00D6N|K\u00D6T|K\u00D6Z|KRU|K\u00DCN|KUS|KYF|LAN|LAU|LBS|LBZ|LDK|LDS|LEO|LER|LEV|LIB|LIF|LIP|L\u00D6B|LOS|LRO|LSZ|L\u00DCN|LUP|LWL|MAB|MAI|MAK|MAL|MED|MEG|MEI|MEK|MEL|MER|MET|MGH|MGN|MHL|MIL|MKK|MOD|MOL|MON|MOS|MSE|MSH|MSP|MST|MTK|MTL|M\u00DCB|M\u00DCR|MYK|MZG|NAB|NAI|NAU|NDH|NEA|NEB|NEC|NEN|NES|NEW|NMB|NMS|NOH|NOL|NOM|NOR|NVP|NWM|OAL|OBB|OBG|OCH|OHA|\u00D6HR|OHV|OHZ|OPR|OSL|OVI|OVL|OVP|PAF|PAN|PAR|PCH|PEG|PIR|PL\u00D6|PR\u00DC|QFT|QLB|RDG|REG|REH|REI|RID|RIE|ROD|ROF|ROK|ROL|ROS|ROT|ROW|RSL|R\u00DCD|R\u00DCG|SAB|SAD|SAN|SAW|SBG|SBK|SCZ|SDH|SDL|SDT|SEB|SEE|SEF|SEL|SFB|SFT|SGH|SHA|SHG|SHK|SHL|SIG|SIM|SLE|SLF|SLK|SLN|SLS|SL\u00DC|SLZ|SM\u00DC|SOB|SOG|SOK|S\u00D6M|SON|SPB|SPN|SRB|SRO|STA|STB|STD|STE|STL|SUL|S\u00DCW|SWA|SZB|TBB|TDO|TET|TIR|T\u00D6L|TUT|UEM|UER|UFF|USI|VAI|VEC|VER|VIB|VIE|VIT|VOH|WAF|WAK|WAN|WAR|WAT|WBS|WDA|WEL|WEN|WER|WES|WHV|WIL|WIS|WIT|WIZ|WLG|WMS|WND|WOB|WOH|WOL|WOR|WOS|WRN|WSF|WST|WSW|WTL|WTM|WUG|W\u00DCM|WUN|WUR|WZL|ZEL|ZIG)[- ]?(([A-Z][- ]?\\d{1,4})|([A-Z]{2}[- ]?\\d{1,3})))[- ]?(E|H)?$/.test(str);\n  },\n  'de-LI': function deLI(str) {\n    return /^FL[- ]?\\d{1,5}[UZ]?$/.test(str);\n  },\n  'en-IN': function enIN(str) {\n    return /^[A-Z]{2}[ -]?[0-9]{1,2}(?:[ -]?[A-Z])(?:[ -]?[A-Z]*)?[ -]?[0-9]{4}$/.test(str);\n  },\n  'en-SG': function enSG(str) {\n    return /^[A-Z]{3}[ -]?[\\d]{4}[ -]?[A-Z]{1}$/.test(str);\n  },\n  'es-AR': function esAR(str) {\n    return /^(([A-Z]{2} ?[0-9]{3} ?[A-Z]{2})|([A-Z]{3} ?[0-9]{3}))$/.test(str);\n  },\n  'fi-FI': function fiFI(str) {\n    return /^(?=.{4,7})(([A-Z]{1,3}|[0-9]{1,3})[\\s-]?([A-Z]{1,3}|[0-9]{1,5}))$/.test(str);\n  },\n  'hu-HU': function huHU(str) {\n    return /^((((?!AAA)(([A-NPRSTVZWXY]{1})([A-PR-Z]{1})([A-HJ-NPR-Z]))|(A[ABC]I)|A[ABC]O|A[A-W]Q|BPI|BPO|UCO|UDO|XAO)-(?!000)\\d{3})|(M\\d{6})|((CK|DT|CD|HC|H[ABEFIKLMNPRSTVX]|MA|OT|R[A-Z]) \\d{2}-\\d{2})|(CD \\d{3}-\\d{3})|(C-(C|X) \\d{4})|(X-(A|B|C) \\d{4})|(([EPVZ]-\\d{5}))|(S A[A-Z]{2} \\d{2})|(SP \\d{2}-\\d{2}))$/.test(str);\n  },\n  'pt-BR': function ptBR(str) {\n    return /^[A-Z]{3}[ -]?[0-9][A-Z][0-9]{2}|[A-Z]{3}[ -]?[0-9]{4}$/.test(str);\n  },\n  'pt-PT': function ptPT(str) {\n    return /^(([A-Z]{2}[ -\u00B7]?[0-9]{2}[ -\u00B7]?[0-9]{2})|([0-9]{2}[ -\u00B7]?[A-Z]{2}[ -\u00B7]?[0-9]{2})|([0-9]{2}[ -\u00B7]?[0-9]{2}[ -\u00B7]?[A-Z]{2})|([A-Z]{2}[ -\u00B7]?[0-9]{2}[ -\u00B7]?[A-Z]{2}))$/.test(str);\n  },\n  'sq-AL': function sqAL(str) {\n    return /^[A-Z]{2}[- ]?((\\d{3}[- ]?(([A-Z]{2})|T))|(R[- ]?\\d{3}))$/.test(str);\n  },\n  'sv-SE': function svSE(str) {\n    return /^[A-HJ-PR-UW-Z]{3} ?[\\d]{2}[A-HJ-PR-UW-Z1-9]$|(^[A-Z\u00C5\u00C4\u00D6 ]{2,7}$)/.test(str.trim());\n  },\n  'en-PK': function enPK(str) {\n    return /(^[A-Z]{2}((\\s|-){0,1})[0-9]{3,4}((\\s|-)[0-9]{2}){0,1}$)|(^[A-Z]{3}((\\s|-){0,1})[0-9]{3,4}((\\s|-)[0-9]{2}){0,1}$)|(^[A-Z]{4}((\\s|-){0,1})[0-9]{3,4}((\\s|-)[0-9]{2}){0,1}$)|(^[A-Z]((\\s|-){0,1})[0-9]{4}((\\s|-)[0-9]{2}){0,1}$)/.test(str.trim());\n  }\n};\nfunction isLicensePlate(str, locale) {\n  (0, _assertString.default)(str);\n  if (locale in validators) {\n    return validators[locale](str);\n  } else if (locale === 'any') {\n    for (var key in validators) {\n      /* eslint guard-for-in: 0 */\n      var validator = validators[key];\n      if (validator(str)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isStrongPassword;\nvar _merge = _interopRequireDefault(require(\"./util/merge\"));\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar upperCaseRegex = /^[A-Z]$/;\nvar lowerCaseRegex = /^[a-z]$/;\nvar numberRegex = /^[0-9]$/;\nvar symbolRegex = /^[-#!$@\u00A3%^&*()_+|~=`{}\\[\\]:\";'<>?,.\\/\\\\ ]$/;\nvar defaultOptions = {\n  minLength: 8,\n  minLowercase: 1,\n  minUppercase: 1,\n  minNumbers: 1,\n  minSymbols: 1,\n  returnScore: false,\n  pointsPerUnique: 1,\n  pointsPerRepeat: 0.5,\n  pointsForContainingLower: 10,\n  pointsForContainingUpper: 10,\n  pointsForContainingNumber: 10,\n  pointsForContainingSymbol: 10\n};\n\n/* Counts number of occurrences of each char in a string\n * could be moved to util/ ?\n*/\nfunction countChars(str) {\n  var result = {};\n  Array.from(str).forEach(function (char) {\n    var curVal = result[char];\n    if (curVal) {\n      result[char] += 1;\n    } else {\n      result[char] = 1;\n    }\n  });\n  return result;\n}\n\n/* Return information about a password */\nfunction analyzePassword(password) {\n  var charMap = countChars(password);\n  var analysis = {\n    length: password.length,\n    uniqueChars: Object.keys(charMap).length,\n    uppercaseCount: 0,\n    lowercaseCount: 0,\n    numberCount: 0,\n    symbolCount: 0\n  };\n  Object.keys(charMap).forEach(function (char) {\n    /* istanbul ignore else */\n    if (upperCaseRegex.test(char)) {\n      analysis.uppercaseCount += charMap[char];\n    } else if (lowerCaseRegex.test(char)) {\n      analysis.lowercaseCount += charMap[char];\n    } else if (numberRegex.test(char)) {\n      analysis.numberCount += charMap[char];\n    } else if (symbolRegex.test(char)) {\n      analysis.symbolCount += charMap[char];\n    }\n  });\n  return analysis;\n}\nfunction scorePassword(analysis, scoringOptions) {\n  var points = 0;\n  points += analysis.uniqueChars * scoringOptions.pointsPerUnique;\n  points += (analysis.length - analysis.uniqueChars) * scoringOptions.pointsPerRepeat;\n  if (analysis.lowercaseCount > 0) {\n    points += scoringOptions.pointsForContainingLower;\n  }\n  if (analysis.uppercaseCount > 0) {\n    points += scoringOptions.pointsForContainingUpper;\n  }\n  if (analysis.numberCount > 0) {\n    points += scoringOptions.pointsForContainingNumber;\n  }\n  if (analysis.symbolCount > 0) {\n    points += scoringOptions.pointsForContainingSymbol;\n  }\n  return points;\n}\nfunction isStrongPassword(str) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  (0, _assertString.default)(str);\n  var analysis = analyzePassword(str);\n  options = (0, _merge.default)(options || {}, defaultOptions);\n  if (options.returnScore) {\n    return scorePassword(analysis, options);\n  }\n  return analysis.length >= options.minLength && analysis.lowercaseCount >= options.minLowercase && analysis.uppercaseCount >= options.minUppercase && analysis.numberCount >= options.minNumbers && analysis.symbolCount >= options.minSymbols;\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isVAT;\nexports.vatMatchers = void 0;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar algorithms = _interopRequireWildcard(require(\"./util/algorithms\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar AU = function AU(str) {\n  var match = str.match(/^(AU)?(\\d{11})$/);\n  if (!match) {\n    return false;\n  }\n  // @see {@link https://abr.business.gov.au/Help/AbnFormat}\n  var weights = [10, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19];\n  str = str.replace(/^AU/, '');\n  var ABN = (parseInt(str.slice(0, 1), 10) - 1).toString() + str.slice(1);\n  var total = 0;\n  for (var i = 0; i < 11; i++) {\n    total += weights[i] * ABN.charAt(i);\n  }\n  return total !== 0 && total % 89 === 0;\n};\nvar CH = function CH(str) {\n  // @see {@link https://www.ech.ch/de/ech/ech-0097/5.2.0}\n  var hasValidCheckNumber = function hasValidCheckNumber(digits) {\n    var lastDigit = digits.pop(); // used as check number\n    var weights = [5, 4, 3, 2, 7, 6, 5, 4];\n    var calculatedCheckNumber = (11 - digits.reduce(function (acc, el, idx) {\n      return acc + el * weights[idx];\n    }, 0) % 11) % 11;\n    return lastDigit === calculatedCheckNumber;\n  };\n\n  // @see {@link https://www.estv.admin.ch/estv/de/home/mehrwertsteuer/uid/mwst-uid-nummer.html}\n  return /^(CHE[- ]?)?(\\d{9}|(\\d{3}\\.\\d{3}\\.\\d{3})|(\\d{3} \\d{3} \\d{3})) ?(TVA|MWST|IVA)?$/.test(str) && hasValidCheckNumber(str.match(/\\d/g).map(function (el) {\n    return +el;\n  }));\n};\nvar PT = function PT(str) {\n  var match = str.match(/^(PT)?(\\d{9})$/);\n  if (!match) {\n    return false;\n  }\n  var tin = match[2];\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11;\n  if (checksum > 9) {\n    return parseInt(tin[8], 10) === 0;\n  }\n  return checksum === parseInt(tin[8], 10);\n};\nvar vatMatchers = exports.vatMatchers = {\n  /**\r\n   * European Union VAT identification numbers\r\n   */\n  AT: function AT(str) {\n    return /^(AT)?U\\d{8}$/.test(str);\n  },\n  BE: function BE(str) {\n    return /^(BE)?\\d{10}$/.test(str);\n  },\n  BG: function BG(str) {\n    return /^(BG)?\\d{9,10}$/.test(str);\n  },\n  HR: function HR(str) {\n    return /^(HR)?\\d{11}$/.test(str);\n  },\n  CY: function CY(str) {\n    return /^(CY)?\\w{9}$/.test(str);\n  },\n  CZ: function CZ(str) {\n    return /^(CZ)?\\d{8,10}$/.test(str);\n  },\n  DK: function DK(str) {\n    return /^(DK)?\\d{8}$/.test(str);\n  },\n  EE: function EE(str) {\n    return /^(EE)?\\d{9}$/.test(str);\n  },\n  FI: function FI(str) {\n    return /^(FI)?\\d{8}$/.test(str);\n  },\n  FR: function FR(str) {\n    return /^(FR)?\\w{2}\\d{9}$/.test(str);\n  },\n  DE: function DE(str) {\n    return /^(DE)?\\d{9}$/.test(str);\n  },\n  EL: function EL(str) {\n    return /^(EL)?\\d{9}$/.test(str);\n  },\n  HU: function HU(str) {\n    return /^(HU)?\\d{8}$/.test(str);\n  },\n  IE: function IE(str) {\n    return /^(IE)?\\d{7}\\w{1}(W)?$/.test(str);\n  },\n  IT: function IT(str) {\n    return /^(IT)?\\d{11}$/.test(str);\n  },\n  LV: function LV(str) {\n    return /^(LV)?\\d{11}$/.test(str);\n  },\n  LT: function LT(str) {\n    return /^(LT)?\\d{9,12}$/.test(str);\n  },\n  LU: function LU(str) {\n    return /^(LU)?\\d{8}$/.test(str);\n  },\n  MT: function MT(str) {\n    return /^(MT)?\\d{8}$/.test(str);\n  },\n  NL: function NL(str) {\n    return /^(NL)?\\d{9}B\\d{2}$/.test(str);\n  },\n  PL: function PL(str) {\n    return /^(PL)?(\\d{10}|(\\d{3}-\\d{3}-\\d{2}-\\d{2})|(\\d{3}-\\d{2}-\\d{2}-\\d{3}))$/.test(str);\n  },\n  PT: PT,\n  RO: function RO(str) {\n    return /^(RO)?\\d{2,10}$/.test(str);\n  },\n  SK: function SK(str) {\n    return /^(SK)?\\d{10}$/.test(str);\n  },\n  SI: function SI(str) {\n    return /^(SI)?\\d{8}$/.test(str);\n  },\n  ES: function ES(str) {\n    return /^(ES)?\\w\\d{7}[A-Z]$/.test(str);\n  },\n  SE: function SE(str) {\n    return /^(SE)?\\d{12}$/.test(str);\n  },\n  /**\r\n   * VAT numbers of non-EU countries\r\n   */\n  AL: function AL(str) {\n    return /^(AL)?\\w{9}[A-Z]$/.test(str);\n  },\n  MK: function MK(str) {\n    return /^(MK)?\\d{13}$/.test(str);\n  },\n  AU: AU,\n  BY: function BY(str) {\n    return /^(\u0423\u041D\u041F )?\\d{9}$/.test(str);\n  },\n  CA: function CA(str) {\n    return /^(CA)?\\d{9}$/.test(str);\n  },\n  IS: function IS(str) {\n    return /^(IS)?\\d{5,6}$/.test(str);\n  },\n  IN: function IN(str) {\n    return /^(IN)?\\d{15}$/.test(str);\n  },\n  ID: function ID(str) {\n    return /^(ID)?(\\d{15}|(\\d{2}.\\d{3}.\\d{3}.\\d{1}-\\d{3}.\\d{3}))$/.test(str);\n  },\n  IL: function IL(str) {\n    return /^(IL)?\\d{9}$/.test(str);\n  },\n  KZ: function KZ(str) {\n    return /^(KZ)?\\d{12}$/.test(str);\n  },\n  NZ: function NZ(str) {\n    return /^(NZ)?\\d{9}$/.test(str);\n  },\n  NG: function NG(str) {\n    return /^(NG)?(\\d{12}|(\\d{8}-\\d{4}))$/.test(str);\n  },\n  NO: function NO(str) {\n    return /^(NO)?\\d{9}MVA$/.test(str);\n  },\n  PH: function PH(str) {\n    return /^(PH)?(\\d{12}|\\d{3} \\d{3} \\d{3} \\d{3})$/.test(str);\n  },\n  RU: function RU(str) {\n    return /^(RU)?(\\d{10}|\\d{12})$/.test(str);\n  },\n  SM: function SM(str) {\n    return /^(SM)?\\d{5}$/.test(str);\n  },\n  SA: function SA(str) {\n    return /^(SA)?\\d{15}$/.test(str);\n  },\n  RS: function RS(str) {\n    return /^(RS)?\\d{9}$/.test(str);\n  },\n  CH: CH,\n  TR: function TR(str) {\n    return /^(TR)?\\d{10}$/.test(str);\n  },\n  UA: function UA(str) {\n    return /^(UA)?\\d{12}$/.test(str);\n  },\n  GB: function GB(str) {\n    return /^GB((\\d{3} \\d{4} ([0-8][0-9]|9[0-6]))|(\\d{9} \\d{3})|(((GD[0-4])|(HA[5-9]))[0-9]{2}))$/.test(str);\n  },\n  UZ: function UZ(str) {\n    return /^(UZ)?\\d{9}$/.test(str);\n  },\n  /**\r\n   * VAT numbers of Latin American countries\r\n   */\n  AR: function AR(str) {\n    return /^(AR)?\\d{11}$/.test(str);\n  },\n  BO: function BO(str) {\n    return /^(BO)?\\d{7}$/.test(str);\n  },\n  BR: function BR(str) {\n    return /^(BR)?((\\d{2}.\\d{3}.\\d{3}\\/\\d{4}-\\d{2})|(\\d{3}.\\d{3}.\\d{3}-\\d{2}))$/.test(str);\n  },\n  CL: function CL(str) {\n    return /^(CL)?\\d{8}-\\d{1}$/.test(str);\n  },\n  CO: function CO(str) {\n    return /^(CO)?\\d{10}$/.test(str);\n  },\n  CR: function CR(str) {\n    return /^(CR)?\\d{9,12}$/.test(str);\n  },\n  EC: function EC(str) {\n    return /^(EC)?\\d{13}$/.test(str);\n  },\n  SV: function SV(str) {\n    return /^(SV)?\\d{4}-\\d{6}-\\d{3}-\\d{1}$/.test(str);\n  },\n  GT: function GT(str) {\n    return /^(GT)?\\d{7}-\\d{1}$/.test(str);\n  },\n  HN: function HN(str) {\n    return /^(HN)?$/.test(str);\n  },\n  MX: function MX(str) {\n    return /^(MX)?\\w{3,4}\\d{6}\\w{3}$/.test(str);\n  },\n  NI: function NI(str) {\n    return /^(NI)?\\d{3}-\\d{6}-\\d{4}\\w{1}$/.test(str);\n  },\n  PA: function PA(str) {\n    return /^(PA)?$/.test(str);\n  },\n  PY: function PY(str) {\n    return /^(PY)?\\d{6,8}-\\d{1}$/.test(str);\n  },\n  PE: function PE(str) {\n    return /^(PE)?\\d{11}$/.test(str);\n  },\n  DO: function DO(str) {\n    return /^(DO)?(\\d{11}|(\\d{3}-\\d{7}-\\d{1})|[1,4,5]{1}\\d{8}|([1,4,5]{1})-\\d{2}-\\d{5}-\\d{1})$/.test(str);\n  },\n  UY: function UY(str) {\n    return /^(UY)?\\d{12}$/.test(str);\n  },\n  VE: function VE(str) {\n    return /^(VE)?[J,G,V,E]{1}-(\\d{9}|(\\d{8}-\\d{1}))$/.test(str);\n  }\n};\nfunction isVAT(str, countryCode) {\n  (0, _assertString.default)(str);\n  (0, _assertString.default)(countryCode);\n  if (countryCode in vatMatchers) {\n    return vatMatchers[countryCode](str);\n  }\n  throw new Error(\"Invalid country code: '\".concat(countryCode, \"'\"));\n}", "\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toDate = _interopRequireDefault(require(\"./lib/toDate\"));\nvar _toFloat = _interopRequireDefault(require(\"./lib/toFloat\"));\nvar _toInt = _interopRequireDefault(require(\"./lib/toInt\"));\nvar _toBoolean = _interopRequireDefault(require(\"./lib/toBoolean\"));\nvar _equals = _interopRequireDefault(require(\"./lib/equals\"));\nvar _contains = _interopRequireDefault(require(\"./lib/contains\"));\nvar _matches = _interopRequireDefault(require(\"./lib/matches\"));\nvar _isEmail = _interopRequireDefault(require(\"./lib/isEmail\"));\nvar _isURL = _interopRequireDefault(require(\"./lib/isURL\"));\nvar _isMACAddress = _interopRequireDefault(require(\"./lib/isMACAddress\"));\nvar _isIP = _interopRequireDefault(require(\"./lib/isIP\"));\nvar _isIPRange = _interopRequireDefault(require(\"./lib/isIPRange\"));\nvar _isFQDN = _interopRequireDefault(require(\"./lib/isFQDN\"));\nvar _isDate = _interopRequireDefault(require(\"./lib/isDate\"));\nvar _isTime = _interopRequireDefault(require(\"./lib/isTime\"));\nvar _isBoolean = _interopRequireDefault(require(\"./lib/isBoolean\"));\nvar _isLocale = _interopRequireDefault(require(\"./lib/isLocale\"));\nvar _isAbaRouting = _interopRequireDefault(require(\"./lib/isAbaRouting\"));\nvar _isAlpha = _interopRequireWildcard(require(\"./lib/isAlpha\"));\nvar _isAlphanumeric = _interopRequireWildcard(require(\"./lib/isAlphanumeric\"));\nvar _isNumeric = _interopRequireDefault(require(\"./lib/isNumeric\"));\nvar _isPassportNumber = _interopRequireWildcard(require(\"./lib/isPassportNumber\"));\nvar _isPort = _interopRequireDefault(require(\"./lib/isPort\"));\nvar _isLowercase = _interopRequireDefault(require(\"./lib/isLowercase\"));\nvar _isUppercase = _interopRequireDefault(require(\"./lib/isUppercase\"));\nvar _isIMEI = _interopRequireDefault(require(\"./lib/isIMEI\"));\nvar _isAscii = _interopRequireDefault(require(\"./lib/isAscii\"));\nvar _isFullWidth = _interopRequireDefault(require(\"./lib/isFullWidth\"));\nvar _isHalfWidth = _interopRequireDefault(require(\"./lib/isHalfWidth\"));\nvar _isVariableWidth = _interopRequireDefault(require(\"./lib/isVariableWidth\"));\nvar _isMultibyte = _interopRequireDefault(require(\"./lib/isMultibyte\"));\nvar _isSemVer = _interopRequireDefault(require(\"./lib/isSemVer\"));\nvar _isSurrogatePair = _interopRequireDefault(require(\"./lib/isSurrogatePair\"));\nvar _isInt = _interopRequireDefault(require(\"./lib/isInt\"));\nvar _isFloat = _interopRequireWildcard(require(\"./lib/isFloat\"));\nvar _isDecimal = _interopRequireDefault(require(\"./lib/isDecimal\"));\nvar _isHexadecimal = _interopRequireDefault(require(\"./lib/isHexadecimal\"));\nvar _isOctal = _interopRequireDefault(require(\"./lib/isOctal\"));\nvar _isDivisibleBy = _interopRequireDefault(require(\"./lib/isDivisibleBy\"));\nvar _isHexColor = _interopRequireDefault(require(\"./lib/isHexColor\"));\nvar _isRgbColor = _interopRequireDefault(require(\"./lib/isRgbColor\"));\nvar _isHSL = _interopRequireDefault(require(\"./lib/isHSL\"));\nvar _isISRC = _interopRequireDefault(require(\"./lib/isISRC\"));\nvar _isIBAN = _interopRequireWildcard(require(\"./lib/isIBAN\"));\nvar _isBIC = _interopRequireDefault(require(\"./lib/isBIC\"));\nvar _isMD = _interopRequireDefault(require(\"./lib/isMD5\"));\nvar _isHash = _interopRequireDefault(require(\"./lib/isHash\"));\nvar _isJWT = _interopRequireDefault(require(\"./lib/isJWT\"));\nvar _isJSON = _interopRequireDefault(require(\"./lib/isJSON\"));\nvar _isEmpty = _interopRequireDefault(require(\"./lib/isEmpty\"));\nvar _isLength = _interopRequireDefault(require(\"./lib/isLength\"));\nvar _isByteLength = _interopRequireDefault(require(\"./lib/isByteLength\"));\nvar _isULID = _interopRequireDefault(require(\"./lib/isULID\"));\nvar _isUUID = _interopRequireDefault(require(\"./lib/isUUID\"));\nvar _isMongoId = _interopRequireDefault(require(\"./lib/isMongoId\"));\nvar _isAfter = _interopRequireDefault(require(\"./lib/isAfter\"));\nvar _isBefore = _interopRequireDefault(require(\"./lib/isBefore\"));\nvar _isIn = _interopRequireDefault(require(\"./lib/isIn\"));\nvar _isLuhnNumber = _interopRequireDefault(require(\"./lib/isLuhnNumber\"));\nvar _isCreditCard = _interopRequireDefault(require(\"./lib/isCreditCard\"));\nvar _isIdentityCard = _interopRequireDefault(require(\"./lib/isIdentityCard\"));\nvar _isEAN = _interopRequireDefault(require(\"./lib/isEAN\"));\nvar _isISIN = _interopRequireDefault(require(\"./lib/isISIN\"));\nvar _isISBN = _interopRequireDefault(require(\"./lib/isISBN\"));\nvar _isISSN = _interopRequireDefault(require(\"./lib/isISSN\"));\nvar _isTaxID = _interopRequireDefault(require(\"./lib/isTaxID\"));\nvar _isMobilePhone = _interopRequireWildcard(require(\"./lib/isMobilePhone\"));\nvar _isEthereumAddress = _interopRequireDefault(require(\"./lib/isEthereumAddress\"));\nvar _isCurrency = _interopRequireDefault(require(\"./lib/isCurrency\"));\nvar _isBtcAddress = _interopRequireDefault(require(\"./lib/isBtcAddress\"));\nvar _isISO = require(\"./lib/isISO6346\");\nvar _isISO2 = _interopRequireDefault(require(\"./lib/isISO6391\"));\nvar _isISO3 = _interopRequireDefault(require(\"./lib/isISO8601\"));\nvar _isRFC = _interopRequireDefault(require(\"./lib/isRFC3339\"));\nvar _isISO4 = _interopRequireDefault(require(\"./lib/isISO15924\"));\nvar _isISO31661Alpha = _interopRequireDefault(require(\"./lib/isISO31661Alpha2\"));\nvar _isISO31661Alpha2 = _interopRequireDefault(require(\"./lib/isISO31661Alpha3\"));\nvar _isISO31661Numeric = _interopRequireDefault(require(\"./lib/isISO31661Numeric\"));\nvar _isISO5 = _interopRequireDefault(require(\"./lib/isISO4217\"));\nvar _isBase = _interopRequireDefault(require(\"./lib/isBase32\"));\nvar _isBase2 = _interopRequireDefault(require(\"./lib/isBase58\"));\nvar _isBase3 = _interopRequireDefault(require(\"./lib/isBase64\"));\nvar _isDataURI = _interopRequireDefault(require(\"./lib/isDataURI\"));\nvar _isMagnetURI = _interopRequireDefault(require(\"./lib/isMagnetURI\"));\nvar _isMailtoURI = _interopRequireDefault(require(\"./lib/isMailtoURI\"));\nvar _isMimeType = _interopRequireDefault(require(\"./lib/isMimeType\"));\nvar _isLatLong = _interopRequireDefault(require(\"./lib/isLatLong\"));\nvar _isPostalCode = _interopRequireWildcard(require(\"./lib/isPostalCode\"));\nvar _ltrim = _interopRequireDefault(require(\"./lib/ltrim\"));\nvar _rtrim = _interopRequireDefault(require(\"./lib/rtrim\"));\nvar _trim = _interopRequireDefault(require(\"./lib/trim\"));\nvar _escape = _interopRequireDefault(require(\"./lib/escape\"));\nvar _unescape = _interopRequireDefault(require(\"./lib/unescape\"));\nvar _stripLow = _interopRequireDefault(require(\"./lib/stripLow\"));\nvar _whitelist = _interopRequireDefault(require(\"./lib/whitelist\"));\nvar _blacklist = _interopRequireDefault(require(\"./lib/blacklist\"));\nvar _isWhitelisted = _interopRequireDefault(require(\"./lib/isWhitelisted\"));\nvar _normalizeEmail = _interopRequireDefault(require(\"./lib/normalizeEmail\"));\nvar _isSlug = _interopRequireDefault(require(\"./lib/isSlug\"));\nvar _isLicensePlate = _interopRequireDefault(require(\"./lib/isLicensePlate\"));\nvar _isStrongPassword = _interopRequireDefault(require(\"./lib/isStrongPassword\"));\nvar _isVAT = _interopRequireDefault(require(\"./lib/isVAT\"));\nfunction _interopRequireWildcard(e, t) { if (\"function\" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function _interopRequireWildcard(e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || \"object\" != _typeof(e) && \"function\" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (var _t in e) \"default\" !== _t && {}.hasOwnProperty.call(e, _t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, _t)) && (i.get || i.set) ? o(f, _t, i) : f[_t] = e[_t]); return f; })(e, t); }\nfunction _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }\nvar version = '13.15.15';\nvar validator = {\n  version: version,\n  toDate: _toDate.default,\n  toFloat: _toFloat.default,\n  toInt: _toInt.default,\n  toBoolean: _toBoolean.default,\n  equals: _equals.default,\n  contains: _contains.default,\n  matches: _matches.default,\n  isEmail: _isEmail.default,\n  isURL: _isURL.default,\n  isMACAddress: _isMACAddress.default,\n  isIP: _isIP.default,\n  isIPRange: _isIPRange.default,\n  isFQDN: _isFQDN.default,\n  isBoolean: _isBoolean.default,\n  isIBAN: _isIBAN.default,\n  isBIC: _isBIC.default,\n  isAbaRouting: _isAbaRouting.default,\n  isAlpha: _isAlpha.default,\n  isAlphaLocales: _isAlpha.locales,\n  isAlphanumeric: _isAlphanumeric.default,\n  isAlphanumericLocales: _isAlphanumeric.locales,\n  isNumeric: _isNumeric.default,\n  isPassportNumber: _isPassportNumber.default,\n  passportNumberLocales: _isPassportNumber.locales,\n  isPort: _isPort.default,\n  isLowercase: _isLowercase.default,\n  isUppercase: _isUppercase.default,\n  isAscii: _isAscii.default,\n  isFullWidth: _isFullWidth.default,\n  isHalfWidth: _isHalfWidth.default,\n  isVariableWidth: _isVariableWidth.default,\n  isMultibyte: _isMultibyte.default,\n  isSemVer: _isSemVer.default,\n  isSurrogatePair: _isSurrogatePair.default,\n  isInt: _isInt.default,\n  isIMEI: _isIMEI.default,\n  isFloat: _isFloat.default,\n  isFloatLocales: _isFloat.locales,\n  isDecimal: _isDecimal.default,\n  isHexadecimal: _isHexadecimal.default,\n  isOctal: _isOctal.default,\n  isDivisibleBy: _isDivisibleBy.default,\n  isHexColor: _isHexColor.default,\n  isRgbColor: _isRgbColor.default,\n  isHSL: _isHSL.default,\n  isISRC: _isISRC.default,\n  isMD5: _isMD.default,\n  isHash: _isHash.default,\n  isJWT: _isJWT.default,\n  isJSON: _isJSON.default,\n  isEmpty: _isEmpty.default,\n  isLength: _isLength.default,\n  isLocale: _isLocale.default,\n  isByteLength: _isByteLength.default,\n  isULID: _isULID.default,\n  isUUID: _isUUID.default,\n  isMongoId: _isMongoId.default,\n  isAfter: _isAfter.default,\n  isBefore: _isBefore.default,\n  isIn: _isIn.default,\n  isLuhnNumber: _isLuhnNumber.default,\n  isCreditCard: _isCreditCard.default,\n  isIdentityCard: _isIdentityCard.default,\n  isEAN: _isEAN.default,\n  isISIN: _isISIN.default,\n  isISBN: _isISBN.default,\n  isISSN: _isISSN.default,\n  isMobilePhone: _isMobilePhone.default,\n  isMobilePhoneLocales: _isMobilePhone.locales,\n  isPostalCode: _isPostalCode.default,\n  isPostalCodeLocales: _isPostalCode.locales,\n  isEthereumAddress: _isEthereumAddress.default,\n  isCurrency: _isCurrency.default,\n  isBtcAddress: _isBtcAddress.default,\n  isISO6346: _isISO.isISO6346,\n  isFreightContainerID: _isISO.isFreightContainerID,\n  isISO6391: _isISO2.default,\n  isISO8601: _isISO3.default,\n  isISO15924: _isISO4.default,\n  isRFC3339: _isRFC.default,\n  isISO31661Alpha2: _isISO31661Alpha.default,\n  isISO31661Alpha3: _isISO31661Alpha2.default,\n  isISO31661Numeric: _isISO31661Numeric.default,\n  isISO4217: _isISO5.default,\n  isBase32: _isBase.default,\n  isBase58: _isBase2.default,\n  isBase64: _isBase3.default,\n  isDataURI: _isDataURI.default,\n  isMagnetURI: _isMagnetURI.default,\n  isMailtoURI: _isMailtoURI.default,\n  isMimeType: _isMimeType.default,\n  isLatLong: _isLatLong.default,\n  ltrim: _ltrim.default,\n  rtrim: _rtrim.default,\n  trim: _trim.default,\n  escape: _escape.default,\n  unescape: _unescape.default,\n  stripLow: _stripLow.default,\n  whitelist: _whitelist.default,\n  blacklist: _blacklist.default,\n  isWhitelisted: _isWhitelisted.default,\n  normalizeEmail: _normalizeEmail.default,\n  toString: toString,\n  isSlug: _isSlug.default,\n  isStrongPassword: _isStrongPassword.default,\n  isTaxID: _isTaxID.default,\n  isDate: _isDate.default,\n  isTime: _isTime.default,\n  isLicensePlate: _isLicensePlate.default,\n  isVAT: _isVAT.default,\n  ibanLocales: _isIBAN.locales\n};\nvar _default = exports.default = validator;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;", "import * as validator from 'validator';\nimport { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_STRONG_PASSWORD = 'isStrongPassword';\n\n/**\n * Options to be passed to IsStrongPassword decorator.\n */\nexport type IsStrongPasswordOptions = Pick<\n  validator.StrongPasswordOptions,\n  'minLength' | 'minLowercase' | 'minUppercase' | 'minNumbers' | 'minSymbols'\n>;\n\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function isStrongPassword(value: unknown, options?: IsStrongPasswordOptions): boolean {\n  return typeof value === 'string' && validator.isStrongPassword(value, options);\n}\n\n/**\n * Checks if the string is a strong password.\n * If given value is not a string, then it returns false.\n */\nexport function IsStrongPassword(\n  options?: IsStrongPasswordOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_STRONG_PASSWORD,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isStrongPassword(value, args.constraints[0]),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property is not strong enough', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_TIMEZONE = 'isTimeZone';\n\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function isTimeZone(value: unknown): boolean {\n  try {\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    /** Specifying an invalid time-zone will raise a `RangeError: Invalid time zone specified` error. */\n    Intl.DateTimeFormat(undefined, { timeZone: value });\n\n    return true;\n  } catch (exception) {\n    return false;\n  }\n}\n\n/**\n * Checks if the string represents a valid IANA timezone\n * If the given value is not a valid IANA timezone, then it returns false.\n */\nexport function IsTimeZone(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_TIMEZONE,\n      validator: {\n        validate: (value, args): boolean => isTimeZone(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid IANA time-zone',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isBase58Validator from 'validator/lib/isBase58';\n\nexport const IS_BASE58 = 'isBase58';\n\n/**\n * Checks if a string is base58 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase58(value: unknown): boolean {\n  return typeof value === 'string' && isBase58Validator(value);\n}\n\n/**\n * Checks if a string is base58 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function IsBase58(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BASE58,\n      validator: {\n        validate: (value, args): boolean => isBase58(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be base58 encoded', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isTaxIDValidator from 'validator/lib/isTaxID';\n\nexport const IS_TAX_ID = 'isTaxId';\n\n/**\n * Checks if the string is a valid tax ID. Default locale is `en-US`.\n * If given value is not a string, then it returns false.\n *\n * Supported locales: bg-BG, cs-CZ, de-AT, de-DE, dk-DK, el-CY, el-GR, en-CA,\n * en-IE, en-US, es-ES, et-EE, fi-FI, fr-BE, fr-FR, fr-LU, hr-HR, hu-HU, it-IT,\n * lv-LV, mt-MT, nl-NL, pl-PL, pt-BR, pt-PT, ro-RO, sk-SK, sl-SI, sv-SE.\n */\nexport function isTaxId(value: unknown, locale?: string): boolean {\n  return typeof value === 'string' && isTaxIDValidator(value, locale || 'en-US');\n}\n\n/**\n * Checks if the string is a valid tax ID. Default locale is `en-US`.\n * If given value is not a string, then it returns false.\n *\n * Supported locales: bg-BG, cs-CZ, de-AT, de-DE, dk-DK, el-CY, el-GR, en-CA,\n * en-IE, en-US, es-ES, et-EE, fi-FI, fr-BE, fr-FR, fr-LU, hr-HR, hu-HU, it-IT,\n * lv-LV, mt-MT, nl-NL, pl-PL, pt-BR, pt-PT, ro-RO, sk-SK, sl-SI, sv-SE.\n */\nexport function IsTaxId(locale?: string, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_TAX_ID,\n      constraints: [locale],\n      validator: {\n        validate: (value, args): boolean => isTaxId(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a Tax Identification Number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport isISO4217Validator from 'validator/lib/isISO4217';\n\nexport const IS_ISO4217_CURRENCY_CODE = 'isISO4217CurrencyCode';\n\n/**\n * Check if the string is a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) officially assigned currency code.\n */\nexport function isISO4217CurrencyCode(value: unknown): boolean {\n  return typeof value === 'string' && isISO4217Validator(value);\n}\n\n/**\n * Check if the string is a valid [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) officially assigned currency code.\n */\nexport function IsISO4217CurrencyCode(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ISO4217_CURRENCY_CODE,\n      validator: {\n        validate: (value, args): boolean => isISO4217CurrencyCode(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a valid ISO4217 currency code',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_BOOLEAN = 'isBoolean';\n\n/**\n * Checks if a given value is a boolean.\n */\nexport function isBoolean(value: unknown): value is boolean {\n  return value instanceof Boolean || typeof value === 'boolean';\n}\n\n/**\n * Checks if a value is a boolean.\n */\nexport function IsBoolean(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_BOOLEAN,\n      validator: {\n        validate: (value, args): boolean => isBoolean(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a boolean value', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_DATE = 'isDate';\n\n/**\n * Checks if a given value is a date.\n */\nexport function isDate(value: unknown): value is Date {\n  return value instanceof Date && !isNaN(value.getTime());\n}\n\n/**\n * Checks if a value is a date.\n */\nexport function IsDate(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_DATE,\n      validator: {\n        validate: (value, args): boolean => isDate(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a Date instance', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_NUMBER = 'isNumber';\n\n/**\n * Options to be passed to IsNumber decorator.\n */\nexport interface IsNumberOptions {\n  allowNaN?: boolean;\n  allowInfinity?: boolean;\n  maxDecimalPlaces?: number;\n}\n\n/**\n * Checks if a given value is a number.\n */\nexport function isNumber(value: unknown, options: IsNumberOptions = {}): value is number {\n  if (typeof value !== 'number') {\n    return false;\n  }\n\n  if (value === Infinity || value === -Infinity) {\n    return !!options.allowInfinity;\n  }\n\n  if (Number.isNaN(value)) {\n    return !!options.allowNaN;\n  }\n\n  if (options.maxDecimalPlaces !== undefined) {\n    let decimalPlaces = 0;\n    if (value % 1 !== 0) {\n      decimalPlaces = value.toString().split('.')[1].length;\n    }\n    if (decimalPlaces > options.maxDecimalPlaces) {\n      return false;\n    }\n  }\n\n  return Number.isFinite(value);\n}\n\n/**\n * Checks if a value is a number.\n */\nexport function IsNumber(options: IsNumberOptions = {}, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NUMBER,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isNumber(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a number conforming to the specified constraints',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_ENUM = 'isEnum';\n\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function isEnum(value: unknown, entity: any): boolean {\n  const enumValues = Object.keys(entity).map(k => entity[k]);\n  return enumValues.includes(value);\n}\n\n/**\n * Returns the possible values from an enum (both simple number indexed and string indexed enums).\n */\nfunction validEnumValues(entity: any): string[] {\n  return Object.entries(entity)\n    .filter(([key, value]) => isNaN(parseInt(key)))\n    .map(([key, value]) => value as string);\n}\n\n/**\n * Checks if a given value is the member of the provided enum.\n */\nexport function IsEnum(entity: object, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ENUM,\n      constraints: [entity, validEnumValues(entity)],\n      validator: {\n        validate: (value, args): boolean => isEnum(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be one of the following values: $constraint2',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_INT = 'isInt';\n\n/**\n * Checks if value is an integer.\n */\nexport function isInt(val: unknown): val is Number {\n  return typeof val === 'number' && Number.isInteger(val);\n}\n\n/**\n * Checks if value is an integer.\n */\nexport function IsInt(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_INT,\n      validator: {\n        validate: (value, args): boolean => isInt(value),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be an integer number',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_STRING = 'isString';\n\n/**\n * Checks if a given value is a real string.\n */\nexport function isString(value: unknown): value is string {\n  return value instanceof String || typeof value === 'string';\n}\n\n/**\n * Checks if a given value is a real string.\n */\nexport function IsString(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_STRING,\n      validator: {\n        validate: (value, args): boolean => isString(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be a string', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_ARRAY = 'isArray';\n\n/**\n * Checks if a given value is an array\n */\nexport function isArray<T = any>(value: unknown): value is Array<T> {\n  return Array.isArray(value);\n}\n\n/**\n * Checks if a given value is an array\n */\nexport function IsArray(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_ARRAY,\n      validator: {\n        validate: (value, args): boolean => isArray(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an array', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_OBJECT = 'isObject';\n\n/**\n * Checks if the value is valid Object.\n * Returns false if the value is not an object.\n */\nexport function isObject<T = object>(value: unknown): value is T {\n  return value != null && (typeof value === 'object' || typeof value === 'function') && !Array.isArray(value);\n}\n\n/**\n * Checks if the value is valid Object.\n * Returns false if the value is not an object.\n */\nexport function IsObject(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_OBJECT,\n      validator: {\n        validate: (value, args): boolean => isObject(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property must be an object', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const ARRAY_CONTAINS = 'arrayContains';\n\n/**\n * Checks if array contains all values from the given array of values.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayContains(array: unknown, values: any[]): boolean {\n  if (!Array.isArray(array)) return false;\n\n  return values.every(value => array.indexOf(value) !== -1);\n}\n\n/**\n * Checks if array contains all values from the given array of values.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayContains(values: any[], validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: ARRAY_CONTAINS,\n      constraints: [values],\n      validator: {\n        validate: (value, args): boolean => arrayContains(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain $constraint1 values',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const ARRAY_NOT_CONTAINS = 'arrayNotContains';\n\n/**\n * Checks if array does not contain any of the given values.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayNotContains(array: unknown, values: any[]): boolean {\n  if (!Array.isArray(array)) return false;\n\n  return values.every(value => array.indexOf(value) === -1);\n}\n\n/**\n * Checks if array does not contain any of the given values.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayNotContains(values: any[], validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: ARRAY_NOT_CONTAINS,\n      constraints: [values],\n      validator: {\n        validate: (value, args): boolean => arrayNotContains(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property should not contain $constraint1 values',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const ARRAY_NOT_EMPTY = 'arrayNotEmpty';\n\n/**\n * Checks if given array is not empty.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayNotEmpty(array: unknown): boolean {\n  return Array.isArray(array) && array.length > 0;\n}\n\n/**\n * Checks if given array is not empty.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayNotEmpty(validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: ARRAY_NOT_EMPTY,\n      validator: {\n        validate: (value, args): boolean => arrayNotEmpty(value),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + '$property should not be empty', validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const ARRAY_MIN_SIZE = 'arrayMinSize';\n\n/**\n * Checks if the array's length is greater than or equal to the specified number.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayMinSize(array: unknown, min: number): boolean {\n  return Array.isArray(array) && array.length >= min;\n}\n\n/**\n * Checks if the array's length is greater than or equal to the specified number.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayMinSize(min: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: ARRAY_MIN_SIZE,\n      constraints: [min],\n      validator: {\n        validate: (value, args): boolean => arrayMinSize(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain at least $constraint1 elements',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const ARRAY_MAX_SIZE = 'arrayMaxSize';\n\n/**\n * Checks if the array's length is less or equal to the specified number.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayMaxSize(array: unknown, max: number): boolean {\n  return Array.isArray(array) && array.length <= max;\n}\n\n/**\n * Checks if the array's length is less or equal to the specified number.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayMaxSize(max: number, validationOptions?: ValidationOptions): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: ARRAY_MAX_SIZE,\n      constraints: [max],\n      validator: {\n        validate: (value, args): boolean => arrayMaxSize(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must contain no more than $constraint1 elements',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const ARRAY_UNIQUE = 'arrayUnique';\nexport type ArrayUniqueIdentifier<T = any> = (o: T) => any;\n\n/**\n * Checks if all array's values are unique. Comparison for objects is reference-based.\n * If null or undefined is given then this function returns false.\n */\nexport function arrayUnique(array: unknown[], identifier?: ArrayUniqueIdentifier): boolean {\n  if (!Array.isArray(array)) return false;\n\n  if (identifier) {\n    array = array.map(o => (o != null ? identifier(o) : o));\n  }\n\n  const uniqueItems = array.filter((a, b, c) => c.indexOf(a) === b);\n  return array.length === uniqueItems.length;\n}\n\n/**\n * Checks if all array's values are unique. Comparison for objects is reference-based.\n * If null or undefined is given then this function returns false.\n */\nexport function ArrayUnique<T = any>(\n  identifierOrOptions?: ArrayUniqueIdentifier<T> | ValidationOptions,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  const identifier = typeof identifierOrOptions === 'function' ? identifierOrOptions : undefined;\n  const options = typeof identifierOrOptions !== 'function' ? identifierOrOptions : validationOptions;\n\n  return ValidateBy(\n    {\n      name: ARRAY_UNIQUE,\n      validator: {\n        validate: (value, args): boolean => arrayUnique(value, identifier),\n        defaultMessage: buildMessage(eachPrefix => eachPrefix + \"All $property's elements must be unique\", options),\n      },\n    },\n    options\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\nimport { isObject } from '../typechecker/IsObject';\n\nexport const IS_NOT_EMPTY_OBJECT = 'isNotEmptyObject';\n\n/**\n * Checks if the value is valid Object & not empty.\n * Returns false if the value is not an object or an empty valid object.\n */\nexport function isNotEmptyObject(value: unknown, options?: { nullable?: boolean }): boolean {\n  if (!isObject(value)) {\n    return false;\n  }\n\n  if (options?.nullable === false) {\n    return !Object.values(value).every(propertyValue => propertyValue === null || propertyValue === undefined);\n  }\n\n  for (const key in value) {\n    if (value.hasOwnProperty(key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Checks if the value is valid Object & not empty.\n * Returns false if the value is not an object or an empty valid object.\n */\nexport function IsNotEmptyObject(\n  options?: { nullable?: boolean },\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_NOT_EMPTY_OBJECT,\n      constraints: [options],\n      validator: {\n        validate: (value, args): boolean => isNotEmptyObject(value, args?.constraints[0]),\n        defaultMessage: buildMessage(\n          eachPrefix => eachPrefix + '$property must be a non-empty object',\n          validationOptions\n        ),\n      },\n    },\n    validationOptions\n  );\n}\n", "import { ValidationOptions } from '../ValidationOptions';\nimport { buildMessage, ValidateBy } from '../common/ValidateBy';\n\nexport const IS_INSTANCE = 'isInstance';\n\n/**\n * Checks if the value is an instance of the specified object.\n */\nexport function isInstance(object: unknown, targetTypeConstructor: new (...args: any[]) => any): boolean {\n  return (\n    targetTypeConstructor && typeof targetTypeConstructor === 'function' && object instanceof targetTypeConstructor\n  );\n}\n\n/**\n * Checks if the value is an instance of the specified object.\n */\nexport function IsInstance(\n  targetType: new (...args: any[]) => any,\n  validationOptions?: ValidationOptions\n): PropertyDecorator {\n  return ValidateBy(\n    {\n      name: IS_INSTANCE,\n      constraints: [targetType],\n      validator: {\n        validate: (value, args): boolean => isInstance(value, args?.constraints[0]),\n        defaultMessage: buildMessage((eachPrefix, args) => {\n          if (args?.constraints[0]) {\n            return eachPrefix + `$property must be an instance of ${args?.constraints[0].name as string}`;\n          } else {\n            return eachPrefix + `${IS_INSTANCE} decorator expects and object as value, but got falsy value.`;\n          }\n        }, validationOptions),\n      },\n    },\n    validationOptions\n  );\n}\n", "// -------------------------------------------------------------------------\n// System\n// -------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------\n// Common checkers\n// -------------------------------------------------------------------------\n\nexport * from './common/Allow';\nexport * from './common/IsDefined';\nexport * from './common/IsOptional';\nexport * from './common/Validate';\nexport * from './common/ValidateBy';\nexport * from './common/ValidateIf';\nexport * from './common/ValidateNested';\nexport * from './common/ValidatePromise';\nexport * from './common/IsLatLong';\nexport * from './common/IsLatitude';\nexport * from './common/IsLongitude';\nexport * from './common/Equals';\nexport * from './common/NotEquals';\nexport * from './common/IsEmpty';\nexport * from './common/IsNotEmpty';\nexport * from './common/IsIn';\nexport * from './common/IsNotIn';\n\n// -------------------------------------------------------------------------\n// Number checkers\n// -------------------------------------------------------------------------\n\nexport * from './number/IsDivisibleBy';\nexport * from './number/IsPositive';\nexport * from './number/IsNegative';\nexport * from './number/Max';\nexport * from './number/Min';\n\n// -------------------------------------------------------------------------\n// Date checkers\n// -------------------------------------------------------------------------\n\nexport * from './date/MinDate';\nexport * from './date/MaxDate';\n\n// -------------------------------------------------------------------------\n// String checkers\n// -------------------------------------------------------------------------\n\nexport * from './string/Contains';\nexport * from './string/NotContains';\nexport * from './string/IsAlpha';\nexport * from './string/IsAlphanumeric';\nexport * from './string/IsDecimal';\nexport * from './string/IsAscii';\nexport * from './string/IsBase64';\nexport * from './string/IsByteLength';\nexport * from './string/IsCreditCard';\nexport * from './string/IsCurrency';\nexport * from './string/IsEmail';\nexport * from './string/IsFQDN';\nexport * from './string/IsFullWidth';\nexport * from './string/IsHalfWidth';\nexport * from './string/IsVariableWidth';\nexport * from './string/IsHexColor';\nexport * from './string/IsHexadecimal';\nexport * from './string/IsMacAddress';\nexport * from './string/IsIP';\nexport * from './string/IsPort';\nexport * from './string/IsISBN';\nexport * from './string/IsISIN';\nexport * from './string/IsISO8601';\nexport * from './string/IsJSON';\nexport * from './string/IsJWT';\nexport * from './string/IsLowercase';\nexport * from './string/IsMobilePhone';\nexport * from './string/IsISO31661Alpha2';\nexport * from './string/IsISO31661Alpha3';\nexport * from './string/IsMongoId';\nexport * from './string/IsMultibyte';\nexport * from './string/IsSurrogatePair';\nexport * from './string/IsUrl';\nexport * from './string/IsUUID';\nexport * from './string/IsFirebasePushId';\nexport * from './string/IsUppercase';\nexport * from './string/Length';\nexport * from './string/MaxLength';\nexport * from './string/MinLength';\nexport * from './string/Matches';\nexport * from './string/IsPhoneNumber';\nexport * from './string/IsMilitaryTime';\nexport * from './string/IsHash';\nexport * from './string/IsISSN';\nexport * from './string/IsDateString';\nexport * from './string/IsBooleanString';\nexport * from './string/IsNumberString';\nexport * from './string/IsBase32';\nexport * from './string/IsBIC';\nexport * from './string/IsBtcAddress';\nexport * from './string/IsDataURI';\nexport * from './string/IsEAN';\nexport * from './string/IsEthereumAddress';\nexport * from './string/IsHSL';\nexport * from './string/IsIBAN';\nexport * from './string/IsIdentityCard';\nexport * from './string/IsISRC';\nexport * from './string/IsLocale';\nexport * from './string/IsMagnetURI';\nexport * from './string/IsMimeType';\nexport * from './string/IsOctal';\nexport * from './string/IsPassportNumber';\nexport * from './string/IsPostalCode';\nexport * from './string/IsRFC3339';\nexport * from './string/IsRgbColor';\nexport * from './string/IsSemVer';\nexport * from './string/IsStrongPassword';\nexport * from './string/IsTimeZone';\nexport * from './string/IsBase58';\nexport * from './string/is-tax-id';\nexport * from './string/is-iso4217-currency-code';\n\n// -------------------------------------------------------------------------\n// Type checkers\n// -------------------------------------------------------------------------\n\nexport * from './typechecker/IsBoolean';\nexport * from './typechecker/IsDate';\nexport * from './typechecker/IsNumber';\nexport * from './typechecker/IsEnum';\nexport * from './typechecker/IsInt';\nexport * from './typechecker/IsString';\nexport * from './typechecker/IsArray';\nexport * from './typechecker/IsObject';\n\n// -------------------------------------------------------------------------\n// Array checkers\n// -------------------------------------------------------------------------\n\nexport * from './array/ArrayContains';\nexport * from './array/ArrayNotContains';\nexport * from './array/ArrayNotEmpty';\nexport * from './array/ArrayMinSize';\nexport * from './array/ArrayMaxSize';\nexport * from './array/ArrayUnique';\n\n// -------------------------------------------------------------------------\n// Object checkers\n// -------------------------------------------------------------------------\n\nexport * from './object/IsNotEmptyObject';\nexport * from './object/IsInstance';\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ValidatorConstraintInterface.js.map", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ValidatorOptions.js.map", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ValidationArguments.js.map", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ValidationSchema.js.map", "import { ValidationError } from './validation/ValidationError';\nimport { ValidatorOptions } from './validation/ValidatorOptions';\nimport { ValidationSchema } from './validation-schema/ValidationSchema';\nimport { getMetadataStorage } from './metadata/MetadataStorage';\nimport { Validator } from './validation/Validator';\nimport { getFromContainer } from './container';\n\n// -------------------------------------------------------------------------\n// Export everything api users needs\n// -------------------------------------------------------------------------\n\nexport * from './container';\nexport * from './decorator/decorators';\nexport * from './decorator/ValidationOptions';\nexport * from './validation/ValidatorConstraintInterface';\nexport * from './validation/ValidationError';\nexport * from './validation/ValidatorOptions';\nexport * from './validation/ValidationArguments';\nexport * from './validation/ValidationTypes';\nexport * from './validation/Validator';\nexport * from './validation-schema/ValidationSchema';\nexport * from './register-decorator';\nexport * from './metadata/MetadataStorage';\n\n// -------------------------------------------------------------------------\n// Shortcut methods for api users\n// -------------------------------------------------------------------------\n\n/**\n * Validates given object.\n */\nexport function validate(object: object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;\n\n/**\n * Validates given object by a given validation schema.\n */\nexport function validate(\n  schemaName: string,\n  object: object,\n  validatorOptions?: ValidatorOptions\n): Promise<ValidationError[]>;\n\n/**\n * Validates given object by object's decorators or given validation schema.\n */\nexport function validate(\n  schemaNameOrObject: object | string,\n  objectOrValidationOptions?: object | ValidatorOptions,\n  maybeValidatorOptions?: ValidatorOptions\n): Promise<ValidationError[]> {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validate(\n      schemaNameOrObject,\n      objectOrValidationOptions as object,\n      maybeValidatorOptions\n    );\n  } else {\n    return getFromContainer(Validator).validate(schemaNameOrObject, objectOrValidationOptions as ValidatorOptions);\n  }\n}\n\n/**\n * Validates given object and reject on error.\n */\nexport function validateOrReject(object: object, validatorOptions?: ValidatorOptions): Promise<void>;\n\n/**\n * Validates given object by a given validation schema and reject on error.\n */\nexport function validateOrReject(\n  schemaName: string,\n  object: object,\n  validatorOptions?: ValidatorOptions\n): Promise<void>;\n\n/**\n * Validates given object by object's decorators or given validation schema and reject on error.\n */\nexport function validateOrReject(\n  schemaNameOrObject: object | string,\n  objectOrValidationOptions?: object | ValidatorOptions,\n  maybeValidatorOptions?: ValidatorOptions\n): Promise<void> {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateOrReject(\n      schemaNameOrObject,\n      objectOrValidationOptions as object,\n      maybeValidatorOptions\n    );\n  } else {\n    return getFromContainer(Validator).validateOrReject(\n      schemaNameOrObject,\n      objectOrValidationOptions as ValidatorOptions\n    );\n  }\n}\n\n/**\n * Performs sync validation of the given object.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(object: object, validatorOptions?: ValidatorOptions): ValidationError[];\n\n/**\n * Validates given object by a given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(\n  schemaName: string,\n  object: object,\n  validatorOptions?: ValidatorOptions\n): ValidationError[];\n\n/**\n * Validates given object by object's decorators or given validation schema.\n * Note that this method completely ignores async validations.\n * If you want to properly perform validation you need to call validate method instead.\n */\nexport function validateSync(\n  schemaNameOrObject: object | string,\n  objectOrValidationOptions?: object | ValidatorOptions,\n  maybeValidatorOptions?: ValidatorOptions\n): ValidationError[] {\n  if (typeof schemaNameOrObject === 'string') {\n    return getFromContainer(Validator).validateSync(\n      schemaNameOrObject,\n      objectOrValidationOptions as object,\n      maybeValidatorOptions\n    );\n  } else {\n    return getFromContainer(Validator).validateSync(schemaNameOrObject, objectOrValidationOptions as ValidatorOptions);\n  }\n}\n\n/**\n * Registers a new validation schema.\n */\nexport function registerSchema(schema: ValidationSchema): void {\n  getMetadataStorage().addValidationSchema(schema);\n}\n", "import 'reflect-metadata'\nimport { APIGatewayProxyEvent, Context, APIGatewayProxyResult } from 'aws-lambda'\nimport { container } from '../../core/container'\nimport { TYPES } from '../../core/types'\nimport { IAppointmentService } from '../interface/IAppointmentService'\nimport { badRequest, success } from '../../utils/httpResponse'\nimport { validateDto } from '../../utils/validation'\nimport { CreateAppointmentDto } from '../dto/CreateAppointmentDto'\n\nexport async function handler(\n  event: APIGatewayProxyEvent,\n  _context: Context\n): Promise<APIGatewayProxyResult> {\n  try {\n    if (!event.body) {\n      return badRequest('Missing request body')\n    }\n\n    const input = JSON.parse(event.body)\n\n    const dto = Object.assign(new CreateAppointmentDto(), input.agendamento)\n\n    const validationErrors = await validateDto(dto)\n    if (validationErrors.length > 0) {\n      return badRequest(`Validation failed: ${validationErrors.join(', ')}`)\n    }\n\n    const [date, time] = dto.data_horario.split(' ')\n\n    const appointmentService = container.resolve<IAppointmentService>(TYPES.AppointmentService)\n\n    const savedAppointment = appointmentService.createAppointment({\n      doctorId: dto.medico,\n      patientName: dto.paciente,\n      date,\n      time,\n    })\n\n    console.log(savedAppointment)\n\n    return success({\n      mensagem: 'Appointment successfully created',\n      agendamento: dto,\n    })\n  } catch (error) {\n    console.error('Handler error:', error)\n    return badRequest('Failed to create appointment')\n  }\n}\n", "import { container } from 'tsyringe'\nimport { TYPES } from './types'\nimport { AppointmentService } from '../agendamento/service/AppointmentService'\nimport { ScheduleService } from '../agenda/service/ScheduleService'\nimport { IAppointmentService } from '../agendamento/interface/IAppointmentService'\nimport { IScheduleService } from '../agenda/interface/IScheduleService'\n\ncontainer.register<IAppointmentService>(TYPES.AppointmentService, {\n  useClass: AppointmentService,\n})\n\ncontainer.register<IScheduleService>(TYPES.ScheduleService, {\n  useClass: ScheduleService,\n})\n\nexport { container }\n", "export const TYPES = {\n  ScheduleService: Symbol.for('ScheduleService'),\n  AppointmentService: Symbol.for('AppointmentService'),\n}\n", "import { injectable } from 'tsyringe'\nimport { IAppointmentService } from '../interface/IAppointmentService'\n\n@injectable()\nexport class AppointmentService implements IAppointmentService {\n  createAppointment(data: { doctorId: number; patientName: string; date: string; time: string }): {\n    success: boolean\n    message: string\n  } {\n    console.log('Appointment created:', data)\n\n    return {\n      success: true,\n      message: `Appointment created for ${data.patientName} with doctor ID ${data.doctorId} on ${data.date} at ${data.time}`,\n    }\n  }\n}\n", "import { injectable } from 'tsyringe'\nimport { IScheduleService } from '../interface/IScheduleService'\nimport doctors from '../mocks/doctors.mock'\n\n@injectable()\nexport class ScheduleService implements IScheduleService {\n  getAllSchedules() {\n    return doctors || []\n  }\n}\n", "export default [\n  {\n    id: 1,\n    name: 'Dr. Jo\u00E3o Silva',\n    specialty: 'Cardiologist',\n    availableSlots: ['2024-10-05 09:00', '2024-10-05 10:00', '2024-10-05 11:00'],\n  },\n  {\n    id: 2,\n    name: 'Dra. Maria Souza',\n    specialty: 'Dermatologist',\n    availableSlots: ['2024-10-06 14:00', '2024-10-06 15:00'],\n  },\n]\n", "import { APIGatewayProxyResult } from 'aws-lambda'\n\nexport function success(\n  body: unknown,\n  statusCode = 200,\n): APIGatewayProxyResult {\n  return {\n    statusCode,\n    body: JSON.stringify(body),\n  }\n}\n\nexport function badRequest(message: string): APIGatewayProxyResult {\n  return {\n    statusCode: 400,\n    body: JSON.stringify({ message }),\n  }\n}\n", "import { validate } from 'class-validator'\n\nexport async function validateDto(dto: object): Promise<string[]> {\n  const errors = await validate(dto)\n  return errors.flatMap((e) => Object.values(e.constraints ?? {}))\n}\n", "import { IsNotEmpty, IsString, Matches } from 'class-validator'\n\nexport class CreateAppointmentDto {\n  @IsNotEmpty()\n  @IsString()\n  medico!: string\n\n  @IsNotEmpty()\n  @IsString()\n  paciente!: string\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches(/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}$/, {\n    message: 'data_horario must be in \"YYYY-MM-DD HH:mm\" format',\n  })\n  data_horario!: string\n}\n"],
  "mappings": "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AS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SAAS;AAAA,MACT,SA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AAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,MAAK,MAAK,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,MAAK,MAAK,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,MAAK,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,MAAK,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,OAAM,CAAC,IAAI,GAAE,O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",
  "names": ["Reflect", "hasOwn", "metadataRegistry", "metadata", "OrdinaryDefineOwnMetadata", "OrdinaryHasOwnMetadata", "OrdinaryGetOwnMetadata", "OrdinaryOwnMetadataKeys", "defineMetadata", "hasOwnMetadata", "getOwnMetadata", "getOwnMetadataKeys", "deleteMetadata", "MapIterator", "Map", "Set", "WeakMap", "exports", "v", "d", "b", "__assign", "exports", "Lifecycle", "exports", "exports", "exports", "exports", "exports", "handler", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "result", "exports", "exports", "exports", "injectable", "require_registry", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "__exportStar", "exports", "metadata", "exports", "global", "exports", "exports", "exports", "validationResult", "exports", "exports", "instance", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "object", "exports", "exports", "exports", "exports", "exports", "module", "exports", "module", "exports", "module", "includes", "exports", "module", "__importDefault", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "IsNotEmpty", "exports", "exports", "exports", "module", "exports", "exports", "exports", "module", "exports", "module", "__importDefault", "exports", "exports", "exports", "exports", "max", "exports", "min", "exports", "minDate", "exports", "maxDate", "exports", "module", "toString", "o", "exports", "module", "__importDefault", "exports", "__importDefault", "exports", "exports", "__importDefault", "exports", "exports", "__importDefault", "exports", "exports", "module", "includes", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "o", "__importDefault", "exports", "exports", "module", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "exports", "module", "exports", "module", "o", "exports", "module", "__importDefault", "exports", "__importDefault", "exports", "exports", "__importDefault", "exports", "exports", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "exports", "module", "__importDefault", "exports", "__importDefault", "exports", "exports", "module", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "isValidDate", "__importDefault", "exports", "exports", "module", "o", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "key", "phone", "__importDefault", "exports", "exports", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "r", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "o", "__importDefault", "exports", "__importDefault", "exports", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "Matches", "exports", "module", "objectConstructor", "constructor", "isObject", "object", "undefined", "normalizeArguments", "args", "Array", "prototype", "slice", "call", "arg_1", "arg_2", "arg_3", "arg_4", "text", "options", "metadata", "TypeError", "undefined", "defaultCountry", "isObject", "Error", "MIN_LENGTH_FOR_NSN", "MAX_LENGTH_FOR_NSN", "MAX_LENGTH_COUNTRY_CODE", "VALID_DIGITS", "DASHES", "SLASHES", "DOTS", "WHITESPACE", "BRACKETS", "TILDES", "VALID_PUNCTUATION", "PLUS_CHARS", "ParseError", "code", "Object", "setPrototypeOf", "prototype", "name", "constructor", "Error", "a", "b", "split", "pa", "pb", "i", "na", "Number", "nb", "isNaN", "V3", "V4", "DEFAULT_EXT_PREFIX", "CALLING_CODE_REG_EXP", "Metadata", "metadata", "validateMetadata", "setVersion", "call", "Object", "keys", "countries", "filter", "_", "countryCode", "v1", "v2", "v3", "nonGeographic", "nonGeographical", "country", "getCountryMetadata", "undefined", "callingCode", "getCountryCodesForCallingCode", "countryCodes", "countryCallingCodes", "length", "selectNumberingPlan", "test", "hasCountry", "Error", "numberingPlan", "NumberingPlan", "hasCallingCode", "getNumberingPlanMetadata", "getCountryCodeForCallingCode", "IDDPrefix", "defaultIDDPrefix", "nationalNumberPattern", "possibleLengths", "formats", "nationalPrefixForParsing", "nationalPrefixTransformRule", "leadingDigits", "hasTypes", "type", "ext", "country_phone_code_to_countries", "country_calling_codes", "globalMetadataObject", "_getFormats", "getDefaultCountryMetadataForRegion", "map", "Format", "_getNationalPrefixFormattingRule", "_nationalPrefixForParsing", "nationalPrefix", "_getNationalPrefixIsOptionalWhenFormatting", "types", "getType", "Type", "format", "_format", "nationalPrefixFormattingRule", "nationalPrefixIsOptionalWhenFormattingInNationalFormat", "usesNationalPrefix", "FIRST_GROUP_ONLY_PREFIX_PATTERN", "isObject", "join", "typeOf", "getExtPrefix", "getCountryCallingCode", "countryCallingCode", "isSupportedCountry", "hasOwnProperty", "version", "v4", "compare", "RFC3966_EXTN_PREFIX", "getExtensionDigitsPattern", "maxLength", "VALID_DIGITS", "createExtensionPattern", "purpose", "extLimitAfterExplicitLabel", "extLimitAfterLikelyLabel", "extLimitAfterAmbiguousChar", "extLimitWhenNotSure", "possibleSeparatorsBetweenNumberAndExtLabel", "possibleCharsAfterExtLabel", "optionalExtnSuffix", "explicitExtLabels", "ambiguousExtLabels", "ambiguousSeparator", "possibleSeparatorsNumberExtLabelNoComma", "autoDiallingAndExtLabelsFound", "rfcExtn", "explicitExtn", "ambiguousExtn", "americanStyleExtnWithSuffix", "autoDiallingExtn", "onlyCommasExtn", "MIN_LENGTH_PHONE_NUMBER_PATTERN", "VALID_DIGITS", "MIN_LENGTH_FOR_NSN", "VALID_PHONE_NUMBER", "PLUS_CHARS", "VALID_PUNCTUATION", "VALID_PHONE_NUMBER_START_REG_EXP", "RegExp", "VALID_PHONE_NUMBER_WITH_EXTENSION", "createExtensionPattern", "VALID_PHONE_NUMBER_PATTERN", "isViablePhoneNumber", "number", "length", "test", "isViablePhoneNumberStart", "EXTN_PATTERN", "RegExp", "createExtensionPattern", "extractExtension", "number", "start", "search", "numberWithoutExtension", "slice", "matches", "match", "i", "length", "ext", "DIGITS", "parseDigit", "character", "parseDigits", "string", "result", "split", "digit", "parseIncompletePhoneNumber", "string", "result", "split", "character", "parsePhoneNumberCharacter", "prevParsedCharacters", "emitEvent", "parseDigit", "mergeArrays", "a", "b", "merged", "slice", "element", "indexOf", "push", "sort", "checkNumberLength", "nationalNumber", "metadata", "checkNumberLengthForType", "undefined", "type", "type_info", "possible_lengths", "possibleLengths", "mobile_type", "mergeArrays", "actual_length", "length", "minimum_length", "indexOf", "isPossiblePhoneNumber", "input", "options", "metadata", "undefined", "Metadata", "v2", "countryCallingCode", "Error", "selectNumberingPlan", "phone", "country", "hasCountry", "possibleLengths", "isPossibleNumber", "nationalNumber", "isNonGeographicCallingCode", "checkNumberLength", "matchesEntirely", "text", "regular_expression", "RegExp", "test", "NON_FIXED_LINE_PHONE_TYPES", "getNumberType", "input", "options", "metadata", "country", "countryCallingCode", "Metadata", "selectNumberingPlan", "nationalNumber", "v2", "phone", "matchesEntirely", "nationalNumberPattern", "isNumberTypeEqualTo", "type", "pattern", "possibleLengths", "indexOf", "length", "isValidNumber", "input", "options", "metadata", "Metadata", "selectNumberingPlan", "country", "countryCallingCode", "hasTypes", "getNumberType", "undefined", "nationalNumber", "v2", "phone", "matchesEntirely", "nationalNumberPattern", "getPossibleCountriesForNumber", "callingCode", "nationalNumber", "metadata", "_metadata", "Metadata", "possibleCountries", "getCountryCodesForCallingCode", "filter", "country", "couldNationalNumberBelongToCountry", "selectNumberingPlan", "numberingPlan", "possibleLengths", "indexOf", "length", "CAPTURING_DIGIT_PATTERN", "RegExp", "VALID_DIGITS", "stripIddPrefix", "number", "country", "callingCode", "metadata", "countryMetadata", "Metadata", "selectNumberingPlan", "IDDPrefixPattern", "IDDPrefix", "search", "slice", "match", "length", "matchedGroups", "extractNationalNumberFromPossiblyIncompleteNumber", "number", "metadata", "numberingPlan", "nationalPrefixForParsing", "prefixPattern", "RegExp", "prefixMatch", "exec", "nationalNumber", "carrierCode", "capturedGroupsCount", "length", "hasCapturedGroups", "nationalPrefixTransformRule", "replace", "prefixBeforeNationalNumber", "slice", "nationalPrefix", "possiblePositionOfTheFirstCapturedGroup", "indexOf", "possibleNationalPrefix", "extractNationalNumber", "number", "metadata", "extractNationalNumberFromPossiblyIncompleteNumber", "carrierCode", "nationalNumber", "shouldHaveExtractedNationalPrefix", "possibleLengths", "isPossibleIncompleteNationalNumber", "nationalNumberBefore", "nationalNumberAfter", "matchesEntirely", "nationalNumberPattern", "checkNumberLength", "extractCountryCallingCodeFromInternationalNumberWithoutPlusSign", "number", "country", "callingCode", "metadata", "countryCallingCode", "getCountryCallingCode", "indexOf", "Metadata", "selectNumberingPlan", "possibleShorterNumber", "slice", "length", "extractNationalNumber", "possibleShorterNationalNumber", "nationalNumber", "matchesEntirely", "nationalNumberPattern", "checkNumberLength", "extractCountryCallingCode", "number", "country", "callingCode", "metadata", "isNumberWithIddPrefix", "numberWithoutIDD", "stripIddPrefix", "extractCountryCallingCodeFromInternationalNumberWithoutPlusSign", "countryCallingCode", "shorterNumber", "countryCallingCodeSource", "Metadata", "i", "MAX_LENGTH_COUNTRY_CODE", "length", "slice", "hasCallingCode", "selectNumberingPlan", "applyInternationalSeparatorStyle", "formattedNumber", "replace", "RegExp", "VALID_PUNCTUATION", "trim", "FIRST_GROUP_PATTERN", "formatNationalNumberUsingFormat", "number", "format", "useInternationalFormat", "withNationalPrefix", "carrierCode", "metadata", "formattedNumber", "replace", "RegExp", "pattern", "internationalFormat", "nationalPrefixFormattingRule", "applyInternationalSeparatorStyle", "SINGLE_IDD_PREFIX_REG_EXP", "getIddPrefix", "country", "callingCode", "metadata", "countryMetadata", "Metadata", "selectNumberingPlan", "defaultIDDPrefix", "test", "IDDPrefix", "parseRFC3966", "text", "number", "ext", "replace", "split", "part", "name", "value", "isViablePhoneNumber", "result", "formatRFC3966", "Error", "DEFAULT_OPTIONS", "formatExtension", "formattedNumber", "extension", "metadata", "ext", "formatNumber", "input", "format", "options", "Metadata", "country", "hasCountry", "Error", "countryCallingCode", "selectNumberingPlan", "phone", "nationalNumber", "v2", "number", "formatNationalNumber", "carrierCode", "addExtension", "formatRFC3966", "fromCountry", "formatIDD", "formatAs", "chooseFormatForNumber", "formats", "formatNationalNumberUsingFormat", "useInternationalFormat", "withNationalPrefix", "nationalPrefixIsOptionalWhenFormattingInNationalFormat", "nationalPrefix", "availableFormats", "nationalNnumber", "leadingDigitsPatterns", "length", "lastLeadingDigitsPattern", "search", "matchesEntirely", "pattern", "fromCountryCallingCode", "getCountryCallingCode", "iddPrefix", "getIddPrefix", "undefined", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "PhoneNumber", "countryOrCountryCallingCode", "nationalNumber", "metadata", "TypeError", "isObject", "countries", "e164Number", "E164_NUMBER_REGEXP", "test", "Error", "extractCountryCallingCode", "undefined", "countryCallingCode", "number", "validateMetadata", "getCountryAndCountryCallingCode", "country", "getMetadata", "ext", "getPossibleCountriesForNumber", "isPossibleNumber", "v2", "isValidNumber", "Metadata", "isNonGeographicCallingCode", "phoneNumber", "getNumberType", "format", "options", "formatNumber", "isCountryCode", "value", "metadataJson", "selectNumberingPlan", "getCountryByNationalNumber", "nationalPhoneNumber", "countries", "defaultCountry", "metadata", "Metadata", "country", "leadingDigits", "search", "getNumberType", "phone", "undefined", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "getCountryByCallingCode", "callingCode", "nationalPhoneNumber", "nationalNumber", "defaultCountry", "metadata", "isNonGeographicCallingCode", "possibleCountries", "getCountryCodesForCallingCode", "length", "getCountryByNationalNumber", "countries", "PLUS_SIGN", "RFC3966_VISUAL_SEPARATOR_", "RFC3966_PHONE_DIGIT_", "VALID_DIGITS", "RFC3966_GLOBAL_NUMBER_DIGITS_", "RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_", "RegExp", "ALPHANUM_", "RFC3966_DOMAINLABEL_", "VALID_ALPHA_", "RFC3966_TOPLABEL_", "RFC3966_DOMAINNAME_", "RFC3966_DOMAINNAME_PATTERN_", "RFC3966_PREFIX_", "RFC3966_PHONE_CONTEXT_", "RFC3966_ISDN_SUBADDRESS_", "extractPhoneContext", "numberToExtractFrom", "indexOfPhoneContext", "indexOf", "phoneContextStart", "length", "phoneContextEnd", "substring", "isPhoneContextValid", "phoneContext", "test", "extractFormattedPhoneNumberFromPossibleRfc3966NumberUri", "numberToParse", "extractFormattedPhoneNumber", "phoneContext", "extractPhoneContext", "isPhoneContextValid", "ParseError", "phoneNumberString", "charAt", "PLUS_SIGN", "indexOfRfc3966Prefix", "indexOf", "RFC3966_PREFIX_", "indexOfNationalNumber", "length", "indexOfPhoneContext", "RFC3966_PHONE_CONTEXT_", "substring", "indexOfIsdn", "RFC3966_ISDN_SUBADDRESS_", "MAX_INPUT_STRING_LENGTH", "PHONE_NUMBER_START_PATTERN", "RegExp", "PLUS_CHARS", "VALID_DIGITS", "AFTER_PHONE_NUMBER_END_PATTERN", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "parse", "text", "options", "metadata", "Metadata", "defaultCountry", "hasCountry", "v2", "ParseError", "Error", "parseInput", "extract", "formattedPhoneNumber", "number", "ext", "error", "parsePhoneNumber", "defaultCallingCode", "country", "nationalNumber", "countryCallingCode", "countryCallingCodeSource", "carrierCode", "hasSelectedNumberingPlan", "length", "MIN_LENGTH_FOR_NSN", "MAX_LENGTH_FOR_NSN", "phoneNumber", "PhoneNumber", "__countryCallingCodeSource", "valid", "extended", "matchesEntirely", "nationalNumberPattern", "result", "possible", "possibleLengths", "isPossibleNumber", "phone", "extractFormattedPhoneNumber", "throwOnError", "startsAt", "search", "slice", "replace", "extractFormattedPhoneNumberFromPossibleRfc3966NumberUri", "isViablePhoneNumber", "isViablePhoneNumberStart", "withExtensionStripped", "extractExtension", "extractCountryCallingCode", "parseIncompletePhoneNumber", "selectNumberingPlan", "isNonGeographicCallingCode", "getCountryCallingCode", "extractNationalNumber", "exactCountry", "getCountryByCallingCode", "parsePhoneNumberWithError", "text", "options", "metadata", "parse", "v2", "parsePhoneNumber", "text", "options", "metadata", "defaultCountry", "isSupportedCountry", "undefined", "parsePhoneNumberWithError", "error", "ParseError", "parsePhoneNumber", "normalizeArguments", "arguments", "text", "options", "metadata", "parsePhoneNumber_", "parsePhoneNumberWithError", "normalizeArguments", "arguments", "text", "options", "metadata", "parsePhoneNumberWithError_", "isValidPhoneNumber", "normalizeArguments", "arguments", "text", "options", "metadata", "extract", "phoneNumber", "parsePhoneNumber", "isValid", "isPossiblePhoneNumber", "normalizeArguments", "arguments", "text", "options", "metadata", "extract", "phoneNumber", "parsePhoneNumber", "isPossible", "validatePhoneNumberLength", "normalizeArguments", "arguments", "text", "options", "metadata", "extract", "phoneNumber", "parsePhoneNumberWithError", "Metadata", "selectNumberingPlan", "countryCallingCode", "result", "checkNumberLength", "nationalNumber", "error", "ParseError", "message", "Node", "key", "value", "next", "prev", "LRUCache", "limit", "size", "head", "tail", "cache", "ensureLimit", "node", "remove", "put", "console", "log", "RegExpCache", "size", "cache", "LRUCache", "pattern", "regExp", "get", "RegExp", "put", "limit", "lower", "upper", "TypeError", "trimAfterFirstMatch", "regexp", "string", "index", "search", "slice", "startsWith", "substring", "indexOf", "endsWith", "length", "_pZ", "pZ", "PZ", "_pN", "_pNd", "pNd", "_pL", "pL", "pL_regexp", "RegExp", "_pSc", "pSc", "pSc_regexp", "_pMn", "pMn", "pMn_regexp", "_InBasic_Latin", "_InLatin_1_Supplement", "_InLatin_Extended_A", "_InLatin_Extended_Additional", "_InLatin_Extended_B", "_InCombining_Diacritical_Marks", "latinLetterRegexp", "isLatinLetter", "letter", "test", "isInvalidPunctuationSymbol", "character", "matchPhoneNumberStringAgainstPhoneNumber", "phoneNumberString", "phoneNumber", "metadata", "phoneNumberStringContainsCallingCode", "parsedPhoneNumber", "parsePhoneNumber", "defaultCallingCode", "countryCallingCode", "ext", "number", "nationalNumber", "indexOf", "POSSIBLE", "phoneNumber", "candidate", "metadata", "VALID", "defaultCountry", "isValid", "containsOnlyValidXChars", "STRICT_GROUPING", "regExpCache", "containsMoreThanOneSlashInNationalNumber", "isNationalPrefixPresentIfRequired", "checkNumberGroupingIsValid", "allNumberGroupsRemainGrouped", "EXACT_GROUPING", "allNumberGroupsAreExactlyPresent", "index", "length", "charAtIndex", "charAt", "charAtNextIndex", "matchPhoneNumberStringAgainstPhoneNumber", "substring", "ext", "parseDigits", "_metadata", "__countryCallingCodeSource", "Metadata", "selectNumberingPlan", "countryCallingCode", "phoneNumberRegion", "country", "getCountryByCallingCode", "nationalNumber", "format", "chooseFormatForNumber", "numberingPlan", "formats", "nationalPrefixFormattingRule", "nationalPrefixIsOptionalWhenFormattingInNationalFormat", "usesNationalPrefix", "Boolean", "nationalPrefix", "firstSlashInBodyIndex", "indexOf", "secondSlashInBodyIndex", "candidateHasCountryCode", "slice", "number", "checkGroups", "Error", "normalizedCandidate", "normalizeDigits", "formattedNumberGroups", "getNationalNumberGroups", "alternateFormats", "MetadataManager", "getAlternateFormatsForCountry", "getCountryCode", "nationalSignificantNumber", "util", "getNationalSignificantNumber", "numberFormats", "alternateFormat", "leadingDigitsPatterns", "leadingDigitsRegExp", "getPatternForRegExp", "test", "formattingPattern", "formatNsnUsingPattern", "split", "rfc3966Format", "formatNumber", "endIndex", "startIndex", "candidateGroups", "NON_DIGITS_PATTERN", "candidateNumberGroupIndex", "hasExtension", "contains", "formattedNumberGroupIndex", "endsWith", "fromIndex", "getCountryCodeSource", "CountryCodeSource", "FROM_DEFAULT_COUNTRY", "countryCode", "String", "i", "region", "getRegionCodeForCountryCode", "getNddPrefixForRegion", "Character", "isDigit", "startsWith", "getExtension", "SECOND_NUMBER_START_PATTERN", "parsePreCandidate", "candidate", "trimAfterFirstMatch", "SLASH_SEPARATED_DATES", "TIME_STAMPS", "TIME_STAMPS_SUFFIX_LEADING", "isValidPreCandidate", "candidate", "offset", "text", "test", "followingText", "slice", "length", "OPENING_PARENS", "CLOSING_PARENS", "NON_PARENS", "LEAD_CLASS", "PLUS_CHARS", "LEAD_CLASS_LEADING", "RegExp", "BRACKET_PAIR_LIMIT", "limit", "MATCHING_BRACKETS_ENTIRE", "PUB_PAGES", "isValidCandidate", "candidate", "offset", "text", "leniency", "test", "previousChar", "isInvalidPunctuationSymbol", "isLatinLetter", "lastCharIndex", "length", "nextChar", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "EXTN_PATTERNS_FOR_MATCHING", "createExtensionPattern", "INNER_MATCHES", "pZ", "PZ", "leadLimit", "limit", "punctuationLimit", "digitBlockLimit", "MAX_LENGTH_FOR_NSN", "MAX_LENGTH_COUNTRY_CODE", "blockLimit", "punctuation", "VALID_PUNCTUATION", "digitSequence", "pNd", "PATTERN", "LEAD_CLASS", "UNWANTED_END_CHAR_PATTERN", "RegExp", "_pN", "_pL", "MAX_SAFE_INTEGER", "Number", "Math", "pow", "PhoneNumberMatcher", "text", "options", "metadata", "v2", "defaultCallingCode", "defaultCountry", "isSupportedCountry", "undefined", "leniency", "extended", "maxTries", "TypeError", "Leniency", "state", "searchIndex", "regExpCache", "RegExpCache", "matches", "exec", "candidate", "offset", "index", "parsePreCandidate", "isValidPreCandidate", "match", "parseAndVerify", "extractInnerMatch", "startsAt", "endsAt", "number", "phoneNumber", "result", "phone", "nationalNumber", "country", "countryCallingCode", "ext", "substring", "innerMatchPattern", "isFirstMatch", "candidateMatch", "innerMatchRegExp", "trimAfterFirstMatch", "slice", "candidateIndexGuess", "indexOf", "isValidCandidate", "parsePhoneNumber", "isPossible", "length", "lastMatch", "find", "hasNext", "Error", "findNumbers", "normalizeArguments", "arguments", "text", "options", "metadata", "matcher", "PhoneNumberMatcher", "results", "hasNext", "push", "next", "searchNumbers", "normalizeArguments", "arguments", "text", "options", "metadata", "matcher", "PhoneNumberMatcher", "Symbol", "iterator", "next", "hasNext", "done", "value", "findPhoneNumbersInText", "normalizeArguments", "arguments", "text", "options", "metadata", "matcher", "PhoneNumberMatcher", "v2", "results", "hasNext", "push", "next", "searchPhoneNumbersInText", "normalizeArguments", "arguments", "text", "options", "metadata", "matcher", "PhoneNumberMatcher", "v2", "Symbol", "iterator", "next", "hasNext", "done", "value", "AsYouTypeState", "onCountryChange", "onCallingCodeChange", "country", "callingCode", "international", "missingPlus", "IDDPrefix", "undefined", "digits", "resetNationalSignificantNumber", "initCountryAndCallingCode", "nationalSignificantNumber", "getNationalDigits", "nationalSignificantNumberMatchesInput", "nationalPrefix", "carrierCode", "complexPrefixBeforeNationalSignificantNumber", "properties", "Object", "keys", "key", "setCountry", "setCallingCode", "nextDigits", "slice", "length", "DIGIT_PLACEHOLDER", "DIGIT_PLACEHOLDER_MATCHER", "RegExp", "countOccurences", "symbol", "string", "count", "split", "character", "repeat", "times", "result", "cutAndStripNonPairedParens", "cutBeforeIndex", "stripNonPairedParens", "slice", "closeNonPairedParens", "template", "cut_before", "retained_template", "opening_braces", "closing_braces", "dangling_braces", "length", "i", "push", "pop", "start", "cleared_string", "index", "populateTemplateWithDigits", "position", "digits", "digit", "search", "replace", "formatCompleteNumber", "state", "format", "metadata", "shouldTryNationalPrefixFormattingRule", "getSeparatorAfterNationalPrefix", "matcher", "RegExp", "pattern", "test", "nationalSignificantNumber", "formatNationalNumberWithAndWithoutNationalPrefixFormattingRule", "canFormatCompleteNumber", "checkNumberLength", "international", "nationalPrefix", "carrierCode", "formattedNumber", "formatNationalNumber", "useNationalPrefixFormattingRule", "formattedNationalNumber", "formatNationalNumberUsingFormat", "useInternationalFormat", "withNationalPrefix", "complexPrefixBeforeNationalSignificantNumber", "isValidFormattedNationalNumber", "parseDigits", "getNationalDigits", "PatternParser", "pattern", "context", "or", "instructions", "parsePattern", "length", "Error", "branches", "op", "args", "concat", "expandSingleElementArray", "push", "pop", "match", "OPERATOR", "ILLEGAL_CHARACTER_REGEXP", "test", "getContext", "split", "operator", "before", "slice", "index", "rightPart", "startContext", "endContext", "oneOfSet", "parseOneOfSet", "values", "i", "prevValue", "charCodeAt", "nextValue", "value", "String", "fromCharCode", "RegExp", "array", "PatternMatcher", "pattern", "matchTree", "PatternParser", "parse", "string", "allowOverflow", "Error", "result", "match", "split", "matchedChars", "overflow", "characters", "tree", "last", "characterString", "join", "indexOf", "length", "partialMatch", "slice", "Array", "isArray", "restCharacters", "i", "subtree", "JSON", "stringify", "op", "args", "branch", "char", "DUMMY_DIGIT", "LONGEST_NATIONAL_PHONE_NUMBER_LENGTH", "LONGEST_DUMMY_PHONE_NUMBER", "repeat", "NATIONAL_PREFIX_SEPARATORS_PATTERN", "SUPPORT_LEGACY_FORMATTING_PATTERNS", "CREATE_CHARACTER_CLASS_PATTERN", "CREATE_STANDALONE_DIGIT_PATTERN", "NON_ALTERING_FORMAT_REG_EXP", "RegExp", "VALID_PUNCTUATION", "MIN_LEADING_DIGITS_LENGTH", "AsYouTypeFormatter", "state", "metadata", "resetFormat", "chosenFormat", "undefined", "template", "nationalNumberTemplate", "populatedNationalNumberTemplate", "populatedNationalNumberTemplatePosition", "numberingPlan", "isNANP", "callingCode", "matchingFormats", "formats", "nationalSignificantNumber", "narrowDownMatchingFormats", "nextDigits", "canFormatCompleteNumber", "format", "formattedCompleteNumber", "formatCompleteNumber", "shouldTryNationalPrefixFormattingRule", "international", "nationalPrefix", "getSeparatorAfterNationalPrefix", "setNationalNumberTemplate", "replace", "DIGIT_PLACEHOLDER", "lastIndexOf", "formatNationalNumberWithNextDigits", "previouslyChosenFormat", "newlyChosenFormat", "chooseFormat", "formatNextNationalNumberDigits", "getNationalDigits", "leadingDigits", "leadingDigitsPatternIndex", "length", "filter", "formatSuits", "formatMatches", "indexOf", "usesNationalPrefix", "nationalPrefixIsOptionalWhenFormattingInNationalFormat", "nationalPrefixIsMandatoryWhenFormattingInNationalFormat", "leadingDigitsPatternsCount", "leadingDigitsPatterns", "Math", "min", "leadingDigitsPattern", "PatternMatcher", "match", "allowOverflow", "error", "console", "test", "internationalFormat", "_loop", "getFormatFormat", "createTemplateForFormat", "_", "slice", "pattern", "getTemplateForFormat", "nationalPrefixFormattingRule", "options", "IDDPrefix", "missingPlus", "spacing", "index", "i", "internationalPrefix", "getInternationalPrefixBeforeCountryCallingCode", "getDigitsWithoutInternationalPrefix", "cutAndStripNonPairedParens", "complexPrefixBeforeNationalSignificantNumber", "digits", "strictPattern", "nationalNumberDummyDigits", "numberFormat", "nationalPrefixIncludedInTemplate", "numberFormatWithNationalPrefix", "FIRST_GROUP_PATTERN", "parseDigits", "applyInternationalSeparatorStyle", "result", "populateTemplateWithDigits", "VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART", "VALID_PUNCTUATION", "VALID_DIGITS", "VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN", "RegExp", "VALID_FORMATTED_PHONE_NUMBER_PART", "PLUS_CHARS", "AFTER_PHONE_NUMBER_DIGITS_END_PATTERN", "COMPLEX_NATIONAL_PREFIX", "AsYouTypeParser", "defaultCountry", "defaultCallingCode", "metadata", "onNationalSignificantNumberChange", "text", "state", "extractFormattedDigitsAndPlus", "formattedDigits", "hasPlus", "digits", "parseDigits", "justLeadingPlus", "startInternationalNumber", "inputDigits", "nextDigits", "hasReceivedThreeLeadingDigits", "length", "appendDigits", "extractIddPrefix", "isWaitingForCountryCallingCode", "extractCountryCallingCode", "appendNationalSignificantNumberDigits", "international", "hasExtractedNationalSignificantNumber", "extractNationalSignificantNumber", "getNationalDigits", "stateUpdate", "update", "callingCode", "getDigitsWithoutInternationalPrefix", "countryCallingCode", "number", "setCallingCode", "nationalSignificantNumber", "numberingPlan", "hasSelectedNumberingPlan", "nationalPrefixForParsing", "_nationalPrefixForParsing", "couldPossiblyExtractAnotherNationalSignificantNumber", "test", "undefined", "nationalDigits", "setState", "extractNationalNumberFromPossiblyIncompleteNumber", "nationalPrefix", "nationalNumber", "carrierCode", "onExtractedNationalNumber", "prevNationalSignificantNumber", "complexPrefixBeforeNationalSignificantNumber", "nationalSignificantNumberMatchesInput", "nationalSignificantNumberIndex", "lastIndexOf", "prefixBeforeNationalNumber", "slice", "extractAnotherNationalSignificantNumber", "extractCallingCodeAndNationalSignificantNumber", "fixMissingPlus", "IDDPrefix", "numberWithoutIDD", "stripIddPrefix", "country", "extractCountryCallingCodeFromInternationalNumberWithoutPlusSign", "newCallingCode", "missingPlus", "resetNationalSignificantNumber", "extractFormattedPhoneNumber", "startsAt", "search", "replace", "_extractFormattedDigitsAndPlus", "extractedNumber", "USE_NON_GEOGRAPHIC_COUNTRY_CODE", "AsYouType", "optionsOrDefaultCountry", "metadata", "Metadata", "getCountryAndCallingCode", "defaultCountry", "defaultCallingCode", "reset", "isObject", "hasCountry", "undefined", "isNonGeographicCallingCode", "text", "parser", "input", "state", "digits", "justLeadingPlus", "formattedOutput", "determineTheCountryIfNeeded", "nationalSignificantNumber", "formatter", "narrowDownMatchingFormats", "formattedNationalNumber", "hasSelectedNumberingPlan", "format", "reExtractNationalSignificantNumber", "nationalDigits", "getNationalDigits", "getFullNumber", "getNonFormattedNumber", "AsYouTypeState", "onCountryChange", "country", "onCallingCodeChange", "callingCode", "selectNumberingPlan", "numberingPlan", "AsYouTypeFormatter", "AsYouTypeParser", "onNationalSignificantNumberChange", "international", "isInternational", "getCallingCode", "_getCountry", "isCountryCallingCodeAmbiguous", "determineTheCountry", "prefix", "getInternationalPrefixBeforeCountryCallingCode", "spacing", "getDigitsWithoutInternationalPrefix", "complexPrefixBeforeNationalSignificantNumber", "nationalPrefix", "number", "nationalSignificantNumberMatchesInput", "getNonFormattedNationalNumberWithPrefix", "replace", "DIGIT_PLACEHOLDER", "countryCodes", "getCountryCodesForCallingCode", "length", "setCountry", "getCountryByCallingCode", "nationalNumber", "callingCode_", "countryCallingCode", "carrierCode", "ambiguousCountries", "exactCountry", "getCountryByNationalNumber", "countries", "phoneNumber", "PhoneNumber", "getNumber", "isPossible", "isValid", "getTemplate", "getNonFormattedTemplate", "getCountries", "metadata", "Metadata", "getExampleNumber", "country", "examples", "metadata", "PhoneNumber", "formatIncompletePhoneNumber", "value", "optionsOrDefaultCountry", "metadata", "undefined", "AsYouType", "input", "exports", "module", "exports", "module", "country", "exports", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "__importDefault", "exports", "exports", "module", "checkAddressCode", "checkBirthDayCode", "getParityBit", "checkParityBit", "check15IdCardNo", "check18IdCardNo", "checkIdCardNo", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "__importDefault", "exports", "exports", "__importDefault", "exports", "exports", "module", "__importDefault", "exports", "exports", "module", "o", "__importDefault", "exports", "exports", "module", "exports", "module", "__importDefault", "exports", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "r", "F", "e", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "o", "exports", "module", "o", "exports", "module", "o", "exports", "exports", "module", "o", "_interopRequireWildcard", "e", "t", "exports", "exports", "module", "exports", "exports", "module", "exports", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "r", "F", "e", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "exports", "o", "_interopRequireWildcard", "e", "t", "AU", "CH", "hasValidCheckNumber", "PT", "exports", "module", "o", "_interopRequireWildcard", "e", "t", "__importStar", "exports", "exports", "__importDefault", "exports", "__importDefault", "exports", "__importDefault", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "IsString", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "exports", "__exportStar", "exports", "exports", "exports", "exports", "exports", "__exportStar", "exports", "validate", "import_tsyringe", "import_tsyringe", "import_class_validator"]
}
